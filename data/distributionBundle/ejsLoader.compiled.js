#!/usr/bin/env node
'use strict';var _clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_loaderUtils=require('loader-utils'),loaderUtils=_interopRequireWildcard(_loaderUtils),_ejs=require('ejs'),ejs=_interopRequireWildcard(_ejs),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}module.exports=function(a){this.cacheable&&this.cacheable();const b=_clientnode2.default.convertSubstringInPlainObject(_clientnode2.default.extendObject(!0,{context:'./',extensions:{file:{external:['.js'],internal:['.js','.css','.svg','.png','.jpg','.gif','.ico','.html','.json','.eot','.ttf','.woff']},module:[]},module:{aliases:{},replacements:{}},precompile:!1},this.options||{},loaderUtils.getOptions(this)||{}),/#%%%#/g,'!'),c=(d,e=b.compiler,f=!1)=>(g={})=>{e=_clientnode2.default.extendObject(!0,{filename:d},e);let h;if(e.isString?(delete e.isString,h=ejs.compile(d,e)):h=ejs.compile(fileSystem.readFileSync(d,_clientnode2.default.extendObject(!0,{encoding:'utf-8'},e),e)),f)return`module.exports = ${h.toString()};`;const i=(j)=>{const k=j.replace(/^(.+)\?[^?]+$/,'$1'),l=j.match(/^[^?]+\?(.+)$/,'$1');let m={};if(l){m=((q,r,s,t,u)=>new Function('request','template','source','compile','locals',`return ${l[1]}`)(q,r,s,t,u))(j,k,a,c,g)}let n=_clientnode2.default.copyLimitedRecursively(e);if(delete n.client,n=_clientnode2.default.extendObject(!0,{encoding:'utf-8'},n,m.options||{}),n.isString)return c(k,n)(m);const o=_helper2.default.determineModuleFilePath(k,b.module.aliases,b.module.replacements,b.extensions,b.context,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames);if(o)return this.addDependency(o),l||o.endsWith('.ejs')?c(o,n)(m):fileSystem.readFileSync(o,n);throw new Error(`Given template file "${k}" couldn't be resolved.`)};return h(_clientnode2.default.extendObject(!0,{configuration:_configurator2.default,Helper:_helper2.default,include:i,require:i,Tools:_clientnode2.default},g))};return c(a,{client:b.precompile,compileDebug:this.debug||!1,debug:this.debug||!1,filename:loaderUtils.getRemainingRequest(this).replace(/^!/,''),isString:!0},b.precompile)(b.locals||{})};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,