#!/usr/bin/env node
'use strict';var _clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_loaderUtils=require('loader-utils'),loaderUtils=_interopRequireWildcard(_loaderUtils),_ejs=require('ejs'),ejs=_interopRequireWildcard(_ejs),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}module.exports=function(a){this.cacheable&&this.cacheable();const b=_clientnode2.default.convertSubstringInPlainObject(_clientnode2.default.extendObject(!0,{context:'./',extensions:{file:{external:['.js'],internal:['.js','.css','.svg','.png','.jpg','.gif','.ico','.html','.json','.eot','.ttf','.woff']},module:[]},module:{aliases:{},replacements:{}},compileSteps:2},this.options||{},loaderUtils.getOptions(this)||{}),/#%%%#/g,'!'),c=(d,e=b.compiler,f=2)=>(g={})=>{e=_clientnode2.default.extendObject(!0,{filename:d},e);const h=(k)=>{const l=k.replace(/^(.+)\?[^?]+$/,'$1'),m=k.match(/^[^?]+\?(.+)$/,'$1');let n={};if(m){n=((r,s,t,u,v)=>new Function('request','template','source','compile','locals',`return ${m[1]}`)(r,s,t,u,v))(k,l,a,c,g)}let o=_clientnode2.default.copyLimitedRecursively(e);if(delete o.client,o=_clientnode2.default.extendObject(!0,{encoding:'utf-8'},o,n.options||{}),o.isString)return c(l,o)(n);const p=_helper2.default.determineModuleFilePath(l,b.module.aliases,b.module.replacements,b.extensions,b.context,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames);if(p)return this.addDependency(p),m||p.endsWith('.ejs')?c(p,o)(n):fileSystem.readFileSync(p,o);throw new Error(`Given template file "${l}" couldn't be resolved.`)};let i=f,j=d;for(;0<i;){if('string'==typeof j){if(e.isString)delete e.isString,j=ejs.compile(j,e);else{let k='utf-8';'encoding'in e&&(k=e.encoding),j=ejs.compile(fileSystem.readFileSync(j,{encoding:k}),e)}e.isString=!0}else j=j(_clientnode2.default.extendObject(!0,{configuration:_configurator2.default,Helper:_helper2.default,include:h,require:h,Tools:_clientnode2.default},g));i-=1}return!(f%2)?j:`module.exports = ${j.toString()};`};return c(a,{client:!!(b.compileSteps%2),compileDebug:this.debug||!1,debug:this.debug||!1,filename:loaderUtils.getRemainingRequest(this).replace(/^!/,''),isString:!0},b.compileSteps)(b.locals||{})};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,