#!/usr/bin/env node
'use strict';var _babelCore=require('babel-core'),_babelPresetBabili=require('babel-preset-babili'),_babelPresetBabili2=_interopRequireDefault(_babelPresetBabili),_babelPluginTransformWith=require('babel-plugin-transform-with'),_babelPluginTransformWith2=_interopRequireDefault(_babelPluginTransformWith),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_ejs=require('ejs'),ejs=_interopRequireWildcard(_ejs),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_htmlMinifier=require('html-minifier'),_loaderUtils=require('loader-utils'),loaderUtils=_interopRequireWildcard(_loaderUtils),_path=require('path'),_path2=_interopRequireDefault(_path),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}module.exports=function(source){'cachable'in this&&this.cacheable&&this.cacheable();const query=_clientnode2.default.convertSubstringInPlainObject(_clientnode2.default.extendObject(!0,{compress:{html:{},javaScript:{}},context:'./',extensions:{file:{external:['.js'],internal:['.js','.css','.svg','.png','.jpg','.gif','.ico','.html','.json','.eot','.ttf','.woff']},module:[]},module:{aliases:{},replacements:{}},compileSteps:2},this.options||{},'query'in this?loaderUtils.getOptions(this)||{}:{}),/#%%%#/g,'!'),compile=(template,options=query.compiler,compileSteps=2)=>(locals={})=>{options=_clientnode2.default.extendObject(!0,{filename:template},options);const require=(a,b={})=>{const c=a.replace(/^(.+)\?[^?]+$/,'$1'),d=a.match(/^[^?]+\?(.+)$/,'$1');if(d){b=_clientnode2.default.extendObject(!0,b,((h,i,j,k,l)=>new Function('request','template','source','compile','locals',`return ${d[1]}`)(h,i,j,k,l))(a,c,source,compile,locals))}let e=_clientnode2.default.copyLimitedRecursively(options);if(delete e.client,e=_clientnode2.default.extendObject(!0,{encoding:_configurator2.default.encoding},e,b.options||{}),e.isString)return compile(c,e)(b);const f=_helper2.default.determineModuleFilePath(c,query.module.aliases,query.module.replacements,query.extensions,query.context,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames,_configurator2.default.encoding);if(f)return'query'in this&&this.addDependency(f),d||f.endsWith('.ejs')?compile(f,e)(b):fileSystem.readFileSync(f,e);throw new Error(`Given template file "${c}" couldn't be resolved.`)},compressHTML=(a)=>query.compress.html?(0,_htmlMinifier.minify)(a,_clientnode2.default.extendObject(!0,{caseSensitive:!0,collapseInlineTagWhitespace:!0,collapseWhitespace:!0,conservativeCollapse:!0,minifyCSS:!0,minifyJS:!0,processScripts:['text/ng-template','text/x-handlebars-template'],removeAttributeQuotes:!0,removeComments:!0,removeRedundantAttributes:!0,removeScriptTypeAttributes:!0,removeStyleLinkTypeAttributes:!0,sortAttributes:!0,sortClassName:!0,trimCustomFragments:!0,useShortDoctype:!0},query.compress.html)):a;let remainingSteps=compileSteps,result=template,isString=options.isString;for(delete options.isString;0<remainingSteps;){if('string'==typeof result){const filePath=isString&&options.filename||result;if(filePath&&'.js'===_path2.default.extname(filePath))result=eval('require')(filePath);else{if(!isString){let a=_configurator2.default.encoding;'encoding'in options&&(a=options.encoding),result=fileSystem.readFileSync(result,{encoding:a})}1===remainingSteps&&(result=compressHTML(result)),result=ejs.compile(result,options)}}else result=compressHTML(result(_clientnode2.default.extendObject(!0,{configuration:_configurator2.default,Helper:_helper2.default,include:require,require,Tools:_clientnode2.default},locals)));remainingSteps-=1}return!(compileSteps%2)?result:`'use strict';\n`+(0,_babelCore.transform)(`module.exports = ${result.toString()};`,{ast:!1,babelrc:!1,comments:!!!query.compress.javaScript,compact:!!query.compress.javaScript,filename:options.filename||'unknown',minified:!!query.compress.javaScript,plugins:[_babelPluginTransformWith2.default],presets:query.compress.javaScript?[[_babelPresetBabili2.default,query.compress.javaScript]]:[],sourceMaps:!1,sourceType:'script'}).code};return compile(source,{client:!!(query.compileSteps%2),compileDebug:this.debug||!1,debug:this.debug||!1,filename:'query'in this?loaderUtils.getRemainingRequest(this).replace(/^!/,''):this.filename||null,isString:!0},query.compileSteps)(query.locals||{})};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,