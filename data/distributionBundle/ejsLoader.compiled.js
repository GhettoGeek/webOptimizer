#!/usr/bin/env node
'use strict';var _babelCore=require('babel-core'),_babelPresetBabili=require('babel-preset-babili'),_babelPresetBabili2=_interopRequireDefault(_babelPresetBabili),_babelPluginTransformWith=require('babel-plugin-transform-with'),_babelPluginTransformWith2=_interopRequireDefault(_babelPluginTransformWith),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_ejs=require('ejs'),ejs=_interopRequireWildcard(_ejs),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_htmlMinifier=require('html-minifier'),_loaderUtils=require('loader-utils'),loaderUtils=_interopRequireWildcard(_loaderUtils),_path=require('path'),_path2=_interopRequireDefault(_path),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}module.exports=function(source){'cachable'in this&&this.cacheable&&this.cacheable();const query=_clientnode2.default.convertSubstringInPlainObject(_clientnode2.default.extendObject(!0,{compress:{html:{},javaScript:{}},context:'./',extensions:{file:{external:['.js'],internal:['.js','.css','.svg','.png','.jpg','.gif','.ico','.html','.json','.eot','.ttf','.woff']},module:[]},module:{aliases:{},replacements:{}},compileSteps:2},this.options||{},'query'in this?loaderUtils.getOptions(this)||{}:{}),/#%%%#/g,'!'),compile=(template,options=query.compiler,compileSteps=2)=>(locals={})=>{options=_clientnode2.default.extendObject(!0,{filename:template},options);const require=(a,b={})=>{const c=a.replace(/^(.+)\?[^?]+$/,'$1'),d=a.match(/^[^?]+\?(.+)$/,'$1');if(d){b=_clientnode2.default.extendObject(!0,b,((h,i,j,k,l)=>new Function('request','template','source','compile','locals',`return ${d[1]}`)(h,i,j,k,l))(a,c,source,compile,locals))}let e=_clientnode2.default.copyLimitedRecursively(options);if(delete e.client,e=_clientnode2.default.extendObject(!0,{encoding:_configurator2.default.encoding},e,b.options||{}),e.isString)return compile(c,e)(b);const f=_helper2.default.determineModuleFilePath(c,query.module.aliases,query.module.replacements,query.extensions,query.context,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames,_configurator2.default.encoding);if(f)return'query'in this&&this.addDependency(f),d||f.endsWith('.ejs')?compile(f,e)(b):fileSystem.readFileSync(f,e);throw new Error(`Given template file "${c}" couldn't be resolved.`)},compressHTML=(a)=>query.compress.html?(0,_htmlMinifier.minify)(a,_clientnode2.default.extendObject(!0,{caseSensitive:!0,collapseInlineTagWhitespace:!0,collapseWhitespace:!0,conservativeCollapse:!0,minifyCSS:!0,minifyJS:!0,processScripts:['text/ng-template','text/x-handlebars-template'],removeAttributeQuotes:!0,removeComments:!0,removeRedundantAttributes:!0,removeScriptTypeAttributes:!0,removeStyleLinkTypeAttributes:!0,sortAttributes:!0,sortClassName:!0,trimCustomFragments:!1,useShortDoctype:!0})):a;let remainingSteps=compileSteps,result=template,isString=options.isString;for(delete options.isString;0<remainingSteps;){if('string'==typeof result){const filePath=isString&&options.filename||result;if(filePath&&'.js'===_path2.default.extname(filePath))result=eval('require')(filePath);else{if(!isString){let a=_configurator2.default.encoding;'encoding'in options&&(a=options.encoding),result=fileSystem.readFileSync(result,{encoding:a})}1===remainingSteps&&(result=compressHTML(result)),result=ejs.compile(result,options)}}else result=compressHTML(result(_clientnode2.default.extendObject(!0,{configuration:_configurator2.default,Helper:_helper2.default,include:require,require,Tools:_clientnode2.default},locals)));remainingSteps-=1}return!(compileSteps%2)?result:`'use strict';\n`+(0,_babelCore.transform)(`module.exports = ${result.toString()};`,{ast:!1,babelrc:!1,comments:!!!query.compress.javaScript,compact:!!query.compress.javaScript,filename:options.filename||'unknown',minified:!!query.compress.javaScript,plugins:[_babelPluginTransformWith2.default],presets:query.compress.javaScript?[[_babelPresetBabili2.default,query.compress.javaScript]]:[],sourceMaps:!1,sourceType:'script'}).code};return compile(source,{client:!!(query.compileSteps%2),compileDebug:this.debug||!1,debug:this.debug||!1,filename:'query'in this?loaderUtils.getRemainingRequest(this).replace(/^!/,''):this.filename||null,isString:!0},query.compileSteps)(query.locals||{})};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWxCLENBRVksS0FBSyxRQUFMLEVBQWlCLElBTnBCLENBT25CLFdBUG1CLENBQWhCLENBUUosTUFBTSxZQVJGLEVBUWdCLE1BQU0sTUFBTixJQVJoQixDQVNWLEMiLCJmaWxlIjoiZWpzTG9hZGVyLmNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBAZmxvd1xuLy8gLSotIGNvZGluZzogdXRmLTggLSotXG4ndXNlIHN0cmljdCdcbi8qICFcbiAgICByZWdpb24gaGVhZGVyXG4gICAgQ29weXJpZ2h0IFRvcmJlbiBTaWNrZXJ0IChpbmZvW1wifmF0flwiXXRvcmJlbi53ZWJzaXRlKSAxNi4xMi4yMDEyXG5cbiAgICBMaWNlbnNlXG4gICAgLS0tLS0tLVxuXG4gICAgVGhpcyBsaWJyYXJ5IHdyaXR0ZW4gYnkgVG9yYmVuIFNpY2tlcnQgc3RhbmQgdW5kZXIgYSBjcmVhdGl2ZSBjb21tb25zIG5hbWluZ1xuICAgIDMuMCB1bnBvcnRlZCBsaWNlbnNlLiBzZWUgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wL2RlZWQuZGVcbiAgICBlbmRyZWdpb25cbiovXG4vLyByZWdpb24gaW1wb3J0c1xuaW1wb3J0IHt0cmFuc2Zvcm0gYXMgYmFiZWxUcmFuc2Zvcm19IGZyb20gJ2JhYmVsLWNvcmUnXG5pbXBvcnQgYmFiaWxpUHJlc2V0IGZyb20gJ2JhYmVsLXByZXNldC1iYWJpbGknXG5pbXBvcnQgdHJhbnNmb3JtV2l0aCBmcm9tICdiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXdpdGgnXG5pbXBvcnQgVG9vbHMgZnJvbSAnY2xpZW50bm9kZSdcbmltcG9ydCAqIGFzIGVqcyBmcm9tICdlanMnXG5pbXBvcnQgKiBhcyBmaWxlU3lzdGVtIGZyb20gJ2ZzJ1xuaW1wb3J0IHttaW5pZnkgYXMgbWluaWZ5SFRNTH0gZnJvbSAnaHRtbC1taW5pZmllcidcbmltcG9ydCAqIGFzIGxvYWRlclV0aWxzIGZyb20gJ2xvYWRlci11dGlscydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG4vLyBOT1RFOiBPbmx5IG5lZWRlZCBmb3IgZGVidWdnaW5nIHRoaXMgZmlsZS5cbnRyeSB7XG4gICAgcmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJylcbn0gY2F0Y2ggKGVycm9yKSB7fVxuXG5pbXBvcnQgY29uZmlndXJhdGlvbiBmcm9tICcuL2NvbmZpZ3VyYXRvci5jb21waWxlZCdcbmltcG9ydCBIZWxwZXIgZnJvbSAnLi9oZWxwZXIuY29tcGlsZWQnXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiB0eXBlc1xudHlwZSBUZW1wbGF0ZUZ1bmN0aW9uID0gKGxvY2FsczpPYmplY3QpID0+IHN0cmluZ1xudHlwZSBDb21waWxlRnVuY3Rpb24gPSAodGVtcGxhdGU6c3RyaW5nLCBvcHRpb25zOk9iamVjdCkgPT4gVGVtcGxhdGVGdW5jdGlvblxuLy8gZW5kcmVnaW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHNvdXJjZTpzdHJpbmcpOnN0cmluZyB7XG4gICAgaWYgKCdjYWNoYWJsZScgaW4gdGhpcyAmJiB0aGlzLmNhY2hlYWJsZSlcbiAgICAgICAgdGhpcy5jYWNoZWFibGUoKVxuICAgIGNvbnN0IHF1ZXJ5Ok9iamVjdCA9IFRvb2xzLmNvbnZlcnRTdWJzdHJpbmdJblBsYWluT2JqZWN0KFxuICAgICAgICBUb29scy5leHRlbmRPYmplY3QodHJ1ZSwge1xuICAgICAgICAgICAgY29tcHJlc3M6IHtcbiAgICAgICAgICAgICAgICBodG1sOiB7fSxcbiAgICAgICAgICAgICAgICBqYXZhU2NyaXB0OiB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRleHQ6ICcuLycsXG4gICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgZmlsZToge1xuICAgICAgICAgICAgICAgICAgICBleHRlcm5hbDogWycuanMnXSxcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWw6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICcuanMnLCAnLmNzcycsICcuc3ZnJywgJy5wbmcnLCAnLmpwZycsICcuZ2lmJywgJy5pY28nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJy5odG1sJywgJy5qc29uJywgJy5lb3QnLCAnLnR0ZicsICcud29mZidcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sIG1vZHVsZTogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb2R1bGU6IHtcbiAgICAgICAgICAgICAgICBhbGlhc2VzOiB7fSxcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudHM6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGlsZVN0ZXBzOiAyXG4gICAgICAgIH0sIHRoaXMub3B0aW9ucyB8fCB7fSwgJ3F1ZXJ5JyBpbiB0aGlzID8gbG9hZGVyVXRpbHMuZ2V0T3B0aW9ucyhcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgKSB8fCB7fSA6IHt9KSxcbiAgICAgICAgLyMlJSUjL2csICchJylcbiAgICBjb25zdCBjb21waWxlOkNvbXBpbGVGdW5jdGlvbiA9IChcbiAgICAgICAgdGVtcGxhdGU6c3RyaW5nLCBvcHRpb25zOk9iamVjdCA9IHF1ZXJ5LmNvbXBpbGVyLFxuICAgICAgICBjb21waWxlU3RlcHM6bnVtYmVyID0gMlxuICAgICk6VGVtcGxhdGVGdW5jdGlvbiA9PiAobG9jYWxzOk9iamVjdCA9IHt9KTpzdHJpbmcgPT4ge1xuICAgICAgICBvcHRpb25zID0gVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIHtmaWxlbmFtZTogdGVtcGxhdGV9LCBvcHRpb25zKVxuICAgICAgICBjb25zdCByZXF1aXJlOkZ1bmN0aW9uID0gKFxuICAgICAgICAgICAgcmVxdWVzdDpzdHJpbmcsIG5lc3RlZExvY2FsczpPYmplY3QgPSB7fVxuICAgICAgICApOnN0cmluZyA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZTpzdHJpbmcgPSByZXF1ZXN0LnJlcGxhY2UoL14oLispXFw/W14/XSskLywgJyQxJylcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5TWF0Y2g6P0FycmF5PHN0cmluZz4gPSByZXF1ZXN0Lm1hdGNoKFxuICAgICAgICAgICAgICAgIC9eW14/XStcXD8oLispJC8sICckMScpXG4gICAgICAgICAgICBpZiAocXVlcnlNYXRjaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2YWx1YXRpb25GdW5jdGlvbiA9IChcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDpzdHJpbmcsIHRlbXBsYXRlOnN0cmluZywgc291cmNlOnN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZTpDb21waWxlRnVuY3Rpb24sIGxvY2FsczpPYmplY3RcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVUeXBlQ2hlY2tcbiAgICAgICAgICAgICAgICApOk9iamVjdCA9PiBuZXcgRnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0JywgJ3RlbXBsYXRlJywgJ3NvdXJjZScsICdjb21waWxlJywgJ2xvY2FscycsXG4gICAgICAgICAgICAgICAgICAgIGByZXR1cm4gJHtxdWVyeU1hdGNoWzFdfWBcbiAgICAgICAgICAgICAgICApKHJlcXVlc3QsIHRlbXBsYXRlLCBzb3VyY2UsIGNvbXBpbGUsIGxvY2FscylcbiAgICAgICAgICAgICAgICBuZXN0ZWRMb2NhbHMgPSBUb29scy5leHRlbmRPYmplY3QoXG4gICAgICAgICAgICAgICAgICAgIHRydWUsIG5lc3RlZExvY2FscywgZXZhbHVhdGlvbkZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCwgdGVtcGxhdGUsIHNvdXJjZSwgY29tcGlsZSwgbG9jYWxzKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXN0ZWRPcHRpb25zOk9iamVjdCA9IFRvb2xzLmNvcHlMaW1pdGVkUmVjdXJzaXZlbHkob3B0aW9ucylcbiAgICAgICAgICAgIGRlbGV0ZSBuZXN0ZWRPcHRpb25zLmNsaWVudFxuICAgICAgICAgICAgbmVzdGVkT3B0aW9ucyA9IFRvb2xzLmV4dGVuZE9iamVjdChcbiAgICAgICAgICAgICAgICB0cnVlLCB7ZW5jb2Rpbmc6IGNvbmZpZ3VyYXRpb24uZW5jb2Rpbmd9LCBuZXN0ZWRPcHRpb25zLFxuICAgICAgICAgICAgICAgIG5lc3RlZExvY2Fscy5vcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgaWYgKG5lc3RlZE9wdGlvbnMuaXNTdHJpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGUodGVtcGxhdGUsIG5lc3RlZE9wdGlvbnMpKG5lc3RlZExvY2FscylcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlRmlsZVBhdGg6P3N0cmluZyA9XG4gICAgICAgICAgICAgICAgSGVscGVyLmRldGVybWluZU1vZHVsZUZpbGVQYXRoKFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSwgcXVlcnkubW9kdWxlLmFsaWFzZXMsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Lm1vZHVsZS5yZXBsYWNlbWVudHMsIHF1ZXJ5LmV4dGVuc2lvbnMsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmNvbnRleHQsIGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLmlnbm9yZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUuZGlyZWN0b3J5TmFtZXMsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLmZpbGVOYW1lcyxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYWNrYWdlLm1haW4ucHJvcGVydHlOYW1lcyxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYWNrYWdlLmFsaWFzUHJvcGVydHlOYW1lcyxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5lbmNvZGluZylcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZUZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdxdWVyeScgaW4gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGREZXBlbmRlbmN5KHRlbXBsYXRlRmlsZVBhdGgpXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgTk9URTogSWYgdGhlcmUgYXJlbid0IGFueSBsb2NhbHMgb3B0aW9ucyBvciB2YXJpYWJsZXMgYW5kXG4gICAgICAgICAgICAgICAgICAgIGZpbGUgZG9lc24ndCBzZWVtIHRvIGJlIGFuIGVqcyB0ZW1wbGF0ZSB3ZSBzaW1wbHkgbG9hZFxuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlZCBmaWxlIGNvbnRlbnQuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAocXVlcnlNYXRjaCB8fCB0ZW1wbGF0ZUZpbGVQYXRoLmVuZHNXaXRoKCcuZWpzJykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlKHRlbXBsYXRlRmlsZVBhdGgsIG5lc3RlZE9wdGlvbnMpKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGVkTG9jYWxzKVxuICAgICAgICAgICAgICAgIC8vIElnbm9yZVR5cGVDaGVja1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlU3lzdGVtLnJlYWRGaWxlU3luYyh0ZW1wbGF0ZUZpbGVQYXRoLCBuZXN0ZWRPcHRpb25zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBHaXZlbiB0ZW1wbGF0ZSBmaWxlIFwiJHt0ZW1wbGF0ZX1cIiBjb3VsZG4ndCBiZSByZXNvbHZlZC5gKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXByZXNzSFRNTDpGdW5jdGlvbiA9IChjb250ZW50OnN0cmluZyk6c3RyaW5nID0+XG4gICAgICAgICAgICBxdWVyeS5jb21wcmVzcy5odG1sID8gbWluaWZ5SFRNTChjb250ZW50LCBUb29scy5leHRlbmRPYmplY3QoXG4gICAgICAgICAgICAgICAgdHJ1ZSwge1xuICAgICAgICAgICAgICAgICAgICBjYXNlU2Vuc2l0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZUlubGluZVRhZ1doaXRlc3BhY2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlV2hpdGVzcGFjZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uc2VydmF0aXZlQ29sbGFwc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1pbmlmeUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWluaWZ5SlM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NTY3JpcHRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC9uZy10ZW1wbGF0ZScsICd0ZXh0L3gtaGFuZGxlYmFycy10ZW1wbGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXR0cmlidXRlUXVvdGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDb21tZW50czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVkdW5kYW50QXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlU2NyaXB0VHlwZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVN0eWxlTGlua1R5cGVBdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzb3J0QXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc29ydENsYXNzTmFtZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHJpbUN1c3RvbUZyYWdtZW50czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHVzZVNob3J0RG9jdHlwZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKSA6IGNvbnRlbnRcbiAgICAgICAgbGV0IHJlbWFpbmluZ1N0ZXBzOm51bWJlciA9IGNvbXBpbGVTdGVwc1xuICAgICAgICBsZXQgcmVzdWx0OlRlbXBsYXRlRnVuY3Rpb258c3RyaW5nID0gdGVtcGxhdGVcbiAgICAgICAgbGV0IGlzU3RyaW5nOmJvb2xlYW4gPSBvcHRpb25zLmlzU3RyaW5nXG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmlzU3RyaW5nXG4gICAgICAgIHdoaWxlIChyZW1haW5pbmdTdGVwcyA+IDApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoOj9zdHJpbmcgPSBpc1N0cmluZyAmJiBvcHRpb25zLmZpbGVuYW1lIHx8IHJlc3VsdFxuICAgICAgICAgICAgICAgIGlmIChmaWxlUGF0aCAmJiBwYXRoLmV4dG5hbWUoZmlsZVBhdGgpID09PSAnLmpzJylcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZXZhbCgncmVxdWlyZScpKGZpbGVQYXRoKVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5jb2Rpbmc6c3RyaW5nID0gY29uZmlndXJhdGlvbi5lbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCdlbmNvZGluZycgaW4gb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IG9wdGlvbnMuZW5jb2RpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZpbGVTeXN0ZW0ucmVhZEZpbGVTeW5jKHJlc3VsdCwge2VuY29kaW5nfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nU3RlcHMgPT09IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wcmVzc0hUTUwocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBlanMuY29tcGlsZShyZXN1bHQsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcHJlc3NIVE1MKHJlc3VsdChUb29scy5leHRlbmRPYmplY3QodHJ1ZSwge1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLCBIZWxwZXIsIGluY2x1ZGU6IHJlcXVpcmUsIHJlcXVpcmUsIFRvb2xzXG4gICAgICAgICAgICAgICAgfSwgbG9jYWxzKSkpXG4gICAgICAgICAgICByZW1haW5pbmdTdGVwcyAtPSAxXG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJvb2xlYW4oY29tcGlsZVN0ZXBzICUgMikpXG4gICAgICAgICAgICByZXR1cm4gYCd1c2Ugc3RyaWN0JztcXG5gICsgYmFiZWxUcmFuc2Zvcm0oXG4gICAgICAgICAgICAgICAgYG1vZHVsZS5leHBvcnRzID0gJHtyZXN1bHQudG9TdHJpbmcoKX07YCwge1xuICAgICAgICAgICAgICAgICAgICBhc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBiYWJlbHJjOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHM6ICFCb29sZWFuKHF1ZXJ5LmNvbXByZXNzLmphdmFTY3JpcHQpLFxuICAgICAgICAgICAgICAgICAgICBjb21wYWN0OiBCb29sZWFuKHF1ZXJ5LmNvbXByZXNzLmphdmFTY3JpcHQpLFxuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogb3B0aW9ucy5maWxlbmFtZSB8fCAndW5rbm93bicsXG4gICAgICAgICAgICAgICAgICAgIG1pbmlmaWVkOiBCb29sZWFuKHF1ZXJ5LmNvbXByZXNzLmphdmFTY3JpcHQpLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zOiBbdHJhbnNmb3JtV2l0aF0sXG4gICAgICAgICAgICAgICAgICAgIHByZXNldHM6IHF1ZXJ5LmNvbXByZXNzLmphdmFTY3JpcHQgPyBbW1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFiaWxpUHJlc2V0LCBxdWVyeS5jb21wcmVzcy5qYXZhU2NyaXB0XG4gICAgICAgICAgICAgICAgICAgIF1dIDogW10sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU1hcHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUeXBlOiAnc2NyaXB0J1xuICAgICAgICAgICAgICAgIH0pLmNvZGVcbiAgICAgICAgLy8gSWdub3JlVHlwZUNoZWNrXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGUoc291cmNlLCB7XG4gICAgICAgIGNsaWVudDogQm9vbGVhbihxdWVyeS5jb21waWxlU3RlcHMgJSAyKSxcbiAgICAgICAgY29tcGlsZURlYnVnOiB0aGlzLmRlYnVnIHx8IGZhbHNlLFxuICAgICAgICBkZWJ1ZzogdGhpcy5kZWJ1ZyB8fCBmYWxzZSxcbiAgICAgICAgZmlsZW5hbWU6ICdxdWVyeScgaW4gdGhpcyA/IGxvYWRlclV0aWxzLmdldFJlbWFpbmluZ1JlcXVlc3QoXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgICkucmVwbGFjZSgvXiEvLCAnJykgOiB0aGlzLmZpbGVuYW1lIHx8IG51bGwsXG4gICAgICAgIGlzU3RyaW5nOiB0cnVlXG4gICAgfSwgcXVlcnkuY29tcGlsZVN0ZXBzKShxdWVyeS5sb2NhbHMgfHwge30pXG59XG4vLyByZWdpb24gdmltIG1vZGxpbmVcbi8vIHZpbTogc2V0IHRhYnN0b3A9NCBzaGlmdHdpZHRoPTQgZXhwYW5kdGFiOlxuLy8gdmltOiBmb2xkbWV0aG9kPW1hcmtlciBmb2xkbWFya2VyPXJlZ2lvbixlbmRyZWdpb246XG4vLyBlbmRyZWdpb25cbiJdfQ==