#!/usr/bin/env node
'use strict';var _stringify=require('babel-runtime/core-js/json/stringify'),_stringify2=_interopRequireDefault(_stringify),_promise=require('babel-runtime/core-js/promise'),_promise2=_interopRequireDefault(_promise),_asyncToGenerator2=require('babel-runtime/helpers/asyncToGenerator'),_asyncToGenerator3=_interopRequireDefault(_asyncToGenerator2),_keys=require('babel-runtime/core-js/object/keys'),_keys2=_interopRequireDefault(_keys),_babiliWebpackPlugin=require('babili-webpack-plugin'),_babiliWebpackPlugin2=_interopRequireDefault(_babiliWebpackPlugin),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_jsdom=require('jsdom'),dom=_interopRequireWildcard(_jsdom),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path),_postcssCssnext=require('postcss-cssnext'),_postcssCssnext2=_interopRequireDefault(_postcssCssnext),_postcssFontpath=require('postcss-fontpath'),_postcssFontpath2=_interopRequireDefault(_postcssFontpath),_postcssImport=require('postcss-import'),_postcssImport2=_interopRequireDefault(_postcssImport),_postcssSprites=require('postcss-sprites'),_postcssSprites2=_interopRequireDefault(_postcssSprites),_postcssUrl=require('postcss-url'),_postcssUrl2=_interopRequireDefault(_postcssUrl),_util=require('util'),_util2=_interopRequireDefault(_util),_webpack=require('webpack'),_webpack2=_interopRequireDefault(_webpack),_webpackSources=require('webpack-sources'),_ejsLoader=require('./ejsLoader.compiled'),_ejsLoader2=_interopRequireDefault(_ejsLoader),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper),_htmlLoader=require('html-loader'),_htmlLoader2=_interopRequireDefault(_htmlLoader),_loaderUtils=require('loader-utils'),_loaderUtils2=_interopRequireDefault(_loaderUtils);Object.defineProperty(exports,'__esModule',{value:!0});function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}const plugins=require('webpack-load-plugins')();plugins.HTML=plugins.html,plugins.ExtractText=plugins.extractText,plugins.AddAssetHTMLPlugin=require('add-asset-html-webpack-plugin'),plugins.OpenBrowser=plugins.openBrowser,plugins.Favicon=require('favicons-webpack-plugin'),plugins.Imagemin=require('imagemin-webpack-plugin').default,plugins.Offline=require('offline-plugin'),require.cache[require.resolve('html-loader')].exports=function(...a){return _clientnode2.default.extendObject(!0,this.options,module,this.options),_htmlLoader2.default.call(this,...a)};const loaderUtilsIsUrlRequestBackup=_loaderUtils2.default.isUrlRequest;require.cache[require.resolve('loader-utils')].exports.isUrlRequest=(a,...b)=>{return!a.match(/^[a-z]+:.+/)&&loaderUtilsIsUrlRequestBackup.apply(_loaderUtils2.default,[a].concat(b))};let libraryName;'libraryName'in _configurator2.default&&_configurator2.default.libraryName?libraryName=_configurator2.default.libraryName:1<(0,_keys2.default)(_configurator2.default.injection.internal.normalized).length?libraryName='[name]':(libraryName=_configurator2.default.name,'var'===_configurator2.default.exportFormat.self&&(libraryName=_clientnode2.default.stringConvertToValidVariableName(libraryName)));const pluginInstances=[new _webpack2.default.NoEmitOnErrorsPlugin,new _webpack2.default.optimize.OccurrenceOrderPlugin(!0)];_configurator2.default.debug&&pluginInstances.push(new _webpack2.default.NamedModulesPlugin);for(const a of _configurator2.default.injection.ignorePattern)pluginInstances.push(new _webpack2.default.IgnorePlugin(new RegExp(a)));for(const a in _configurator2.default.module.replacements.normal)_configurator2.default.module.replacements.normal.hasOwnProperty(a)&&pluginInstances.push(new _webpack2.default.NormalModuleReplacementPlugin(new RegExp(a),_configurator2.default.module.replacements.normal[a]));let htmlAvailable=!1;if('buildDLL'!==_configurator2.default.givenCommandLineArguments[2])for(let a of _configurator2.default.files.html)_clientnode2.default.isFileSync(a.template.filePath)&&(pluginInstances.push(new plugins.HTML(_clientnode2.default.extendObject({},a,{template:a.template.request}))),htmlAvailable=!0);if(htmlAvailable&&_configurator2.default.favicon&&_clientnode2.default.isFileSync(_configurator2.default.favicon.logo)&&pluginInstances.push(new plugins.Favicon(_configurator2.default.favicon)),htmlAvailable&&_configurator2.default.offline&&(!['serve','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&(_configurator2.default.inPlace.cascadingStyleSheet&&(0,_keys2.default)(_configurator2.default.inPlace.cascadingStyleSheet).length&&_configurator2.default.offline.excludes.push(_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.path.target.asset.cascadingStyleSheet)+`*.css?${_configurator2.default.hashAlgorithm}=*`),_configurator2.default.inPlace.javaScript&&(0,_keys2.default)(_configurator2.default.inPlace.javaScript).length&&_configurator2.default.offline.excludes.push(_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.path.target.asset.javaScript)+`*.js?${_configurator2.default.hashAlgorithm}=*`)),pluginInstances.push(new plugins.Offline(_configurator2.default.offline))),_configurator2.default.development.openBrowser&&htmlAvailable&&['serve','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&pluginInstances.push(new plugins.OpenBrowser(_configurator2.default.development.openBrowser)),_configurator2.default.build.definitions&&pluginInstances.push(new _webpack2.default.DefinePlugin(_configurator2.default.build.definitions)),_configurator2.default.module.provide&&pluginInstances.push(new _webpack2.default.ProvidePlugin(_configurator2.default.module.provide)),_configurator2.default.module.optimizer.babili&&pluginInstances.push(new _babiliWebpackPlugin2.default(_configurator2.default.module.optimizer.babili)),pluginInstances.push({apply:(a)=>{a.plugin('emit',(b,c)=>{for(const d in b.assets)if(b.assets.hasOwnProperty(d)){const e=d.replace(/\?[^?]+$/,''),f=_helper2.default.determineAssetType(e,_configurator2.default.build.types,_configurator2.default.path);if(f&&_configurator2.default.assetPattern[f]&&!new RegExp(_configurator2.default.assetPattern[f].excludeFilePathRegularExpression).test(e)){const g=b.assets[d].source();'string'==typeof g&&(b.assets[d]=new _webpackSources.RawSource(_configurator2.default.assetPattern[f].pattern.replace(/\{1\}/g,g.replace(/\$/g,'$$$'))))}}c()})}}),htmlAvailable&&!['serve','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&pluginInstances.push({apply:(a)=>{const b=[];a.plugin('compilation',(c)=>c.plugin('html-webpack-plugin-after-html-processing',(()=>{var d=(0,_asyncToGenerator3.default)(function*(e,f){if(_configurator2.default.inPlace.cascadingStyleSheet&&(0,_keys2.default)(_configurator2.default.inPlace.cascadingStyleSheet).length||_configurator2.default.inPlace.javaScript&&(0,_keys2.default)(_configurator2.default.inPlace.javaScript).length)try{const g=yield _helper2.default.inPlaceCSSAndJavaScriptAssetReferences(e.html,_configurator2.default.inPlace.cascadingStyleSheet,_configurator2.default.inPlace.javaScript,_configurator2.default.path.target.base,_configurator2.default.files.compose.cascadingStyleSheet,_configurator2.default.files.compose.javaScript,c.assets);e.html=g.content,b.concat(g.filePathsToRemove)}catch(g){return f(g,e)}f(null,e)});return function(){return d.apply(this,arguments)}})())),a.plugin('after-emit',(()=>{var c=(0,_asyncToGenerator3.default)(function*(d,e){let f=[];for(const g of b)(yield _clientnode2.default.isFile(g))&&f.push(new _promise2.default(function(h){return fileSystem.unlink(g,function(i){i&&console.error(i),h()})}));yield _promise2.default.all(f),f=[];for(const g of['javaScript','cascadingStyleSheet'])f.push(new _promise2.default(function(h,i){return fileSystem.readdir(_configurator2.default.path.target.asset[g],_configurator2.default.encoding,function(j,k){return j?void i(j):void(0===k.length?fileSystem.rmdir(_configurator2.default.path.target.asset[g],function(l){return l?i(l):h()}):h())})}));yield _promise2.default.all(f),e()});return function(){return c.apply(this,arguments)}})())}}),'buildDLL'!==_configurator2.default.givenCommandLineArguments[2])for(const a in _configurator2.default.injection.internal.normalized)if(_configurator2.default.injection.internal.normalized.hasOwnProperty(a)){const b=`${_configurator2.default.path.target.base}/${a}.`+`dll-manifest.json`;if(_configurator2.default.dllManifestFilePaths.includes(b)){delete _configurator2.default.injection.internal.normalized[a];const c=_helper2.default.renderFilePathTemplate(_helper2.default.stripLoader(_configurator2.default.files.compose.javaScript),{'[name]':a});pluginInstances.push(new plugins.AddAssetHTMLPlugin({filepath:c,hash:!0,includeSourcemap:_clientnode2.default.isFileSync(`${c}.map`)})),pluginInstances.push(new _webpack2.default.DllReferencePlugin({context:_configurator2.default.path.context,manifest:require(b)}))}}if('buildDLL'!==_configurator2.default.givenCommandLineArguments[2])for(const a of _configurator2.default.injection.commonChunkIDs)_configurator2.default.injection.internal.normalized.hasOwnProperty(a)&&pluginInstances.push(new _webpack2.default.optimize.CommonsChunkPlugin({async:!1,children:!1,filename:_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.files.compose.javaScript),minChunks:Infinity,name:a,minSize:0}));if(_configurator2.default.needed.javaScript||(_configurator2.default.files.compose.javaScript=_path2.default.resolve(_configurator2.default.path.target.asset.javaScript,'.__dummy__.compiled.js')),_configurator2.default.files.compose.cascadingStyleSheet&&pluginInstances.push(new plugins.ExtractText({allChunks:!0,filename:_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.files.compose.cascadingStyleSheet)})),'__implicit__'===_configurator2.default.injection.external.modules&&(_configurator2.default.injection.external.modules=(a,b,c)=>{b=b.replace(/^!+/,''),b.startsWith('/')&&(b=_path2.default.relative(_configurator2.default.path.context,b));for(const e of _configurator2.default.module.directoryNames.concat(_configurator2.default.loader.directoryNames))if(b.startsWith(e)){b=b.substring(e.length),b.startsWith('/')&&(b=b.substring(1));break}let d=_helper2.default.determineExternalRequest(b,_configurator2.default.path.context,a,_configurator2.default.injection.internal.normalized,_configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames,_configurator2.default.loader.directoryNames).map((e)=>_path2.default.resolve(_configurator2.default.path.context,e)).filter((e)=>!_configurator2.default.path.context.startsWith(e)),_configurator2.default.module.aliases,_configurator2.default.module.replacements.normal,_configurator2.default.extensions,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames,_configurator2.default.injection.external.implicit.pattern.include,_configurator2.default.injection.external.implicit.pattern.exclude,_configurator2.default.inPlace.externalLibrary.normal,_configurator2.default.inPlace.externalLibrary.dynamic,_configurator2.default.encoding);return d?(['var','umd'].includes(_configurator2.default.exportFormat.external)&&b in _configurator2.default.injection.external.aliases&&(d=_configurator2.default.injection.external.aliases[b]),'var'===_configurator2.default.exportFormat.external&&(d=_clientnode2.default.stringConvertToValidVariableName(d,'0-9a-zA-Z_$\\.')),c(null,d,_configurator2.default.exportFormat.external)):c()}),'buildDLL'===_configurator2.default.givenCommandLineArguments[2]){let a=!1;for(const b in _configurator2.default.injection.internal.normalized)_configurator2.default.injection.internal.normalized.hasOwnProperty(b)&&(_configurator2.default.injection.dllChunkIDs.includes(b)?a=!0:delete _configurator2.default.injection.internal.normalized[b]);a?(libraryName='[name]DLLPackage',pluginInstances.push(new _webpack2.default.DllPlugin({path:`${_configurator2.default.path.target.base}/[name].dll-manifest.json`,name:libraryName}))):console.warn('No dll chunk id found.')}pluginInstances.push({apply:(a)=>a.plugin('compilation',(b)=>{b.plugin('html-webpack-plugin-alter-asset-tags',(c,d)=>{for(const g of[c.body,c.head]){let h=0;for(const i of g)/^\.__dummy__(\..*)?$/.test(_path2.default.basename(i.attributes.src||i.attributes.href||''))&&g.splice(h,1),h+=1}const e=JSON.parse(c.plugin.assetJson);let f=0;for(const g of e)/^\.__dummy__(\..*)?$/.test(_path2.default.basename(g))&&e.splice(f,1),f+=1;c.plugin.assetJson=(0,_stringify2.default)(e),d(null,c)}),b.plugin('html-webpack-plugin-after-html-processing',(c,d)=>dom.env(c.html.replace(/<%/g,'##+#+#+##').replace(/%>/g,'##-#-#-##'),(e,f)=>{if(e)return d(e,c);const g={script:'src',link:'href'};for(const h in g)if(g.hasOwnProperty(h))for(const i of f.document.querySelectorAll(`${h}[${g[h]}*="?`+`${_configurator2.default.hashAlgorithm}="]`))i.setAttribute(g[h],i.getAttribute(g[h]).replace(new RegExp(`(\\?${_configurator2.default.hashAlgorithm}=`+'[^&]+).*$'),'$1'));c.html=c.html.replace(/^(\s*<!doctype [^>]+?>\s*)[\s\S]*$/i,'$1')+f.document.documentElement.outerHTML.replace(/##\+#\+#\+##/g,'<%').replace(/##-#-#-##/g,'%>');for(const h of _configurator2.default.files.html)if(h.filename===c.plugin.options.filename){for(const i of h.template.use)i.hasOwnProperty('options')&&i.options.hasOwnProperty('compileSteps')&&'number'==typeof i.options.compileSteps&&(c.html=_ejsLoader2.default.bind(_clientnode2.default.extendObject(!0,{},{options:i.options},{options:{compileSteps:h.template.postCompileSteps}}))(c.html));break}d(null,c)}))})}),_configurator2.default.exportFormat.external.startsWith('umd')&&pluginInstances.push({apply:(a)=>a.plugin('emit',(b,c)=>{const d='string'==typeof libraryName?libraryName:libraryName[0];for(const e in b.assets)if(b.assets.hasOwnProperty(e)&&e.replace(/([^?]+)\?.*$/,'$1').endsWith(_configurator2.default.build.types.javaScript.outputExtension)){let f=b.assets[e].source();if('string'==typeof f){for(const g in _configurator2.default.injection.external.aliases)_configurator2.default.injection.external.aliases.hasOwnProperty(g)&&(f=f.replace(new RegExp('(require\\()"'+_clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.injection.external.aliases[g])+'"(\\))','g'),`$1'${g}'$2`).replace(new RegExp('(define\\("'+_clientnode2.default.stringEscapeRegularExpressions(d)+'", \\[.*)"'+_clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.injection.external.aliases[g])+'"(.*\\], factory\\);)'),`$1'${g}'$2`));f=f.replace(new RegExp('(root\\[)"'+_clientnode2.default.stringEscapeRegularExpressions(d)+'"(\\] = )'),`$1'`+_clientnode2.default.stringConvertToValidVariableName(d)+`'$2`),b.assets[e]=new _webpackSources.RawSource(f)}}c()})}),pluginInstances.push(new plugins.Imagemin(_configurator2.default.module.optimizer.image.content));for(const a of _configurator2.default.module.replacements.context)pluginInstances.push(new _webpack2.default.ContextReplacementPlugin(...a.map((b)=>new Function('configuration','__dirname','__filename',`return ${b}`)(_configurator2.default,__dirname,__filename))));const rejectFilePathInDependencies=(a)=>{return a=_helper2.default.stripLoader(a),_helper2.default.isFilePathInLocation(a,_configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames,_configurator2.default.loader.directoryNames).map((b)=>_path2.default.resolve(_configurator2.default.path.context,b)).filter((b)=>!_configurator2.default.path.context.startsWith(b)))},loader={},evaluate=(a,b)=>new Function('configuration','filePath','loader','rejectFilePathInDependencies',`return ${a}`)(_configurator2.default,b,loader,rejectFilePathInDependencies);_clientnode2.default.extendObject(loader,{ejs:{exclude:(a)=>_helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map((b)=>b.template.filePath)).includes(a)||null!==_configurator2.default.module.preprocessor.ejs.exclude&&evaluate(_configurator2.default.module.preprocessor.ejs.exclude,a),include:_helper2.default.normalizePaths([_configurator2.default.path.source.base].concat(_configurator2.default.module.locations.directoryPaths)),test:/^(?!.+\.html\.ejs$).+\.ejs$/i,use:[{loader:'file?name=[path][name]'+(!!(_configurator2.default.module.preprocessor.ejs.options.compileSteps%2)?'.js':'')+`?${_configurator2.default.hashAlgorithm}=[hash]`},{loader:'extract'},{loader:_configurator2.default.module.preprocessor.ejs.loader,options:_configurator2.default.module.preprocessor.ejs.options}].concat(_configurator2.default.module.preprocessor.ejs.additional.map(evaluate))},script:{exclude:(a)=>null===_configurator2.default.module.preprocessor.javaScript.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.preprocessor.javaScript.exclude,a),include:_helper2.default.normalizePaths([_configurator2.default.path.source.asset.javaScript].concat(_configurator2.default.module.locations.directoryPaths)),test:/\.js(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.preprocessor.javaScript.loader,options:_configurator2.default.module.preprocessor.javaScript.options}].concat(_configurator2.default.module.preprocessor.javaScript.additional.map(evaluate))},html:{main:{test:new RegExp('^'+_clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.files.defaultHTML.template.filePath)+'(?:\\?.*)?$'),use:_configurator2.default.files.defaultHTML.template.use},ejs:{exclude:(a)=>_helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map((b)=>b.template.filePath)).includes(a)||null!==_configurator2.default.module.preprocessor.html.exclude&&evaluate(_configurator2.default.module.preprocessor.html.exclude,a),include:_configurator2.default.path.source.asset.template,test:/\.html\.ejs(?:\?.*)?$/i,use:[{loader:'file?name='+_path2.default.join(_path2.default.relative(_configurator2.default.path.target.asset.base,_configurator2.default.path.target.asset.template),'[name]'+(!!(_configurator2.default.module.preprocessor.html.options.compileSteps%2)?'.js':'')+`?${_configurator2.default.hashAlgorithm}=[hash]`)}].concat(!!(_configurator2.default.module.preprocessor.html.options.compileSteps%2)?[]:[{loader:'extract'},{loader:_configurator2.default.module.html.loader,options:_configurator2.default.module.html.options}],{loader:_configurator2.default.module.preprocessor.html.loader,options:_configurator2.default.module.preprocessor.html.options}).concat(_configurator2.default.module.preprocessor.html.additional.map(evaluate))},html:{exclude:(a)=>_helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map((b)=>b.template.filePath)).includes(a)||!(null!==_configurator2.default.module.html.exclude)||evaluate(_configurator2.default.module.html.exclude,a),include:_configurator2.default.path.source.asset.template,test:/\.html(?:\?.*)?$/i,use:[{loader:'file?name='+_path2.default.join(_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.path.target.asset.template),`[name].[ext]?${_configurator2.default.hashAlgorithm}=[hash]`)},{loader:'extract'},{loader:_configurator2.default.module.html.loader,options:_configurator2.default.module.html.options}].concat(_configurator2.default.module.html.additional.map(evaluate))}},style:{exclude:(a)=>null===_configurator2.default.module.cascadingStyleSheet.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.cascadingStyleSheet.exclude,a),include:_helper2.default.normalizePaths([_configurator2.default.path.source.asset.cascadingStyleSheet].concat(_configurator2.default.module.locations.directoryPaths)),test:/\.s?css(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.style.loader,options:_configurator2.default.module.style.options},{loader:_configurator2.default.module.cascadingStyleSheet.loader,options:_configurator2.default.module.cascadingStyleSheet.options},{loader:_configurator2.default.module.preprocessor.cascadingStyleSheet.loader,options:_clientnode2.default.extendObject(!0,{ident:'postcss',plugins:()=>[(0,_postcssImport2.default)({addDependencyTo:_webpack2.default,root:_configurator2.default.path.context}),(0,_postcssCssnext2.default)({browsers:'> 0%'}),(0,_postcssFontpath2.default)({checkPath:!1}),(0,_postcssUrl2.default)({filter:'',maxSize:0}),(0,_postcssSprites2.default)({filterBy:()=>new _promise2.default((a,b)=>(_configurator2.default.files.compose.image?a:b)()),hooks:{onSaveSpritesheet:(a)=>_path2.default.join(a.spritePath,_path2.default.relative(_configurator2.default.path.target.asset.image,_configurator2.default.files.compose.image))},stylesheetPath:_configurator2.default.path.source.asset.cascadingStyleSheet,spritePath:_configurator2.default.path.source.asset.image})]},_configurator2.default.module.preprocessor.cascadingStyleSheet.options)}].concat(_configurator2.default.module.preprocessor.cascadingStyleSheet.additional.map(evaluate))},font:{eot:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.eot.exclude&&evaluate(_configurator2.default.module.optimizer.font.eot.exclude,a),include:_configurator2.default.path.base,test:/\.eot(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.eot.loader,options:_configurator2.default.module.optimizer.font.eot.options}].concat(_configurator2.default.module.optimizer.font.eot.additional.map(evaluate))},svg:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.svg.exclude&&evaluate(_configurator2.default.module.optimizer.font.svg.exclude,a),include:_configurator2.default.path.base,test:/\.svg(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.svg.loader,options:_configurator2.default.module.optimizer.font.svg.options}].concat(_configurator2.default.module.optimizer.font.svg.additional.map(evaluate))},ttf:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.ttf.exclude&&evaluate(_configurator2.default.module.optimizer.font.ttf.exclude,a),include:_configurator2.default.path.base,test:/\.ttf(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.ttf.loader,options:_configurator2.default.module.optimizer.font.ttf.options}].concat(_configurator2.default.module.optimizer.font.ttf.additional.map(evaluate))},woff:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.woff.exclude&&evaluate(_configurator2.default.module.optimizer.font.woff.exclude,a),include:_configurator2.default.path.base,test:/\.woff2?(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.woff.loader,options:_configurator2.default.module.optimizer.font.woff.options}].concat(_configurator2.default.module.optimizer.font.woff.additional.map(evaluate))}},image:{exclude:(a)=>null===_configurator2.default.module.optimizer.image.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.optimizer.image.exclude,a),include:_configurator2.default.path.source.asset.image,test:/\.(?:png|jpg|ico|gif)(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.image.loader,options:_configurator2.default.module.optimizer.image.file}].concat(_configurator2.default.module.optimizer.image.additional.map(evaluate))},data:{exclude:(a)=>_configurator2.default.extensions.file.internal.includes(_path2.default.extname(_helper2.default.stripLoader(a)))||(null===_configurator2.default.module.optimizer.data.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.optimizer.data.exclude,a)),include:_configurator2.default.path.source.asset.data,test:/.+/,use:[{loader:_configurator2.default.module.optimizer.data.loader,options:_configurator2.default.module.optimizer.data.options}].concat(_configurator2.default.module.optimizer.data.additional.map(evaluate))}}),_configurator2.default.files.compose.cascadingStyleSheet&&(loader.style.use.shift(),loader.style.use=plugins.ExtractText.extract({use:loader.style.use}));const webpackConfiguration={bail:!0,cache:_configurator2.default.cache.main,context:_configurator2.default.path.context,devtool:_configurator2.default.development.tool,devServer:_configurator2.default.development.server,entry:_configurator2.default.injection.internal.normalized,externals:_configurator2.default.injection.external.modules,resolve:{alias:_configurator2.default.module.aliases,aliasFields:_configurator2.default.package.aliasPropertyNames,extensions:_configurator2.default.extensions.file.internal,mainFields:_configurator2.default.package.main.propertyNames,mainFiles:_configurator2.default.package.main.fileNames,moduleExtensions:_configurator2.default.extensions.module,modules:_helper2.default.normalizePaths(_configurator2.default.module.directoryNames),unsafeCache:_configurator2.default.cache.unsafe},resolveLoader:{alias:_configurator2.default.loader.aliases,aliasFields:_configurator2.default.package.aliasPropertyNames,extensions:_configurator2.default.loader.extensions.file,mainFields:_configurator2.default.package.main.propertyNames,mainFiles:_configurator2.default.package.main.fileNames,moduleExtensions:_configurator2.default.loader.extensions.module,modules:_configurator2.default.loader.directoryNames},output:{filename:_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.files.compose.javaScript),hashFunction:_configurator2.default.hashAlgorithm,library:libraryName,libraryTarget:'buildDLL'===_configurator2.default.givenCommandLineArguments[2]?'var':_configurator2.default.exportFormat.self,path:_configurator2.default.path.target.base,publicPath:_configurator2.default.path.target.public,pathinfo:_configurator2.default.debug,umdNamedDefine:!0},performance:_configurator2.default.performanceHints,target:_configurator2.default.targetTechnology,module:{rules:_configurator2.default.module.additional.map((a)=>{return{exclude:(b)=>evaluate(a.exclude||'false',b),include:a.include&&evaluate(a.include,_configurator2.default.path.context)||_configurator2.default.path.source.base,test:new RegExp(evaluate(a.test,_configurator2.default.path.context)),use:evaluate(a.use)}}).concat([loader.ejs,loader.script,loader.html.main,loader.html.ejs,loader.html.html,loader.style,loader.font.eot,loader.font.svg,loader.font.ttf,loader.font.woff,loader.image,loader.data])},plugins:pluginInstances};(!Array.isArray(_configurator2.default.module.skipParseRegularExpressions)||_configurator2.default.module.skipParseRegularExpressions.length)&&(webpackConfiguration.module.noParse=_configurator2.default.module.skipParseRegularExpressions),_configurator2.default.showConfiguration&&(console.info('Using internal configuration:',_util2.default.inspect(_configurator2.default,{depth:null})),console.info('-----------------------------------------------------------'),console.info('Using webpack configuration:',_util2.default.inspect(webpackConfiguration,{depth:null}))),exports.default=webpackConfiguration;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2tDb25maWd1cmF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsYSwwb0JBZ0JZLEcsbURBQ0EsVSxrOUNBUVosR0FBSSxDQUNBLFFBQVEsNkJBQVIsQ0FDSCxDQUFDLFFBQWMsQ0FBRSxDQUdsQixLQUFNLFNBQVUsUUFBUSxzQkFBUixHQUFoQixDQUdBLFFBQVEsSUFBUixDQUFlLFFBQVEsSSxDQUN2QixRQUFRLFdBQVIsQ0FBc0IsUUFBUSxXLENBQzlCLFFBQVEsa0JBQVIsQ0FBNkIsUUFBUSwrQkFBUixDLENBQzdCLFFBQVEsV0FBUixDQUFzQixRQUFRLFcsQ0FDOUIsUUFBUSxPQUFSLENBQWtCLFFBQVEseUJBQVIsQyxDQUNsQixRQUFRLFFBQVIsQ0FBbUIsUUFBUSx5QkFBUixFQUFtQyxPLENBQ3RELFFBQVEsT0FBUixDQUFrQixRQUFRLGdCQUFSLEMsQ0FXbEIsUUFBUSxLQUFSLENBQWMsUUFBUSxPQUFSLENBQWdCLGFBQWhCLENBQWQsRUFBOEMsT0FBOUMsQ0FBd0QsU0FDcEQsSUFEb0QsQ0FFbEQsQ0FFRixNQURBLHNCQUFNLFlBQU4sSUFBeUIsS0FBSyxPQUE5QixDQUF1QyxNQUF2QyxDQUErQyxLQUFLLE9BQXBELENBQ0EsQ0FBTyxxQkFBdUIsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBa0MsR0FBRyxDQUFyQyxDQUNWLEMsQ0FHRCxLQUFNLCtCQUNGLHNCQUF3QixZQUQ1QixDQUVBLFFBQVEsS0FBUixDQUFjLFFBQVEsT0FBUixDQUFnQixjQUFoQixDQUFkLEVBQStDLE9BQS9DLENBQXVELFlBQXZELENBQXNFLEdBQ3RELElBRHNELEdBRXpELFFBQ0wsRUFBSSxLQUFKLENBQVUsWUFBVixDQURLLEVBR0YsOEJBQThCLEtBQTlCLHVCQUNzQixDQUFDLENBQUQsRUFBTSxNQUFOLENBQWEsQ0FBYixDQUR0QixDQUVWLEMsQ0FLRCxHQUFJLFlBQUosQ0FDSSx3Q0FBa0MsdUJBQWMsVyxDQUNoRCxZQUFjLHVCQUFjLFcsQ0FD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LE9BQUosQ0FBVyxTQUNiLEVBQW9CLElBRFAsQ0FDYSx1QkFBYyxJQUFkLENBQW1CLE9BRGhDLENBQVgsQ0FOSCxDQVFILElBQUssU0FBUyxFQUFvQixHQUE3QixDQVJGLENBVVYsQ0FiTSxFQWFKLE1BYkksQ0FhRyxDQUNOLE9BQU8sR0FERCxDQUVOLE9BQU8sTUFGRCxDQUdOLE9BQU8sSUFBUCxDQUFZLElBSE4sQ0FHWSxPQUFPLElBQVAsQ0FBWSxHQUh4QixDQUc2QixPQUFPLElBQVAsQ0FBWSxJQUh6QyxDQUlOLE9BQU8sS0FKRCxDQUtOLE9BQU8sSUFBUCxDQUFZLEdBTE4sQ0FLVyxPQUFPLElBQVAsQ0FBWSxHQUx2QixDQUs0QixPQUFPLElBQVAsQ0FBWSxHQUx4QyxDQU1OLE9BQU8sSUFBUCxDQUFZLElBTk4sQ0FPTixPQUFPLEtBUEQsQ0FRTixPQUFPLElBUkQsQ0FiSCxDQURILENBL0NzQyxDQXdFOUMsUUFBUyxlQXhFcUMsQ0FBbEQsQyxDQTBFSSxDQUFDLE1BQU0sT0FBTixDQUNELHVCQUFjLE1BQWQsQ0FBcUIsMkJBRHBCLENBQUQsRUFFQyx1QkFBYyxNQUFkLENBQXFCLDJCQUFyQixDQUFpRCxNLElBQ2xELHFCQUFxQixNQUFyQixDQUE0QixPQUE1QixDQUNJLHVCQUFjLE1BQWQsQ0FBcUIsMkIsRUFDekIsdUJBQWMsaUIsR0FDZCxRQUFRLElBQVIsQ0FBYSwrQkFBYixDQUE4QyxlQUFLLE9BQUwsd0JBQTRCLENBQ3RFLE1BQU8sSUFEK0QsQ0FBNUIsQ0FBOUMsQyxDQUVBLFFBQVEsSUFBUixDQUFhLDZEQUFiLEMsQ0FDQSxRQUFRLElBQVIsQ0FBYSw4QkFBYixDQUE2QyxlQUFLLE9BQUwsQ0FDekMsb0JBRHlDLENBQ25CLENBQUMsTUFBTyxJQUFSLENBRG1CLENBQTdDLEMsa0JBSVcsb0IiLCJmaWxlIjoid2VicGFja0NvbmZpZ3VyYXRvci5jb21waWxlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gQGZsb3dcbi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuJ3VzZSBzdHJpY3QnXG4vKiAhXG4gICAgcmVnaW9uIGhlYWRlclxuICAgIENvcHlyaWdodCBUb3JiZW4gU2lja2VydCAoaW5mb1tcIn5hdH5cIl10b3JiZW4ud2Vic2l0ZSkgMTYuMTIuMjAxMlxuXG4gICAgTGljZW5zZVxuICAgIC0tLS0tLS1cblxuICAgIFRoaXMgbGlicmFyeSB3cml0dGVuIGJ5IFRvcmJlbiBTaWNrZXJ0IHN0YW5kIHVuZGVyIGEgY3JlYXRpdmUgY29tbW9ucyBuYW1pbmdcbiAgICAzLjAgdW5wb3J0ZWQgbGljZW5zZS4gc2VlIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMC9kZWVkLmRlXG4gICAgZW5kcmVnaW9uXG4qL1xuLy8gcmVnaW9uIGltcG9ydHNcbmltcG9ydCBCYWJpbGlQbHVnaW4gZnJvbSAnYmFiaWxpLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IFRvb2xzIGZyb20gJ2NsaWVudG5vZGUnXG5pbXBvcnQgdHlwZSB7RG9tTm9kZSwgUGxhaW5PYmplY3QsIFByb2NlZHVyZUZ1bmN0aW9uLCBXaW5kb3d9IGZyb20gJ2NsaWVudG5vZGUnXG5pbXBvcnQgKiBhcyBkb20gZnJvbSAnanNkb20nXG5pbXBvcnQgKiBhcyBmaWxlU3lzdGVtIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBwb3N0Y3NzQ1NTbmV4dCBmcm9tICdwb3N0Y3NzLWNzc25leHQnXG5pbXBvcnQgcG9zdGNzc0ZvbnRQYXRoIGZyb20gJ3Bvc3Rjc3MtZm9udHBhdGgnXG5pbXBvcnQgcG9zdGNzc0ltcG9ydCBmcm9tICdwb3N0Y3NzLWltcG9ydCdcbmltcG9ydCBwb3N0Y3NzU3ByaXRlcyBmcm9tICdwb3N0Y3NzLXNwcml0ZXMnXG5pbXBvcnQgcG9zdGNzc1VSTCBmcm9tICdwb3N0Y3NzLXVybCdcbi8vIE5PVEU6IE9ubHkgbmVlZGVkIGZvciBkZWJ1Z2dpbmcgdGhpcyBmaWxlLlxudHJ5IHtcbiAgICByZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInKVxufSBjYXRjaCAoZXJyb3IpIHt9XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0IHdlYnBhY2sgZnJvbSAnd2VicGFjaydcbmNvbnN0IHBsdWdpbnMgPSByZXF1aXJlKCd3ZWJwYWNrLWxvYWQtcGx1Z2lucycpKClcbmltcG9ydCB7UmF3U291cmNlIGFzIFdlYnBhY2tSYXdTb3VyY2V9IGZyb20gJ3dlYnBhY2stc291cmNlcydcblxucGx1Z2lucy5IVE1MID0gcGx1Z2lucy5odG1sXG5wbHVnaW5zLkV4dHJhY3RUZXh0ID0gcGx1Z2lucy5leHRyYWN0VGV4dFxucGx1Z2lucy5BZGRBc3NldEhUTUxQbHVnaW4gPSByZXF1aXJlKCdhZGQtYXNzZXQtaHRtbC13ZWJwYWNrLXBsdWdpbicpXG5wbHVnaW5zLk9wZW5Ccm93c2VyID0gcGx1Z2lucy5vcGVuQnJvd3NlclxucGx1Z2lucy5GYXZpY29uID0gcmVxdWlyZSgnZmF2aWNvbnMtd2VicGFjay1wbHVnaW4nKVxucGx1Z2lucy5JbWFnZW1pbiA9IHJlcXVpcmUoJ2ltYWdlbWluLXdlYnBhY2stcGx1Z2luJykuZGVmYXVsdFxucGx1Z2lucy5PZmZsaW5lID0gcmVxdWlyZSgnb2ZmbGluZS1wbHVnaW4nKVxuXG5pbXBvcnQgZWpzTG9hZGVyIGZyb20gJy4vZWpzTG9hZGVyLmNvbXBpbGVkJ1xuaW1wb3J0IHR5cGUge0hUTUxDb25maWd1cmF0aW9uLCBXZWJwYWNrQ29uZmlndXJhdGlvbn0gZnJvbSAnLi90eXBlJ1xuaW1wb3J0IGNvbmZpZ3VyYXRpb24gZnJvbSAnLi9jb25maWd1cmF0b3IuY29tcGlsZWQnXG5pbXBvcnQgSGVscGVyIGZyb20gJy4vaGVscGVyLmNvbXBpbGVkJ1xuXG4vLyAvIHJlZ2lvbiBtb25rZXkgcGF0Y2hlc1xuLy8gTW9ua2V5LVBhdGNoIGh0bWwgbG9hZGVyIHRvIHJldHJpZXZlIGh0bWwgbG9hZGVyIG9wdGlvbnMgc2luY2UgdGhlXG4vLyBcIndlYnBhY2staHRtbC1wbHVnaW5cIiBkb2Vzbid0IHByZXNlcnZlIHRoZSBvcmlnaW5hbCBsb2FkZXIgaW50ZXJmYWNlLlxuaW1wb3J0IGh0bWxMb2FkZXJNb2R1bGVCYWNrdXAgZnJvbSAnaHRtbC1sb2FkZXInXG5yZXF1aXJlLmNhY2hlW3JlcXVpcmUucmVzb2x2ZSgnaHRtbC1sb2FkZXInKV0uZXhwb3J0cyA9IGZ1bmN0aW9uKFxuICAgIC4uLnBhcmFtZXRlcjpBcnJheTxhbnk+XG4pOmFueSB7XG4gICAgVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIHRoaXMub3B0aW9ucywgbW9kdWxlLCB0aGlzLm9wdGlvbnMpXG4gICAgcmV0dXJuIGh0bWxMb2FkZXJNb2R1bGVCYWNrdXAuY2FsbCh0aGlzLCAuLi5wYXJhbWV0ZXIpXG59XG4vLyBNb25rZXktUGF0Y2ggbG9hZGVyLXV0aWxzIHRvIGRlZmluZSB3aGljaCB1cmwgaXMgYSBsb2NhbCByZXF1ZXN0LlxuaW1wb3J0IGxvYWRlclV0aWxzTW9kdWxlQmFja3VwIGZyb20gJ2xvYWRlci11dGlscydcbmNvbnN0IGxvYWRlclV0aWxzSXNVcmxSZXF1ZXN0QmFja3VwOih1cmw6c3RyaW5nKSA9PiBib29sZWFuID1cbiAgICBsb2FkZXJVdGlsc01vZHVsZUJhY2t1cC5pc1VybFJlcXVlc3RcbnJlcXVpcmUuY2FjaGVbcmVxdWlyZS5yZXNvbHZlKCdsb2FkZXItdXRpbHMnKV0uZXhwb3J0cy5pc1VybFJlcXVlc3QgPSAoXG4gICAgdXJsOnN0cmluZywgLi4uYWRkaXRpb25hbFBhcmFtZXRlcjpBcnJheTxhbnk+XG4pOmJvb2xlYW4gPT4ge1xuICAgIGlmICh1cmwubWF0Y2goL15bYS16XSs6LisvKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIGxvYWRlclV0aWxzSXNVcmxSZXF1ZXN0QmFja3VwLmFwcGx5KFxuICAgICAgICBsb2FkZXJVdGlsc01vZHVsZUJhY2t1cCwgW3VybF0uY29uY2F0KGFkZGl0aW9uYWxQYXJhbWV0ZXIpKVxufVxuLy8gLyBlbmRyZWdpb25cbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGluaXRpYWxpc2F0aW9uXG4vLyAvIHJlZ2lvbiBkZXRlcm1pbmUgbGlicmFyeSBuYW1lXG5sZXQgbGlicmFyeU5hbWU6c3RyaW5nXG5pZiAoJ2xpYnJhcnlOYW1lJyBpbiBjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24ubGlicmFyeU5hbWUpXG4gICAgbGlicmFyeU5hbWUgPSBjb25maWd1cmF0aW9uLmxpYnJhcnlOYW1lXG5lbHNlIGlmIChPYmplY3Qua2V5cyhjb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkKS5sZW5ndGggPiAxKVxuICAgIGxpYnJhcnlOYW1lID0gJ1tuYW1lXSdcbmVsc2Uge1xuICAgIGxpYnJhcnlOYW1lID0gY29uZmlndXJhdGlvbi5uYW1lXG4gICAgaWYgKGNvbmZpZ3VyYXRpb24uZXhwb3J0Rm9ybWF0LnNlbGYgPT09ICd2YXInKVxuICAgICAgICBsaWJyYXJ5TmFtZSA9IFRvb2xzLnN0cmluZ0NvbnZlcnRUb1ZhbGlkVmFyaWFibGVOYW1lKGxpYnJhcnlOYW1lKVxufVxuLy8gLyBlbmRyZWdpb25cbi8vIC8gcmVnaW9uIHBsdWdpbnNcbmNvbnN0IHBsdWdpbkluc3RhbmNlczpBcnJheTxPYmplY3Q+ID0gW1xuICAgIG5ldyB3ZWJwYWNrLk5vRW1pdE9uRXJyb3JzUGx1Z2luKCksXG4gICAgbmV3IHdlYnBhY2sub3B0aW1pemUuT2NjdXJyZW5jZU9yZGVyUGx1Z2luKHRydWUpXG5dXG5pZiAoY29uZmlndXJhdGlvbi5kZWJ1ZylcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5OYW1lZE1vZHVsZXNQbHVnaW4oKSlcbi8vIC8vIHJlZ2lvbiBkZWZpbmUgbW9kdWxlcyB0byBpZ25vcmVcbmZvciAoY29uc3QgaWdub3JlUGF0dGVybjpzdHJpbmcgb2YgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaWdub3JlUGF0dGVybilcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5JZ25vcmVQbHVnaW4obmV3IFJlZ0V4cChpZ25vcmVQYXR0ZXJuKSkpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBkZWZpbmUgbW9kdWxlcyB0byByZXBsYWNlXG5mb3IgKGNvbnN0IHNvdXJjZTpzdHJpbmcgaW4gY29uZmlndXJhdGlvbi5tb2R1bGUucmVwbGFjZW1lbnRzLm5vcm1hbClcbiAgICBpZiAoY29uZmlndXJhdGlvbi5tb2R1bGUucmVwbGFjZW1lbnRzLm5vcm1hbC5oYXNPd25Qcm9wZXJ0eShzb3VyY2UpKVxuICAgICAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5Ob3JtYWxNb2R1bGVSZXBsYWNlbWVudFBsdWdpbihcbiAgICAgICAgICAgIG5ldyBSZWdFeHAoc291cmNlKSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWxbc291cmNlXSkpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBnZW5lcmF0ZSBodG1sIGZpbGVcbmxldCBodG1sQXZhaWxhYmxlOmJvb2xlYW4gPSBmYWxzZVxuaWYgKGNvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXSAhPT0gJ2J1aWxkRExMJylcbiAgICBmb3IgKGxldCBodG1sQ29uZmlndXJhdGlvbjpIVE1MQ29uZmlndXJhdGlvbiBvZiBjb25maWd1cmF0aW9uLmZpbGVzLmh0bWwpXG4gICAgICAgIGlmIChUb29scy5pc0ZpbGVTeW5jKGh0bWxDb25maWd1cmF0aW9uLnRlbXBsYXRlLmZpbGVQYXRoKSkge1xuICAgICAgICAgICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHBsdWdpbnMuSFRNTChUb29scy5leHRlbmRPYmplY3QoXG4gICAgICAgICAgICAgICAge30sIGh0bWxDb25maWd1cmF0aW9uLCB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5yZXF1ZXN0fSkpKVxuICAgICAgICAgICAgaHRtbEF2YWlsYWJsZSA9IHRydWVcbiAgICAgICAgfVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gZ2VuZXJhdGUgZmF2aWNvbnNcbmlmIChodG1sQXZhaWxhYmxlICYmIGNvbmZpZ3VyYXRpb24uZmF2aWNvbiAmJiBUb29scy5pc0ZpbGVTeW5jKFxuICAgIGNvbmZpZ3VyYXRpb24uZmF2aWNvbi5sb2dvXG4pKVxuICAgIHBsdWdpbkluc3RhbmNlcy5wdXNoKG5ldyBwbHVnaW5zLkZhdmljb24oY29uZmlndXJhdGlvbi5mYXZpY29uKSlcbi8vIC8vIGVuZHJlZ2lvblxuLy8gLy8gcmVnaW9uIHByb3ZpZGUgb2ZmbGluZSBmdW5jdGlvbmFsaXR5XG5pZiAoaHRtbEF2YWlsYWJsZSAmJiBjb25maWd1cmF0aW9uLm9mZmxpbmUpIHtcbiAgICBpZiAoIVsnc2VydmUnLCAndGVzdEluQnJvd3NlciddLmluY2x1ZGVzKFxuICAgICAgICBjb25maWd1cmF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbMl1cbiAgICApKSB7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uLmluUGxhY2UuY2FzY2FkaW5nU3R5bGVTaGVldCAmJiBPYmplY3Qua2V5cyhcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5jYXNjYWRpbmdTdHlsZVNoZWV0XG4gICAgICAgICkubGVuZ3RoKVxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5vZmZsaW5lLmV4Y2x1ZGVzLnB1c2gocGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5hc3NldC5jYXNjYWRpbmdTdHlsZVNoZWV0XG4gICAgICAgICAgICApICsgYCouY3NzPyR7Y29uZmlndXJhdGlvbi5oYXNoQWxnb3JpdGhtfT0qYClcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5qYXZhU2NyaXB0ICYmIE9iamVjdC5rZXlzKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pblBsYWNlLmphdmFTY3JpcHRcbiAgICAgICAgKS5sZW5ndGgpXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm9mZmxpbmUuZXhjbHVkZXMucHVzaChwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0LmphdmFTY3JpcHRcbiAgICAgICAgICAgICkgKyBgKi5qcz8ke2NvbmZpZ3VyYXRpb24uaGFzaEFsZ29yaXRobX09KmApXG4gICAgfVxuICAgIHBsdWdpbkluc3RhbmNlcy5wdXNoKG5ldyBwbHVnaW5zLk9mZmxpbmUoY29uZmlndXJhdGlvbi5vZmZsaW5lKSlcbn1cbi8vIC8vIGVuZHJlZ2lvblxuLy8gLy8gcmVnaW9uIG9wZW5zIGJyb3dzZXIgYXV0b21hdGljYWxseVxuaWYgKGNvbmZpZ3VyYXRpb24uZGV2ZWxvcG1lbnQub3BlbkJyb3dzZXIgJiYgKGh0bWxBdmFpbGFibGUgJiYgW1xuICAgICdzZXJ2ZScsICd0ZXN0SW5Ccm93c2VyJ1xuXS5pbmNsdWRlcyhjb25maWd1cmF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbMl0pKSlcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5PcGVuQnJvd3NlcihcbiAgICAgICAgY29uZmlndXJhdGlvbi5kZXZlbG9wbWVudC5vcGVuQnJvd3NlcikpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBwcm92aWRlIGJ1aWxkIGVudmlyb25tZW50XG5pZiAoY29uZmlndXJhdGlvbi5idWlsZC5kZWZpbml0aW9ucylcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgd2VicGFjay5EZWZpbmVQbHVnaW4oXG4gICAgICAgIGNvbmZpZ3VyYXRpb24uYnVpbGQuZGVmaW5pdGlvbnMpKVxuaWYgKGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByb3ZpZGUpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suUHJvdmlkZVBsdWdpbihcbiAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJvdmlkZSkpXG4vLyAvLyBlbmRyZWdpb25cbi8vIC8vIHJlZ2lvbiBtb2R1bGVzL2Fzc2V0c1xuLy8gLy8vIHJlZ2lvbiBwZXJmb3JtIGphdmFTY3JpcHQgbWluaWZpY2F0aW9uL29wdGltaXNhdGlvblxuaWYgKGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5iYWJpbGkpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IEJhYmlsaVBsdWdpbihcbiAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmJhYmlsaSkpXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIGFwcGx5IG1vZHVsZSBwYXR0ZXJuXG5wbHVnaW5JbnN0YW5jZXMucHVzaCh7YXBwbHk6IChjb21waWxlcjpPYmplY3QpOnZvaWQgPT4ge1xuICAgIGNvbXBpbGVyLnBsdWdpbignZW1pdCcsIChcbiAgICAgICAgY29tcGlsYXRpb246T2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICk6dm9pZCA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcmVxdWVzdDpzdHJpbmcgaW4gY29tcGlsYXRpb24uYXNzZXRzKVxuICAgICAgICAgICAgaWYgKGNvbXBpbGF0aW9uLmFzc2V0cy5oYXNPd25Qcm9wZXJ0eShyZXF1ZXN0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoOnN0cmluZyA9IHJlcXVlc3QucmVwbGFjZSgvXFw/W14/XSskLywgJycpXG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZTo/c3RyaW5nID0gSGVscGVyLmRldGVybWluZUFzc2V0VHlwZShcbiAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGgsIGNvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMsIGNvbmZpZ3VyYXRpb24ucGF0aClcbiAgICAgICAgICAgICAgICBpZiAodHlwZSAmJiBjb25maWd1cmF0aW9uLmFzc2V0UGF0dGVyblt0eXBlXSAmJiAhKG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uYXNzZXRQYXR0ZXJuW3R5cGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXhjbHVkZUZpbGVQYXRoUmVndWxhckV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICApKS50ZXN0KGZpbGVQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2U6P3N0cmluZyA9IGNvbXBpbGF0aW9uLmFzc2V0c1tyZXF1ZXN0XS5zb3VyY2UoKVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21waWxhdGlvbi5hc3NldHNbcmVxdWVzdF0gPSBuZXcgV2VicGFja1Jhd1NvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmFzc2V0UGF0dGVyblt0eXBlXS5wYXR0ZXJuLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cXHsxXFx9L2csIHNvdXJjZS5yZXBsYWNlKC9cXCQvZywgJyQkJCcpKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICB9KVxufX0pXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIGluLXBsYWNlIGNvbmZpZ3VyZWQgYXNzZXRzIGluIHRoZSBtYWluIGh0bWwgZmlsZVxuaWYgKGh0bWxBdmFpbGFibGUgJiYgIVsnc2VydmUnLCAndGVzdEluQnJvd3NlciddLmluY2x1ZGVzKFxuICAgIGNvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXVxuKSlcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaCh7YXBwbHk6IChjb21waWxlcjpPYmplY3QpOnZvaWQgPT4ge1xuICAgICAgICBjb25zdCBmaWxlUGF0aHNUb1JlbW92ZTpBcnJheTxzdHJpbmc+ID0gW11cbiAgICAgICAgY29tcGlsZXIucGx1Z2luKCdjb21waWxhdGlvbicsIChjb21waWxhdGlvbjpPYmplY3QpOnZvaWQgPT5cbiAgICAgICAgICAgIGNvbXBpbGF0aW9uLnBsdWdpbihcbiAgICAgICAgICAgICAgICAnaHRtbC13ZWJwYWNrLXBsdWdpbi1hZnRlci1odG1sLXByb2Nlc3NpbmcnLCBhc3luYyAoXG4gICAgICAgICAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhOlBsYWluT2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICAgICAgICAgICAgICk6UHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5jYXNjYWRpbmdTdHlsZVNoZWV0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmluUGxhY2UuY2FzY2FkaW5nU3R5bGVTaGVldFxuICAgICAgICAgICAgICAgICAgICAgICAgKS5sZW5ndGggfHwgY29uZmlndXJhdGlvbi5pblBsYWNlLmphdmFTY3JpcHQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5qYXZhU2NyaXB0KS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQ6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OnN0cmluZywgZmlsZVBhdGhzVG9SZW1vdmU6QXJyYXk8c3RyaW5nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBhd2FpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXIuaW5QbGFjZUNTU0FuZEphdmFTY3JpcHRBc3NldFJlZmVyZW5jZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sUGx1Z2luRGF0YS5odG1sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pblBsYWNlLmNhc2NhZGluZ1N0eWxlU2hlZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmluUGxhY2UuamF2YVNjcmlwdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuY29tcG9zZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXNjYWRpbmdTdHlsZVNoZWV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmphdmFTY3JpcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxhdGlvbi5hc3NldHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGEuaHRtbCA9IHJlc3VsdC5jb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGhzVG9SZW1vdmUuY29uY2F0KHJlc3VsdC5maWxlUGF0aHNUb1JlbW92ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yLCBodG1sUGx1Z2luRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgaHRtbFBsdWdpbkRhdGEpXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgIGNvbXBpbGVyLnBsdWdpbignYWZ0ZXItZW1pdCcsIGFzeW5jIChcbiAgICAgICAgICAgIGNvbXBpbGF0aW9uOk9iamVjdCwgY2FsbGJhY2s6UHJvY2VkdXJlRnVuY3Rpb25cbiAgICAgICAgKTpQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgICAgIGxldCBwcm9taXNlczpBcnJheTxQcm9taXNlPHZvaWQ+PiA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGg6c3RyaW5nIG9mIGZpbGVQYXRoc1RvUmVtb3ZlKVxuICAgICAgICAgICAgICAgIGlmIChhd2FpdCBUb29scy5pc0ZpbGUocGF0aCkpXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmU6RnVuY3Rpb24pOnZvaWQgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0udW5saW5rKHBhdGgsIChlcnJvcjo/RXJyb3IpOnZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSlcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgICAgICAgICAgcHJvbWlzZXMgPSBbXVxuICAgICAgICAgICAgZm9yIChjb25zdCB0eXBlOnN0cmluZyBvZiBbXG4gICAgICAgICAgICAgICAgJ2phdmFTY3JpcHQnLCAnY2FzY2FkaW5nU3R5bGVTaGVldCdcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgoXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6RnVuY3Rpb24sIHJlamVjdDpGdW5jdGlvblxuICAgICAgICAgICAgICAgICk6dm9pZCA9PiBmaWxlU3lzdGVtLnJlYWRkaXIoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYXNzZXRbdHlwZV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcjo/RXJyb3IsIGZpbGVzOkFycmF5PHN0cmluZz4pOnZvaWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLnJtZGlyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0W3R5cGVdLCAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjo/RXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTp2b2lkID0+IGVycm9yID8gcmVqZWN0KGVycm9yKSA6IHJlc29sdmUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgICAgICAgICAgfSkpKVxuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH0pXG4gICAgfX0pXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIHJlbW92ZSBjaHVua3MgaWYgYSBjb3JyZXNwb25kaW5nIGRsbCBwYWNrYWdlIGV4aXN0c1xuaWYgKGNvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXSAhPT0gJ2J1aWxkRExMJylcbiAgICBmb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgaW4gY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZClcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsLm5vcm1hbGl6ZWQuaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICBjaHVua05hbWVcbiAgICAgICAgKSkge1xuICAgICAgICAgICAgY29uc3QgbWFuaWZlc3RGaWxlUGF0aDpzdHJpbmcgPVxuICAgICAgICAgICAgICAgIGAke2NvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZX0vJHtjaHVua05hbWV9LmAgK1xuICAgICAgICAgICAgICAgIGBkbGwtbWFuaWZlc3QuanNvbmBcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLmRsbE1hbmlmZXN0RmlsZVBhdGhzLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgIG1hbmlmZXN0RmlsZVBhdGhcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZFtjaHVua05hbWVdXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVBhdGg6c3RyaW5nID0gSGVscGVyLnJlbmRlckZpbGVQYXRoVGVtcGxhdGUoXG4gICAgICAgICAgICAgICAgICAgIEhlbHBlci5zdHJpcExvYWRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuY29tcG9zZS5qYXZhU2NyaXB0XG4gICAgICAgICAgICAgICAgICAgICksIHsnW25hbWVdJzogY2h1bmtOYW1lfSlcbiAgICAgICAgICAgICAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5BZGRBc3NldEhUTUxQbHVnaW4oe1xuICAgICAgICAgICAgICAgICAgICBmaWxlcGF0aDogZmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGhhc2g6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVTb3VyY2VtYXA6IFRvb2xzLmlzRmlsZVN5bmMoYCR7ZmlsZVBhdGh9Lm1hcGApXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suRGxsUmVmZXJlbmNlUGx1Z2luKHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIG1hbmlmZXN0OiByZXF1aXJlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFuaWZlc3RGaWxlUGF0aCl9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuLy8gLy8vIGVuZHJlZ2lvblxuLy8gLy8vIHJlZ2lvbiBnZW5lcmF0ZSBjb21tb24gY2h1bmtzXG5pZiAoY29uZmlndXJhdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdICE9PSAnYnVpbGRETEwnKVxuICAgIGZvciAoY29uc3QgY2h1bmtOYW1lOnN0cmluZyBvZiBjb25maWd1cmF0aW9uLmluamVjdGlvbi5jb21tb25DaHVua0lEcylcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsLm5vcm1hbGl6ZWQuaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICBjaHVua05hbWVcbiAgICAgICAgKSlcbiAgICAgICAgICAgIHBsdWdpbkluc3RhbmNlcy5wdXNoKG5ldyB3ZWJwYWNrLm9wdGltaXplLkNvbW1vbnNDaHVua1BsdWdpbih7XG4gICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogcGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmZpbGVzLmNvbXBvc2UuamF2YVNjcmlwdCksXG4gICAgICAgICAgICAgICAgbWluQ2h1bmtzOiBJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBuYW1lOiBjaHVua05hbWUsXG4gICAgICAgICAgICAgICAgbWluU2l6ZTogMFxuICAgICAgICAgICAgfSkpXG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIG1hcmsgZW1wdHkgamF2YVNjcmlwdCBtb2R1bGVzIGFzIGR1bW15XG5pZiAoIWNvbmZpZ3VyYXRpb24ubmVlZGVkLmphdmFTY3JpcHQpXG4gICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmphdmFTY3JpcHQgPSBwYXRoLnJlc29sdmUoXG4gICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYXNzZXQuamF2YVNjcmlwdCwgJy5fX2R1bW15X18uY29tcGlsZWQuanMnKVxuLy8gLy8vIGVuZHJlZ2lvblxuLy8gLy8vIHJlZ2lvbiBleHRyYWN0IGNhc2NhZGluZyBzdHlsZSBzaGVldHNcbmlmIChjb25maWd1cmF0aW9uLmZpbGVzLmNvbXBvc2UuY2FzY2FkaW5nU3R5bGVTaGVldClcbiAgICBwbHVnaW5JbnN0YW5jZXMucHVzaChuZXcgcGx1Z2lucy5FeHRyYWN0VGV4dCh7XG4gICAgICAgIGFsbENodW5rczogdHJ1ZSwgZmlsZW5hbWU6IHBhdGgucmVsYXRpdmUoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2UsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmZpbGVzLmNvbXBvc2UuY2FzY2FkaW5nU3R5bGVTaGVldClcbiAgICB9KSlcbi8vIC8vLyBlbmRyZWdpb25cbi8vIC8vLyByZWdpb24gcGVyZm9ybXMgaW1wbGljaXQgZXh0ZXJuYWwgbG9naWNcbmlmIChjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbC5tb2R1bGVzID09PSAnX19pbXBsaWNpdF9fJylcbiAgICAvKlxuICAgICAgICBXZSBvbmx5IHdhbnQgdG8gcHJvY2VzcyBtb2R1bGVzIGZyb20gbG9jYWwgY29udGV4dCBpbiBsaWJyYXJ5IG1vZGUsXG4gICAgICAgIHNpbmNlIGEgY29uY3JldGUgcHJvamVjdCB1c2luZyB0aGlzIGxpYnJhcnkgc2hvdWxkIGNvbWJpbmUgYWxsIGFzc2V0c1xuICAgICAgICAoYW5kIGRlZHVwbGljYXRlIHRoZW0pIGZvciBvcHRpbWFsIGJ1bmRsaW5nIHJlc3VsdHMuIE5PVEU6IE9ubHkgbmF0aXZlXG4gICAgICAgIGphdmFTY3JpcHQgYW5kIGpzb24gbW9kdWxlcyB3aWxsIGJlIG1hcmtlZCBhcyBleHRlcm5hbCBkZXBlbmRlbmN5LlxuICAgICovXG4gICAgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWwubW9kdWxlcyA9IChcbiAgICAgICAgY29udGV4dDpzdHJpbmcsIHJlcXVlc3Q6c3RyaW5nLCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICk6dm9pZCA9PiB7XG4gICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LnJlcGxhY2UoL14hKy8sICcnKVxuICAgICAgICBpZiAocmVxdWVzdC5zdGFydHNXaXRoKCcvJykpXG4gICAgICAgICAgICByZXF1ZXN0ID0gcGF0aC5yZWxhdGl2ZShjb25maWd1cmF0aW9uLnBhdGguY29udGV4dCwgcmVxdWVzdClcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoOnN0cmluZyBvZlxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUuZGlyZWN0b3J5TmFtZXMuY29uY2F0KFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubG9hZGVyLmRpcmVjdG9yeU5hbWVzKVxuICAgICAgICApXG4gICAgICAgICAgICBpZiAocmVxdWVzdC5zdGFydHNXaXRoKGZpbGVQYXRoKSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LnN1YnN0cmluZyhmaWxlUGF0aC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhcnRzV2l0aCgnLycpKVxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5zdWJzdHJpbmcoMSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICBsZXQgcmVzb2x2ZWRSZXF1ZXN0Oj9zdHJpbmcgPSBIZWxwZXIuZGV0ZXJtaW5lRXh0ZXJuYWxSZXF1ZXN0KFxuICAgICAgICAgICAgcmVxdWVzdCwgY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIGNvbnRleHQsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLmlnbm9yZS5jb25jYXQoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUuZGlyZWN0b3J5TmFtZXMsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5sb2FkZXIuZGlyZWN0b3J5TmFtZXNcbiAgICAgICAgICAgICkubWFwKChmaWxlUGF0aDpzdHJpbmcpOnN0cmluZyA9PiBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIGZpbGVQYXRoXG4gICAgICAgICAgICApKS5maWx0ZXIoKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PlxuICAgICAgICAgICAgICAgICFjb25maWd1cmF0aW9uLnBhdGguY29udGV4dC5zdGFydHNXaXRoKGZpbGVQYXRoKVxuICAgICAgICAgICAgKSwgY29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWwsIGNvbmZpZ3VyYXRpb24uZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuYmFzZSwgY29uZmlndXJhdGlvbi5wYXRoLmlnbm9yZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYWNrYWdlLm1haW4uZmlsZU5hbWVzLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYWNrYWdlLm1haW4ucHJvcGVydHlOYW1lcyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGFja2FnZS5hbGlhc1Byb3BlcnR5TmFtZXMsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbC5pbXBsaWNpdC5wYXR0ZXJuLmluY2x1ZGUsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbC5pbXBsaWNpdC5wYXR0ZXJuLmV4Y2x1ZGUsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmluUGxhY2UuZXh0ZXJuYWxMaWJyYXJ5Lm5vcm1hbCxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uaW5QbGFjZS5leHRlcm5hbExpYnJhcnkuZHluYW1pYyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZW5jb2RpbmcpXG4gICAgICAgIGlmIChyZXNvbHZlZFJlcXVlc3QpIHtcbiAgICAgICAgICAgIGlmIChbJ3ZhcicsICd1bWQnXS5pbmNsdWRlcyhcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmV4cG9ydEZvcm1hdC5leHRlcm5hbFxuICAgICAgICAgICAgKSAmJiByZXF1ZXN0IGluIGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLmFsaWFzZXMpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRSZXF1ZXN0ID0gY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWwuYWxpYXNlc1tcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdF1cbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLmV4cG9ydEZvcm1hdC5leHRlcm5hbCA9PT0gJ3ZhcicpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRSZXF1ZXN0ID0gVG9vbHMuc3RyaW5nQ29udmVydFRvVmFsaWRWYXJpYWJsZU5hbWUoXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdCwgJzAtOWEtekEtWl8kXFxcXC4nKVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgIG51bGwsIHJlc29sdmVkUmVxdWVzdCwgY29uZmlndXJhdGlvbi5leHBvcnRGb3JtYXQuZXh0ZXJuYWwpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKClcbiAgICB9XG4vLyAvLy8gZW5kcmVnaW9uXG4vLyAvLy8gcmVnaW9uIGJ1aWxkIGRsbCBwYWNrYWdlc1xuaWYgKGNvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXSA9PT0gJ2J1aWxkRExMJykge1xuICAgIGxldCBkbGxDaHVua0lERXhpc3RzOmJvb2xlYW4gPSBmYWxzZVxuICAgIGZvciAoY29uc3QgY2h1bmtOYW1lOnN0cmluZyBpbiBjb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkKVxuICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZC5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgIGNodW5rTmFtZVxuICAgICAgICApKVxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmRsbENodW5rSURzLmluY2x1ZGVzKGNodW5rTmFtZSkpXG4gICAgICAgICAgICAgICAgZGxsQ2h1bmtJREV4aXN0cyA9IHRydWVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZFtjaHVua05hbWVdXG4gICAgaWYgKGRsbENodW5rSURFeGlzdHMpIHtcbiAgICAgICAgbGlicmFyeU5hbWUgPSAnW25hbWVdRExMUGFja2FnZSdcbiAgICAgICAgcGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHdlYnBhY2suRGxsUGx1Z2luKHtcbiAgICAgICAgICAgIHBhdGg6IGAke2NvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZX0vW25hbWVdLmRsbC1tYW5pZmVzdC5qc29uYCxcbiAgICAgICAgICAgIG5hbWU6IGxpYnJhcnlOYW1lXG4gICAgICAgIH0pKVxuICAgIH0gZWxzZVxuICAgICAgICBjb25zb2xlLndhcm4oJ05vIGRsbCBjaHVuayBpZCBmb3VuZC4nKVxufVxuLy8gLy8vIGVuZHJlZ2lvblxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gYXBwbHkgZmluYWwgZG9tL2phdmFTY3JpcHQgbW9kaWZpY2F0aW9ucy9maXhlc1xucGx1Z2luSW5zdGFuY2VzLnB1c2goe2FwcGx5OiAoY29tcGlsZXI6T2JqZWN0KTp2b2lkID0+IGNvbXBpbGVyLnBsdWdpbihcbiAgICAnY29tcGlsYXRpb24nLCAoY29tcGlsYXRpb246T2JqZWN0KTp2b2lkID0+IHtcbiAgICAgICAgY29tcGlsYXRpb24ucGx1Z2luKCdodG1sLXdlYnBhY2stcGx1Z2luLWFsdGVyLWFzc2V0LXRhZ3MnLCAoXG4gICAgICAgICAgICBodG1sUGx1Z2luRGF0YTpQbGFpbk9iamVjdCwgY2FsbGJhY2s6UHJvY2VkdXJlRnVuY3Rpb25cbiAgICAgICAgKTp2b2lkID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGFnczpBcnJheTxQbGFpbk9iamVjdD4gb2YgW1xuICAgICAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLmJvZHksIGh0bWxQbHVnaW5EYXRhLmhlYWRcbiAgICAgICAgICAgIF0pIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXg6bnVtYmVyID0gMFxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGFnOlBsYWluT2JqZWN0IG9mIHRhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9eXFwuX19kdW1teV9fKFxcLi4qKT8kLy50ZXN0KHBhdGguYmFzZW5hbWUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcuYXR0cmlidXRlcy5zcmMgfHwgdGFnLmF0dHJpYnV0ZXMuaHJlZiB8fCAnJ1xuICAgICAgICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3Muc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgICAgICAgICBpbmRleCArPSAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXNzZXRzOkFycmF5PHN0cmluZz4gPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLnBsdWdpbi5hc3NldEpzb24pXG4gICAgICAgICAgICBsZXQgaW5kZXg6bnVtYmVyID0gMFxuICAgICAgICAgICAgZm9yIChjb25zdCBhc3NldFJlcXVlc3Q6c3RyaW5nIG9mIGFzc2V0cykge1xuICAgICAgICAgICAgICAgIGlmICgvXlxcLl9fZHVtbXlfXyhcXC4uKik/JC8udGVzdChwYXRoLmJhc2VuYW1lKGFzc2V0UmVxdWVzdCkpKVxuICAgICAgICAgICAgICAgICAgICBhc3NldHMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgICAgIGluZGV4ICs9IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLnBsdWdpbi5hc3NldEpzb24gPSBKU09OLnN0cmluZ2lmeShhc3NldHMpXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBodG1sUGx1Z2luRGF0YSlcbiAgICAgICAgfSlcbiAgICAgICAgY29tcGlsYXRpb24ucGx1Z2luKCdodG1sLXdlYnBhY2stcGx1Z2luLWFmdGVyLWh0bWwtcHJvY2Vzc2luZycsIChcbiAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhOlBsYWluT2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvblxuICAgICAgICApOldpbmRvdyA9PiBkb20uZW52KGh0bWxQbHVnaW5EYXRhLmh0bWwucmVwbGFjZShcbiAgICAgICAgICAgIC88JS9nLCAnIyMrIysjKyMjJ1xuICAgICAgICApLnJlcGxhY2UoLyU+L2csICcjIy0jLSMtIyMnKSwgKGVycm9yOj9FcnJvciwgd2luZG93OldpbmRvdyk6dm9pZCA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yLCBodG1sUGx1Z2luRGF0YSlcbiAgICAgICAgICAgIGNvbnN0IGxpbmthYmxlczp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7XG4gICAgICAgICAgICAgICAgc2NyaXB0OiAnc3JjJywgbGluazogJ2hyZWYnfVxuICAgICAgICAgICAgZm9yIChjb25zdCB0YWdOYW1lOnN0cmluZyBpbiBsaW5rYWJsZXMpXG4gICAgICAgICAgICAgICAgaWYgKGxpbmthYmxlcy5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbU5vZGU6RG9tTm9kZSBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGFnTmFtZX1bJHtsaW5rYWJsZXNbdGFnTmFtZV19Kj1cIj9gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtjb25maWd1cmF0aW9uLmhhc2hBbGdvcml0aG19PVwiXWApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTk9URTogUmVtb3Zpbmcgc3ltYm9scyBhZnRlciBhIFwiJlwiIGluIGhhc2ggc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbmVjZXNzYXJ5IHRvIG1hdGNoIHRoZSBnZW5lcmF0ZWQgcmVxdWVzdCBzdHJpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gb2ZmbGluZSBwbHVnaW4uXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9tTm9kZS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FibGVzW3RhZ05hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbU5vZGUuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWJsZXNbdGFnTmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnJlcGxhY2UobmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYChcXFxcPyR7Y29uZmlndXJhdGlvbi5oYXNoQWxnb3JpdGhtfT1gICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1teJl0rKS4qJCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLCAnJDEnKSlcbiAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLmh0bWwgPSBodG1sUGx1Z2luRGF0YS5odG1sLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgL14oXFxzKjwhZG9jdHlwZSBbXj5dKz8+XFxzKilbXFxzXFxTXSokL2ksICckMSdcbiAgICAgICAgICAgICkgKyB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIC8jI1xcKyNcXCsjXFwrIyMvZywgJzwlJ1xuICAgICAgICAgICAgKS5yZXBsYWNlKC8jIy0jLSMtIyMvZywgJyU+JylcbiAgICAgICAgICAgIC8vICByZWdpb24gcG9zdCBjb21waWxhdGlvblxuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBjb25zdCBodG1sRmlsZVNwZWNpZmljYXRpb246UGxhaW5PYmplY3Qgb2ZcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmZpbGVzLmh0bWxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGh0bWxGaWxlU3BlY2lmaWNhdGlvbi5maWxlbmFtZSA9PT1cbiAgICAgICAgICAgICAgICAgICAgaHRtbFBsdWdpbkRhdGEucGx1Z2luLm9wdGlvbnMuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRlckNvbmZpZ3VyYXRpb246UGxhaW5PYmplY3Qgb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxGaWxlU3BlY2lmaWNhdGlvbi50ZW1wbGF0ZS51c2VcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRlckNvbmZpZ3VyYXRpb24uaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29wdGlvbnMnXG4gICAgICAgICAgICAgICAgICAgICAgICApICYmIGxvYWRlckNvbmZpZ3VyYXRpb24ub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29tcGlsZVN0ZXBzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSAmJiB0eXBlb2YgbG9hZGVyQ29uZmlndXJhdGlvbi5vcHRpb25zLmNvbXBpbGVTdGVwc1xuICAgICAgICAgICAgICAgICAgICAgICAgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxQbHVnaW5EYXRhLmh0bWwgPSBlanNMb2FkZXIuYmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIHt9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2FkZXJDb25maWd1cmF0aW9uLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwge29wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGVTdGVwczogaHRtbEZpbGVTcGVjaWZpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRlbXBsYXRlLnBvc3RDb21waWxlU3RlcHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0pKShodG1sUGx1Z2luRGF0YS5odG1sKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVuZHJlZ2lvblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgaHRtbFBsdWdpbkRhdGEpXG4gICAgICAgIH0pKVxuICAgIH0pfSlcbi8qXG4gICAgTk9URTogVGhlIHVtZCBtb2R1bGUgZXhwb3J0IGRvZXNuJ3QgaGFuZGxlIGNhc2VzIHdoZXJlIHRoZSBwYWNrYWdlIG5hbWVcbiAgICBkb2Vzbid0IG1hdGNoIGV4cG9ydGVkIGxpYnJhcnkgbmFtZS4gVGhpcyBwb3N0IHByb2Nlc3NpbmcgZml4ZXMgdGhpcyBpc3N1ZS5cbiovXG5pZiAoY29uZmlndXJhdGlvbi5leHBvcnRGb3JtYXQuZXh0ZXJuYWwuc3RhcnRzV2l0aCgndW1kJykpXG4gICAgcGx1Z2luSW5zdGFuY2VzLnB1c2goe2FwcGx5OiAoY29tcGlsZXI6T2JqZWN0KTp2b2lkID0+IGNvbXBpbGVyLnBsdWdpbihcbiAgICAgICAgJ2VtaXQnLCAoY29tcGlsYXRpb246T2JqZWN0LCBjYWxsYmFjazpQcm9jZWR1cmVGdW5jdGlvbik6dm9pZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBidW5kbGVOYW1lOnN0cmluZyA9IChcbiAgICAgICAgICAgICAgICB0eXBlb2YgbGlicmFyeU5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICApID8gbGlicmFyeU5hbWUgOiBsaWJyYXJ5TmFtZVswXVxuICAgICAgICAgICAgZm9yIChjb25zdCBhc3NldFJlcXVlc3Q6c3RyaW5nIGluIGNvbXBpbGF0aW9uLmFzc2V0cylcbiAgICAgICAgICAgICAgICBpZiAoY29tcGlsYXRpb24uYXNzZXRzLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICBhc3NldFJlcXVlc3RcbiAgICAgICAgICAgICAgICApICYmIGFzc2V0UmVxdWVzdC5yZXBsYWNlKC8oW14/XSspXFw/LiokLywgJyQxJykuZW5kc1dpdGgoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMuamF2YVNjcmlwdC5vdXRwdXRFeHRlbnNpb25cbiAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzb3VyY2U6c3RyaW5nID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uLmFzc2V0c1thc3NldFJlcXVlc3RdLnNvdXJjZSgpXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudDpzdHJpbmcgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbC5hbGlhc2VzXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLmFsaWFzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhhc093blByb3BlcnR5KHJlcGxhY2VtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlID0gc291cmNlLnJlcGxhY2UobmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcocmVxdWlyZVxcXFwoKVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb29scy5zdHJpbmdFc2NhcGVSZWd1bGFyRXhwcmVzc2lvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5pbmplY3Rpb24uZXh0ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFsaWFzZXNbcmVwbGFjZW1lbnRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsgJ1wiKFxcXFwpKScsICdnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLCBgJDEnJHtyZXBsYWNlbWVudH0nJDJgKS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cCgnKGRlZmluZVxcXFwoXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb29scy5zdHJpbmdFc2NhcGVSZWd1bGFyRXhwcmVzc2lvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bmRsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsgJ1wiLCBcXFxcWy4qKVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9vbHMuc3RyaW5nRXNjYXBlUmVndWxhckV4cHJlc3Npb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmluamVjdGlvbi5leHRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFsaWFzZXNbcmVwbGFjZW1lbnRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArICdcIiguKlxcXFxdLCBmYWN0b3J5XFxcXCk7KSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksIGAkMScke3JlcGxhY2VtZW50fSckMmApXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZShuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcocm9vdFxcXFxbKVwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9vbHMuc3RyaW5nRXNjYXBlUmVndWxhckV4cHJlc3Npb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidW5kbGVOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArICdcIihcXFxcXSA9ICknXG4gICAgICAgICAgICAgICAgICAgICAgICApLCBgJDEnYCArIFRvb2xzLnN0cmluZ0NvbnZlcnRUb1ZhbGlkVmFyaWFibGVOYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bmRsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKyBgJyQyYClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uLmFzc2V0c1thc3NldFJlcXVlc3RdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgV2VicGFja1Jhd1NvdXJjZShzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH0pfSlcbi8vIC8vIGVuZHJlZ2lvblxuLy8gLy8gcmVnaW9uIGFkZCBhdXRvbWF0aWMgaW1hZ2UgY29tcHJlc3Npb25cbi8vIE5PVEU6IFRoaXMgcGx1Z2luIHNob3VsZCBiZSBsb2FkZWQgYXQgbGFzdCB0byBlbnN1cmUgdGhhdCBhbGwgZW1pdHRlZCBpbWFnZXNcbi8vIHJhbiB0aHJvdWdoLlxucGx1Z2luSW5zdGFuY2VzLnB1c2gobmV3IHBsdWdpbnMuSW1hZ2VtaW4oXG4gICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmltYWdlLmNvbnRlbnQpKVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvLyByZWdpb24gY29udGV4dCByZXBsYWNlbWVudHNcbmZvciAoXG4gICAgY29uc3QgY29udGV4dFJlcGxhY2VtZW50OkFycmF5PHN0cmluZz4gb2ZcbiAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5yZXBsYWNlbWVudHMuY29udGV4dFxuKVxuICAgIHBsdWdpbkluc3RhbmNlcy5wdXNoKG5ldyB3ZWJwYWNrLkNvbnRleHRSZXBsYWNlbWVudFBsdWdpbihcbiAgICAgICAgLi4uY29udGV4dFJlcGxhY2VtZW50Lm1hcCgodmFsdWU6c3RyaW5nKTphbnkgPT4gKG5ldyBGdW5jdGlvbihcbiAgICAgICAgICAgICdjb25maWd1cmF0aW9uJywgJ19fZGlybmFtZScsICdfX2ZpbGVuYW1lJywgYHJldHVybiAke3ZhbHVlfWBcbiAgICAgICAgKSkoY29uZmlndXJhdGlvbiwgX19kaXJuYW1lLCBfX2ZpbGVuYW1lKSkpKVxuLy8gLy8gZW5kcmVnaW9uXG4vLyAvIGVuZHJlZ2lvblxuLy8gLyByZWdpb24gbG9hZGVyIGhlbHBlclxuY29uc3QgcmVqZWN0RmlsZVBhdGhJbkRlcGVuZGVuY2llczpGdW5jdGlvbiA9IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4ge1xuICAgIGZpbGVQYXRoID0gSGVscGVyLnN0cmlwTG9hZGVyKGZpbGVQYXRoKVxuICAgIHJldHVybiBIZWxwZXIuaXNGaWxlUGF0aEluTG9jYXRpb24oXG4gICAgICAgIGZpbGVQYXRoLCBjb25maWd1cmF0aW9uLnBhdGguaWdub3JlLmNvbmNhdChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5sb2FkZXIuZGlyZWN0b3J5TmFtZXNcbiAgICAgICAgKS5tYXAoKGZpbGVQYXRoOnN0cmluZyk6c3RyaW5nID0+IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LCBmaWxlUGF0aClcbiAgICAgICAgKS5maWx0ZXIoKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PlxuICAgICAgICAgICAgIWNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LnN0YXJ0c1dpdGgoZmlsZVBhdGgpKSlcbn1cbmNvbnN0IGxvYWRlcjpPYmplY3QgPSB7fVxuY29uc3QgZXZhbHVhdGU6RnVuY3Rpb24gPSAoY29kZTpzdHJpbmcsIGZpbGVQYXRoOnN0cmluZyk6YW55ID0+IChuZXcgRnVuY3Rpb24oXG4gICAgJ2NvbmZpZ3VyYXRpb24nLCAnZmlsZVBhdGgnLCAnbG9hZGVyJywgJ3JlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMnLFxuICAgIGByZXR1cm4gJHtjb2RlfWBcbikpKGNvbmZpZ3VyYXRpb24sIGZpbGVQYXRoLCBsb2FkZXIsIHJlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMpXG5Ub29scy5leHRlbmRPYmplY3QobG9hZGVyLCB7XG4gICAgLy8gQ29udmVydCB0byBjb21wYXRpYmxlIG5hdGl2ZSB3ZWIgdHlwZXMuXG4gICAgLy8gcmVnaW9uIGdlbmVyaWMgdGVtcGxhdGVcbiAgICBlanM6IHtcbiAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiBIZWxwZXIubm9ybWFsaXplUGF0aHMoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmZpbGVzLmh0bWwuY29uY2F0KFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUxcbiAgICAgICAgICAgICkubWFwKChodG1sQ29uZmlndXJhdGlvbjpIVE1MQ29uZmlndXJhdGlvbik6c3RyaW5nID0+XG4gICAgICAgICAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUuZmlsZVBhdGgpXG4gICAgICAgICkuaW5jbHVkZXMoZmlsZVBhdGgpIHx8ICgoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuZWpzLmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgKSA/IGZhbHNlIDogZXZhbHVhdGUoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuZWpzLmV4Y2x1ZGUsIGZpbGVQYXRoKSksXG4gICAgICAgIGluY2x1ZGU6IEhlbHBlci5ub3JtYWxpemVQYXRocyhbXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmJhc2VcbiAgICAgICAgXS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUubG9jYXRpb25zLmRpcmVjdG9yeVBhdGhzKSksXG4gICAgICAgIHRlc3Q6IC9eKD8hLitcXC5odG1sXFwuZWpzJCkuK1xcLmVqcyQvaSxcbiAgICAgICAgdXNlOiBbXG4gICAgICAgICAgICB7bG9hZGVyOiAnZmlsZT9uYW1lPVtwYXRoXVtuYW1lXScgKyAoQm9vbGVhbihcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuZWpzLm9wdGlvbnMuY29tcGlsZVN0ZXBzICUgMlxuICAgICAgICAgICAgKSA/ICcuanMnIDogJycpICsgYD8ke2NvbmZpZ3VyYXRpb24uaGFzaEFsZ29yaXRobX09W2hhc2hdYH0sXG4gICAgICAgICAgICB7bG9hZGVyOiAnZXh0cmFjdCd9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmVqcy5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmVqcy5vcHRpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgIF0uY29uY2F0KGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5lanMuYWRkaXRpb25hbC5tYXAoXG4gICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gc2NyaXB0XG4gICAgc2NyaXB0OiB7XG4gICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmphdmFTY3JpcHQuZXhjbHVkZSA9PT0gbnVsbFxuICAgICAgICApID8gcmVqZWN0RmlsZVBhdGhJbkRlcGVuZGVuY2llcyhmaWxlUGF0aCkgOiBldmFsdWF0ZShcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5qYXZhU2NyaXB0LmV4Y2x1ZGUsXG4gICAgICAgICAgICBmaWxlUGF0aCksXG4gICAgICAgIGluY2x1ZGU6IEhlbHBlci5ub3JtYWxpemVQYXRocyhbXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmphdmFTY3JpcHRcbiAgICAgICAgXS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUubG9jYXRpb25zLmRpcmVjdG9yeVBhdGhzKSksXG4gICAgICAgIHRlc3Q6IC9cXC5qcyg/OlxcPy4qKT8kL2ksXG4gICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmphdmFTY3JpcHRcbiAgICAgICAgICAgICAgICAubG9hZGVyLFxuICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmphdmFTY3JpcHRcbiAgICAgICAgICAgICAgICAub3B0aW9uc1xuICAgICAgICB9XS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmphdmFTY3JpcHQuYWRkaXRpb25hbC5tYXAoXG4gICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gaHRtbCB0ZW1wbGF0ZVxuICAgIGh0bWw6IHtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBvbmx5IGZvciB0aGUgbWFpbiBlbnRyeSB0ZW1wbGF0ZS5cbiAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgdGVzdDogbmV3IFJlZ0V4cCgnXicgKyBUb29scy5zdHJpbmdFc2NhcGVSZWd1bGFyRXhwcmVzc2lvbnMoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5kZWZhdWx0SFRNTC50ZW1wbGF0ZS5maWxlUGF0aFxuICAgICAgICAgICAgKSArICcoPzpcXFxcPy4qKT8kJyksXG4gICAgICAgICAgICB1c2U6IGNvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUwudGVtcGxhdGUudXNlXG4gICAgICAgIH0sXG4gICAgICAgIGVqczoge1xuICAgICAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiBIZWxwZXIubm9ybWFsaXplUGF0aHMoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5odG1sLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5kZWZhdWx0SFRNTFxuICAgICAgICAgICAgICAgICkubWFwKChodG1sQ29uZmlndXJhdGlvbjpIVE1MQ29uZmlndXJhdGlvbik6c3RyaW5nID0+XG4gICAgICAgICAgICAgICAgICAgIGh0bWxDb25maWd1cmF0aW9uLnRlbXBsYXRlLmZpbGVQYXRoKVxuICAgICAgICAgICAgKS5pbmNsdWRlcyhmaWxlUGF0aCkgfHwgKChcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5leGNsdWRlID09PSBudWxsXG4gICAgICAgICAgICApID8gZmFsc2UgOiBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5leGNsdWRlLCBmaWxlUGF0aCkpLFxuICAgICAgICAgICAgaW5jbHVkZTogY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC50ZW1wbGF0ZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC5odG1sXFwuZWpzKD86XFw/LiopPyQvaSxcbiAgICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgICAgIHtsb2FkZXI6ICdmaWxlP25hbWU9JyArIHBhdGguam9pbihwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0LmJhc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYXNzZXQudGVtcGxhdGVcbiAgICAgICAgICAgICAgICApLCAnW25hbWVdJyArIChCb29sZWFuKFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5vcHRpb25zLmNvbXBpbGVTdGVwc1xuICAgICAgICAgICAgICAgICAgICAlIDJcbiAgICAgICAgICAgICAgICApID8gJy5qcycgOiAnJykgKyBgPyR7Y29uZmlndXJhdGlvbi5oYXNoQWxnb3JpdGhtfT1baGFzaF1gKX1cbiAgICAgICAgICAgIF0uY29uY2F0KChCb29sZWFuKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5odG1sLm9wdGlvbnMuY29tcGlsZVN0ZXBzICUgMlxuICAgICAgICAgICAgKSA/IFtdIDogW1xuICAgICAgICAgICAgICAgIHtsb2FkZXI6ICdleHRyYWN0J30sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwubG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5odG1sLm9wdGlvbnNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKSwge1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmh0bWwubG9hZGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnByZXByb2Nlc3Nvci5odG1sLm9wdGlvbnNcbiAgICAgICAgICAgIH0pLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuaHRtbC5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgICAgIH0sXG4gICAgICAgIGh0bWw6IHtcbiAgICAgICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gSGVscGVyLm5vcm1hbGl6ZVBhdGhzKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbC5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUxcbiAgICAgICAgICAgICAgICApLm1hcCgoaHRtbENvbmZpZ3VyYXRpb246SFRNTENvbmZpZ3VyYXRpb24pOnN0cmluZyA9PlxuICAgICAgICAgICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aClcbiAgICAgICAgICAgICkuaW5jbHVkZXMoZmlsZVBhdGgpIHx8ICgoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUuaHRtbC5leGNsdWRlID09PSBudWxsXG4gICAgICAgICAgICApID8gdHJ1ZSA6IGV2YWx1YXRlKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwuZXhjbHVkZSwgZmlsZVBhdGgpKSxcbiAgICAgICAgICAgIGluY2x1ZGU6IGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQudGVtcGxhdGUsXG4gICAgICAgICAgICB0ZXN0OiAvXFwuaHRtbCg/OlxcPy4qKT8kL2ksXG4gICAgICAgICAgICB1c2U6IFtcbiAgICAgICAgICAgICAgICB7bG9hZGVyOiAnZmlsZT9uYW1lPScgKyBwYXRoLmpvaW4ocGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmFzc2V0LnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgKSwgYFtuYW1lXS5bZXh0XT8ke2NvbmZpZ3VyYXRpb24uaGFzaEFsZ29yaXRobX09W2hhc2hdYCl9LFxuICAgICAgICAgICAgICAgIHtsb2FkZXI6ICdleHRyYWN0J30sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLmh0bWwubG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5odG1sLm9wdGlvbnNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5odG1sLmFkZGl0aW9uYWwubWFwKGV2YWx1YXRlKSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gZW5kcmVnaW9uXG4gICAgLy8gTG9hZCBkZXBlbmRlbmNpZXMuXG4gICAgLy8gcmVnaW9uIHN0eWxlXG4gICAgc3R5bGU6IHtcbiAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PiAoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5jYXNjYWRpbmdTdHlsZVNoZWV0LmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgKSA/IHJlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMoZmlsZVBhdGgpIDogZXZhbHVhdGUoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5jYXNjYWRpbmdTdHlsZVNoZWV0LmV4Y2x1ZGUsIGZpbGVQYXRoXG4gICAgICAgICksXG4gICAgICAgIGluY2x1ZGU6IEhlbHBlci5ub3JtYWxpemVQYXRocyhbXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmNhc2NhZGluZ1N0eWxlU2hlZXRcbiAgICAgICAgXS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUubG9jYXRpb25zLmRpcmVjdG9yeVBhdGhzKSksXG4gICAgICAgIHRlc3Q6IC9cXC5zP2Nzcyg/OlxcPy4qKT8kL2ksXG4gICAgICAgIHVzZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUuc3R5bGUubG9hZGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLnN0eWxlLm9wdGlvbnNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBjb25maWd1cmF0aW9uLm1vZHVsZS5jYXNjYWRpbmdTdHlsZVNoZWV0LmxvYWRlcixcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBjb25maWd1cmF0aW9uLm1vZHVsZS5jYXNjYWRpbmdTdHlsZVNoZWV0Lm9wdGlvbnNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbG9hZGVyOiBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuY2FzY2FkaW5nU3R5bGVTaGVldFxuICAgICAgICAgICAgICAgICAgICAubG9hZGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkZW50OiAncG9zdGNzcycsXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6ICgpOkFycmF5PE9iamVjdD4gPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGNzc0ltcG9ydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRGVwZW5kZW5jeVRvOiB3ZWJwYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rjc3NDU1NuZXh0KHticm93c2VyczogJz4gMCUnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PVEU6IENoZWNraW5nIHBhdGggZG9lc24ndCB3b3JrIGlmIGZvbnRzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZWQgaW4gbGlicmFyaWVzIHByb3ZpZGVkIGluIGFub3RoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiB0aGFuIHRoZSBwcm9qZWN0IGl0c2VsZiBsaWtlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm9kZV9tb2R1bGVzXCIgZm9sZGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rjc3NGb250UGF0aCh7Y2hlY2tQYXRoOiBmYWxzZX0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGNzc1VSTCh7ZmlsdGVyOiAnJywgbWF4U2l6ZTogMH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGNzc1Nwcml0ZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckJ5OiAoKTpQcm9taXNlPG51bGw+ID0+IG5ldyBQcm9taXNlKChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTpGdW5jdGlvbiwgcmVqZWN0OkZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTpQcm9taXNlPG51bGw+ID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmltYWdlID8gcmVzb2x2ZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvb2tzOiB7b25TYXZlU3ByaXRlc2hlZXQ6IChpbWFnZTpPYmplY3QpOnN0cmluZyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmpvaW4oaW1hZ2Uuc3ByaXRlUGF0aCwgcGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYXNzZXQuaW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmZpbGVzLmNvbXBvc2UuaW1hZ2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzaGVldFBhdGg6IGNvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhc2NhZGluZ1N0eWxlU2hlZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlUGF0aDogY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5pbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUucHJlcHJvY2Vzc29yLmNhc2NhZGluZ1N0eWxlU2hlZXQub3B0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgXS5jb25jYXQoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5wcmVwcm9jZXNzb3IuY2FzY2FkaW5nU3R5bGVTaGVldC5hZGRpdGlvbmFsXG4gICAgICAgICAgICAgICAgLm1hcChldmFsdWF0ZSkpXG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyBPcHRpbWl6ZSBsb2FkZWQgYXNzZXRzLlxuICAgIC8vIHJlZ2lvbiBmb250XG4gICAgZm9udDoge1xuICAgICAgICBlb3Q6IHtcbiAgICAgICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LmVvdC5leGNsdWRlID09PSBudWxsXG4gICAgICAgICAgICApID8gZmFsc2UgOiBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC5lb3QuZXhjbHVkZSwgZmlsZVBhdGgpLFxuICAgICAgICAgICAgaW5jbHVkZTogY29uZmlndXJhdGlvbi5wYXRoLmJhc2UsXG4gICAgICAgICAgICB0ZXN0OiAvXFwuZW90KD86XFw/LiopPyQvaSxcbiAgICAgICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LmVvdC5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQuZW90Lm9wdGlvbnNcbiAgICAgICAgICAgIH1dLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC5lb3QuYWRkaXRpb25hbC5tYXAoXG4gICAgICAgICAgICAgICAgZXZhbHVhdGUpKVxuICAgICAgICB9LFxuICAgICAgICBzdmc6IHtcbiAgICAgICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnN2Zy5leGNsdWRlID09PSBudWxsXG4gICAgICAgICAgICApID8gZmFsc2UgOiBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC5zdmcuZXhjbHVkZSwgZmlsZVBhdGgpLFxuICAgICAgICAgICAgaW5jbHVkZTogY29uZmlndXJhdGlvbi5wYXRoLmJhc2UsXG4gICAgICAgICAgICB0ZXN0OiAvXFwuc3ZnKD86XFw/LiopPyQvaSxcbiAgICAgICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnN2Zy5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQuc3ZnLm9wdGlvbnNcbiAgICAgICAgICAgIH1dLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC5zdmcuYWRkaXRpb25hbC5tYXAoXG4gICAgICAgICAgICAgICAgZXZhbHVhdGUpKVxuICAgICAgICB9LFxuICAgICAgICB0dGY6IHtcbiAgICAgICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnR0Zi5leGNsdWRlID09PSBudWxsXG4gICAgICAgICAgICApID8gZmFsc2UgOiBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC50dGYuZXhjbHVkZSwgZmlsZVBhdGgpLFxuICAgICAgICAgICAgaW5jbHVkZTogY29uZmlndXJhdGlvbi5wYXRoLmJhc2UsXG4gICAgICAgICAgICB0ZXN0OiAvXFwudHRmKD86XFw/LiopPyQvaSxcbiAgICAgICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgICAgICBsb2FkZXI6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LnR0Zi5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQudHRmLm9wdGlvbnNcbiAgICAgICAgICAgIH1dLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC50dGYuYWRkaXRpb25hbC5tYXAoXG4gICAgICAgICAgICAgICAgZXZhbHVhdGUpKVxuICAgICAgICB9LFxuICAgICAgICB3b2ZmOiB7XG4gICAgICAgICAgICBleGNsdWRlOiAoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+IChcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuZm9udC53b2ZmLmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgICAgICkgPyBmYWxzZSA6IGV2YWx1YXRlKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5mb250LndvZmYuZXhjbHVkZSwgZmlsZVBhdGhcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguYmFzZSxcbiAgICAgICAgICAgIHRlc3Q6IC9cXC53b2ZmMj8oPzpcXD8uKik/JC9pLFxuICAgICAgICAgICAgdXNlOiBbe1xuICAgICAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5sb2FkZXIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5vcHRpb25zXG4gICAgICAgICAgICB9XS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmZvbnQud29mZi5hZGRpdGlvbmFsLm1hcChcbiAgICAgICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBpbWFnZVxuICAgIGltYWdlOiB7XG4gICAgICAgIGV4Y2x1ZGU6IChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT4gKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmltYWdlLmV4Y2x1ZGUgPT09IG51bGxcbiAgICAgICAgKSA/IHJlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMoZmlsZVBhdGgpIDogZXZhbHVhdGUoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuaW1hZ2UuZXhjbHVkZSwgZmlsZVBhdGgpLFxuICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmltYWdlLFxuICAgICAgICB0ZXN0OiAvXFwuKD86cG5nfGpwZ3xpY298Z2lmKSg/OlxcPy4qKT8kL2ksXG4gICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmltYWdlLmxvYWRlcixcbiAgICAgICAgICAgIG9wdGlvbnM6IGNvbmZpZ3VyYXRpb24ubW9kdWxlLm9wdGltaXplci5pbWFnZS5maWxlXG4gICAgICAgIH1dLmNvbmNhdChjb25maWd1cmF0aW9uLm1vZHVsZS5vcHRpbWl6ZXIuaW1hZ2UuYWRkaXRpb25hbC5tYXAoXG4gICAgICAgICAgICBldmFsdWF0ZSkpXG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gZGF0YVxuICAgIGRhdGE6IHtcbiAgICAgICAgZXhjbHVkZTogKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PlxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5leHRlbnNpb25zLmZpbGUuaW50ZXJuYWwuaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgcGF0aC5leHRuYW1lKEhlbHBlci5zdHJpcExvYWRlcihmaWxlUGF0aCkpXG4gICAgICAgICAgICApIHx8ICgoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEuZXhjbHVkZSA9PT0gbnVsbFxuICAgICAgICAgICAgKSA/IHJlamVjdEZpbGVQYXRoSW5EZXBlbmRlbmNpZXMoZmlsZVBhdGgpIDogZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEuZXhjbHVkZSwgZmlsZVBhdGgpXG4gICAgICAgICAgICApLFxuICAgICAgICBpbmNsdWRlOiBjb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmRhdGEsXG4gICAgICAgIHRlc3Q6IC8uKy8sXG4gICAgICAgIHVzZTogW3tcbiAgICAgICAgICAgIGxvYWRlcjogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEubG9hZGVyLFxuICAgICAgICAgICAgb3B0aW9uczogY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEub3B0aW9uc1xuICAgICAgICB9XS5jb25jYXQoY29uZmlndXJhdGlvbi5tb2R1bGUub3B0aW1pemVyLmRhdGEuYWRkaXRpb25hbC5tYXAoZXZhbHVhdGUpKVxuICAgIH1cbiAgICAvLyBlbmRyZWdpb25cbn0pXG5pZiAoY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmNhc2NhZGluZ1N0eWxlU2hlZXQpIHtcbiAgICBsb2FkZXIuc3R5bGUudXNlLnNoaWZ0KClcbiAgICBsb2FkZXIuc3R5bGUudXNlID0gcGx1Z2lucy5FeHRyYWN0VGV4dC5leHRyYWN0KHt1c2U6IGxvYWRlci5zdHlsZS51c2V9KVxufVxuLy8gLyBlbmRyZWdpb25cbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGNvbmZpZ3VyYXRpb25cbmNvbnN0IHdlYnBhY2tDb25maWd1cmF0aW9uOldlYnBhY2tDb25maWd1cmF0aW9uID0ge1xuICAgIGJhaWw6IHRydWUsXG4gICAgY2FjaGU6IGNvbmZpZ3VyYXRpb24uY2FjaGUubWFpbixcbiAgICBjb250ZXh0OiBjb25maWd1cmF0aW9uLnBhdGguY29udGV4dCxcbiAgICBkZXZ0b29sOiBjb25maWd1cmF0aW9uLmRldmVsb3BtZW50LnRvb2wsXG4gICAgZGV2U2VydmVyOiBjb25maWd1cmF0aW9uLmRldmVsb3BtZW50LnNlcnZlcixcbiAgICAvLyByZWdpb24gaW5wdXRcbiAgICBlbnRyeTogY29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZCxcbiAgICBleHRlcm5hbHM6IGNvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmV4dGVybmFsLm1vZHVsZXMsXG4gICAgcmVzb2x2ZToge1xuICAgICAgICBhbGlhczogY29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcyxcbiAgICAgICAgYWxpYXNGaWVsZHM6IGNvbmZpZ3VyYXRpb24ucGFja2FnZS5hbGlhc1Byb3BlcnR5TmFtZXMsXG4gICAgICAgIGV4dGVuc2lvbnM6IGNvbmZpZ3VyYXRpb24uZXh0ZW5zaW9ucy5maWxlLmludGVybmFsLFxuICAgICAgICBtYWluRmllbGRzOiBjb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5wcm9wZXJ0eU5hbWVzLFxuICAgICAgICBtYWluRmlsZXM6IGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLmZpbGVOYW1lcyxcbiAgICAgICAgbW9kdWxlRXh0ZW5zaW9uczogY29uZmlndXJhdGlvbi5leHRlbnNpb25zLm1vZHVsZSxcbiAgICAgICAgbW9kdWxlczogSGVscGVyLm5vcm1hbGl6ZVBhdGhzKGNvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzKSxcbiAgICAgICAgdW5zYWZlQ2FjaGU6IGNvbmZpZ3VyYXRpb24uY2FjaGUudW5zYWZlXG4gICAgfSxcbiAgICByZXNvbHZlTG9hZGVyOiB7XG4gICAgICAgIGFsaWFzOiBjb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzLFxuICAgICAgICBhbGlhc0ZpZWxkczogY29uZmlndXJhdGlvbi5wYWNrYWdlLmFsaWFzUHJvcGVydHlOYW1lcyxcbiAgICAgICAgZXh0ZW5zaW9uczogY29uZmlndXJhdGlvbi5sb2FkZXIuZXh0ZW5zaW9ucy5maWxlLFxuICAgICAgICBtYWluRmllbGRzOiBjb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5wcm9wZXJ0eU5hbWVzLFxuICAgICAgICBtYWluRmlsZXM6IGNvbmZpZ3VyYXRpb24ucGFja2FnZS5tYWluLmZpbGVOYW1lcyxcbiAgICAgICAgbW9kdWxlRXh0ZW5zaW9uczogY29uZmlndXJhdGlvbi5sb2FkZXIuZXh0ZW5zaW9ucy5tb2R1bGUsXG4gICAgICAgIG1vZHVsZXM6IGNvbmZpZ3VyYXRpb24ubG9hZGVyLmRpcmVjdG9yeU5hbWVzXG4gICAgfSxcbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gb3V0cHV0XG4gICAgb3V0cHV0OiB7XG4gICAgICAgIGZpbGVuYW1lOiBwYXRoLnJlbGF0aXZlKFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5maWxlcy5jb21wb3NlLmphdmFTY3JpcHQpLFxuICAgICAgICBoYXNoRnVuY3Rpb246IGNvbmZpZ3VyYXRpb24uaGFzaEFsZ29yaXRobSxcbiAgICAgICAgbGlicmFyeTogbGlicmFyeU5hbWUsXG4gICAgICAgIGxpYnJhcnlUYXJnZXQ6IChcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXSA9PT0gJ2J1aWxkRExMJ1xuICAgICAgICApID8gJ3ZhcicgOiBjb25maWd1cmF0aW9uLmV4cG9ydEZvcm1hdC5zZWxmLFxuICAgICAgICBwYXRoOiBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2UsXG4gICAgICAgIHB1YmxpY1BhdGg6IGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQucHVibGljLFxuICAgICAgICBwYXRoaW5mbzogY29uZmlndXJhdGlvbi5kZWJ1ZyxcbiAgICAgICAgdW1kTmFtZWREZWZpbmU6IHRydWVcbiAgICB9LFxuICAgIHBlcmZvcm1hbmNlOiBjb25maWd1cmF0aW9uLnBlcmZvcm1hbmNlSGludHMsXG4gICAgdGFyZ2V0OiBjb25maWd1cmF0aW9uLnRhcmdldFRlY2hub2xvZ3ksXG4gICAgLy8gZW5kcmVnaW9uXG4gICAgbW9kdWxlOiB7XG4gICAgICAgIHJ1bGVzOiBjb25maWd1cmF0aW9uLm1vZHVsZS5hZGRpdGlvbmFsLm1hcCgoXG4gICAgICAgICAgICBsb2FkZXJDb25maWd1cmF0aW9uOlBsYWluT2JqZWN0XG4gICAgICAgICk6UGxhaW5PYmplY3QgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBleGNsdWRlOiAoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+IGV2YWx1YXRlKFxuICAgICAgICAgICAgICAgICAgICBsb2FkZXJDb25maWd1cmF0aW9uLmV4Y2x1ZGUgfHwgJ2ZhbHNlJywgZmlsZVBhdGgpLFxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IGxvYWRlckNvbmZpZ3VyYXRpb24uaW5jbHVkZSAmJiBldmFsdWF0ZShcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyQ29uZmlndXJhdGlvbi5pbmNsdWRlLCBjb25maWd1cmF0aW9uLnBhdGguY29udGV4dFxuICAgICAgICAgICAgICAgICkgfHwgY29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5iYXNlLFxuICAgICAgICAgICAgICAgIHRlc3Q6IG5ldyBSZWdFeHAoZXZhbHVhdGUoXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlckNvbmZpZ3VyYXRpb24udGVzdCwgY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQpKSxcbiAgICAgICAgICAgICAgICB1c2U6IGV2YWx1YXRlKGxvYWRlckNvbmZpZ3VyYXRpb24udXNlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jb25jYXQoW1xuICAgICAgICAgICAgbG9hZGVyLmVqcyxcbiAgICAgICAgICAgIGxvYWRlci5zY3JpcHQsXG4gICAgICAgICAgICBsb2FkZXIuaHRtbC5tYWluLCBsb2FkZXIuaHRtbC5lanMsIGxvYWRlci5odG1sLmh0bWwsXG4gICAgICAgICAgICBsb2FkZXIuc3R5bGUsXG4gICAgICAgICAgICBsb2FkZXIuZm9udC5lb3QsIGxvYWRlci5mb250LnN2ZywgbG9hZGVyLmZvbnQudHRmLFxuICAgICAgICAgICAgbG9hZGVyLmZvbnQud29mZixcbiAgICAgICAgICAgIGxvYWRlci5pbWFnZSxcbiAgICAgICAgICAgIGxvYWRlci5kYXRhXG4gICAgICAgIF0pXG4gICAgfSxcbiAgICBwbHVnaW5zOiBwbHVnaW5JbnN0YW5jZXNcbn1cbmlmICghQXJyYXkuaXNBcnJheShcbiAgICBjb25maWd1cmF0aW9uLm1vZHVsZS5za2lwUGFyc2VSZWd1bGFyRXhwcmVzc2lvbnNcbikgfHwgY29uZmlndXJhdGlvbi5tb2R1bGUuc2tpcFBhcnNlUmVndWxhckV4cHJlc3Npb25zLmxlbmd0aClcbiAgICB3ZWJwYWNrQ29uZmlndXJhdGlvbi5tb2R1bGUubm9QYXJzZSA9XG4gICAgICAgIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnNraXBQYXJzZVJlZ3VsYXJFeHByZXNzaW9uc1xuaWYgKGNvbmZpZ3VyYXRpb24uc2hvd0NvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zb2xlLmluZm8oJ1VzaW5nIGludGVybmFsIGNvbmZpZ3VyYXRpb246JywgdXRpbC5pbnNwZWN0KGNvbmZpZ3VyYXRpb24sIHtcbiAgICAgICAgZGVwdGg6IG51bGx9KSlcbiAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJylcbiAgICBjb25zb2xlLmluZm8oJ1VzaW5nIHdlYnBhY2sgY29uZmlndXJhdGlvbjonLCB1dGlsLmluc3BlY3QoXG4gICAgICAgIHdlYnBhY2tDb25maWd1cmF0aW9uLCB7ZGVwdGg6IG51bGx9KSlcbn1cbi8vIGVuZHJlZ2lvblxuZXhwb3J0IGRlZmF1bHQgd2VicGFja0NvbmZpZ3VyYXRpb25cbi8vIHJlZ2lvbiB2aW0gbW9kbGluZVxuLy8gdmltOiBzZXQgdGFic3RvcD00IHNoaWZ0d2lkdGg9NCBleHBhbmR0YWI6XG4vLyB2aW06IGZvbGRtZXRob2Q9bWFya2VyIGZvbGRtYXJrZXI9cmVnaW9uLGVuZHJlZ2lvbjpcbi8vIGVuZHJlZ2lvblxuIl19