#!/usr/bin/env node
'use strict';var _promise=require('babel-runtime/core-js/promise'),_promise2=_interopRequireDefault(_promise),_asyncToGenerator2=require('babel-runtime/helpers/asyncToGenerator'),_asyncToGenerator3=_interopRequireDefault(_asyncToGenerator2),_keys=require('babel-runtime/core-js/object/keys'),_keys2=_interopRequireDefault(_keys),_babiliWebpackPlugin=require('babili-webpack-plugin'),_babiliWebpackPlugin2=_interopRequireDefault(_babiliWebpackPlugin),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_jsdom=require('jsdom'),dom=_interopRequireWildcard(_jsdom),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path),_postcssCssnext=require('postcss-cssnext'),_postcssCssnext2=_interopRequireDefault(_postcssCssnext),_postcssFontpath=require('postcss-fontpath'),_postcssFontpath2=_interopRequireDefault(_postcssFontpath),_postcssImport=require('postcss-import'),_postcssImport2=_interopRequireDefault(_postcssImport),_postcssSprites=require('postcss-sprites'),_postcssSprites2=_interopRequireDefault(_postcssSprites),_postcssUrl=require('postcss-url'),_postcssUrl2=_interopRequireDefault(_postcssUrl),_util=require('util'),_util2=_interopRequireDefault(_util),_webpack=require('webpack'),_webpack2=_interopRequireDefault(_webpack),_webpackSources=require('webpack-sources'),_ejsLoader=require('./ejsLoader.compiled'),_ejsLoader2=_interopRequireDefault(_ejsLoader),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper),_htmlLoader=require('html-loader'),_htmlLoader2=_interopRequireDefault(_htmlLoader),_loaderUtils=require('loader-utils'),_loaderUtils2=_interopRequireDefault(_loaderUtils);Object.defineProperty(exports,'__esModule',{value:!0});function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}const plugins=require('webpack-load-plugins')();plugins.HTML=plugins.html,plugins.ExtractText=plugins.extractText,plugins.AddAssetHTMLPlugin=require('add-asset-html-webpack-plugin'),plugins.OpenBrowser=plugins.openBrowser,plugins.Favicon=require('favicons-webpack-plugin'),plugins.Imagemin=require('imagemin-webpack-plugin').default,plugins.Offline=require('offline-plugin'),require.cache[require.resolve('html-loader')].exports=function(...a){return _clientnode2.default.extendObject(!0,this.options,module,this.options),_htmlLoader2.default.call(this,...a)};const loaderUtilsIsUrlRequestBackup=_loaderUtils2.default.isUrlRequest;require.cache[require.resolve('loader-utils')].exports.isUrlRequest=(a,...b)=>{return!a.match(/^[a-z]+:.+/)&&loaderUtilsIsUrlRequestBackup.apply(_loaderUtils2.default,[a].concat(b))};let libraryName;'libraryName'in _configurator2.default&&_configurator2.default.libraryName?libraryName=_configurator2.default.libraryName:1<(0,_keys2.default)(_configurator2.default.injection.internal.normalized).length?libraryName='[name]':(libraryName=_configurator2.default.name,'var'===_configurator2.default.exportFormat.self&&(libraryName=_clientnode2.default.stringConvertToValidVariableName(libraryName)));const pluginInstances=[new _webpack2.default.NoEmitOnErrorsPlugin,new _webpack2.default.optimize.OccurrenceOrderPlugin(!0)];_configurator2.default.debug&&pluginInstances.push(new _webpack2.default.NamedModulesPlugin);for(const a of _configurator2.default.injection.ignorePattern)pluginInstances.push(new _webpack2.default.IgnorePlugin(new RegExp(a)));for(const a in _configurator2.default.module.replacements.normal)_configurator2.default.module.replacements.normal.hasOwnProperty(a)&&pluginInstances.push(new _webpack2.default.NormalModuleReplacementPlugin(new RegExp(a),_configurator2.default.module.replacements.normal[a]));let htmlAvailable=!1;if('buildDLL'!==_configurator2.default.givenCommandLineArguments[2])for(let a of _configurator2.default.files.html)_clientnode2.default.isFileSync(a.template.filePath)&&(pluginInstances.push(new plugins.HTML(_clientnode2.default.extendObject({},a,{template:a.template.request}))),htmlAvailable=!0);if(htmlAvailable&&_configurator2.default.favicon&&_clientnode2.default.isFileSync(_configurator2.default.favicon.logo)&&pluginInstances.push(new plugins.Favicon(_configurator2.default.favicon)),htmlAvailable&&_configurator2.default.offline&&(!['serve','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&(_configurator2.default.inPlace.cascadingStyleSheet&&(0,_keys2.default)(_configurator2.default.inPlace.cascadingStyleSheet).length&&_configurator2.default.offline.excludes.push(_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.path.target.asset.cascadingStyleSheet)+`*.css?${_configurator2.default.hashAlgorithm}=*`),_configurator2.default.inPlace.javaScript&&(0,_keys2.default)(_configurator2.default.inPlace.javaScript).length&&_configurator2.default.offline.excludes.push(_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.path.target.asset.javaScript)+`*.js?${_configurator2.default.hashAlgorithm}=*`)),pluginInstances.push(new plugins.Offline(_configurator2.default.offline))),_configurator2.default.development.openBrowser&&htmlAvailable&&['serve','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&pluginInstances.push(new plugins.OpenBrowser(_configurator2.default.development.openBrowser)),_configurator2.default.build.definitions&&pluginInstances.push(new _webpack2.default.DefinePlugin(_configurator2.default.build.definitions)),_configurator2.default.module.provide&&pluginInstances.push(new _webpack2.default.ProvidePlugin(_configurator2.default.module.provide)),_configurator2.default.module.optimizer.babili&&pluginInstances.push(new _babiliWebpackPlugin2.default(_configurator2.default.module.optimizer.babili)),pluginInstances.push({apply:(a)=>{a.plugin('emit',(b,c)=>{for(const d in b.assets)if(b.assets.hasOwnProperty(d)){const e=d.replace(/\?[^?]+$/,''),f=_helper2.default.determineAssetType(e,_configurator2.default.build.types,_configurator2.default.path);if(f&&_configurator2.default.assetPattern[f]&&!new RegExp(_configurator2.default.assetPattern[f].excludeFilePathRegularExpression).test(e)){const g=b.assets[d].source();'string'==typeof g&&(b.assets[d]=new _webpackSources.RawSource(_configurator2.default.assetPattern[f].pattern.replace(/\{1\}/g,g.replace(/\$/g,'$$$'))))}}c()})}}),htmlAvailable&&!['serve','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&pluginInstances.push({apply:(a)=>{const b=[];a.plugin('compilation',(c)=>c.plugin('html-webpack-plugin-after-html-processing',(d,e)=>{_configurator2.default.inPlace.cascadingStyleSheet&&(0,_keys2.default)(_configurator2.default.inPlace.cascadingStyleSheet).length||_configurator2.default.inPlace.javaScript&&(0,_keys2.default)(_configurator2.default.inPlace.javaScript).length?dom.env(d.html.replace(/<%/g,'##+#+#+##').replace(/%>/g,'##-#-#-##'),(f,g)=>{if(f)return e(f,d);if(_configurator2.default.inPlace.cascadingStyleSheet)for(const h in _configurator2.default.inPlace.cascadingStyleSheet){if(!_configurator2.default.inPlace.cascadingStyleSheet.hasOwnProperty(h))continue;let i='[href*=".css"]';'*'!=h&&(i='[href="'+_path2.default.relative(_configurator2.default.path.target.base,_helper2.default.renderFilePathTemplate(_configurator2.default.files.compose.cascadingStyleSheet,{'[contenthash]':'','[id]':h,'[name]':h}))+'"]');const j=g.document.querySelectorAll(`link${i}`);if(j.length)for(const k of j){const l=g.document.createElement('style'),m=k.attributes.href.value.replace(/&.*/g,'');l.textContent=c.assets[m].source(),'body'===_configurator2.default.inPlace.cascadingStyleSheet[h]?g.document.body.appendChild(l):'in'===_configurator2.default.inPlace.cascadingStyleSheet[h]?k.parentNode.insertBefore(l,k):'head'===_configurator2.default.inPlace.cascadingStyleSheet[h]&&g.document.head.appendChild(l),k.parentNode.removeChild(k),b.push(_helper2.default.stripLoader(m)),delete c.assets[m]}else console.warn('No referenced cascading style sheet file in resulting markup found with selector: link'+i)}if(_configurator2.default.inPlace.javaScript)for(const h in _configurator2.default.inPlace.javaScript){if(!_configurator2.default.inPlace.javaScript.hasOwnProperty(h))continue;let i='[href*=".js"]';'*'!=h&&(i='[src^="'+_path2.default.relative(_configurator2.default.path.target.base,_helper2.default.renderFilePathTemplate(_configurator2.default.files.compose.javaScript,{'[hash]':'','[id]':h,'[name]':h})+'"]'));const j=g.document.querySelectorAll(`script${i}`);if(j.length)for(const k of j){const l=g.document.createElement('script'),m=k.attributes.src.value.replace(/&.*/g,'');l.textContent=c.assets[m].source(),'body'===_configurator2.default.inPlace.javaScript[h]?g.document.body.appendChild(l):'in'===_configurator2.default.inPlace.javaScript[h]?k.parentNode.insertBefore(l,k):'head'===_configurator2.default.inPlace.javaScript[h]&&g.document.head.appendChild(l),k.parentNode.removeChild(k),b.push(_helper2.default.stripLoader(m)),delete c.assets[m]}else console.warn('No referenced javaScript file in resulting markup found with '+`selector: script${i}`)}d.html=d.html.replace(/^(\s*<!doctype[^>]+?>\s*)[\s\S]*$/i,'$1')+g.document.documentElement.outerHTML.replace(/##\+#\+#\+##/g,'<%').replace(/##-#-#-##/g,'%>'),e(null,d)}):e(null,d)})),a.plugin('after-emit',(()=>{var c=(0,_asyncToGenerator3.default)(function*(d,e){const f=[];for(const g of b)_clientnode2.default.isFileSync(g)&&f.push(new _promise2.default(function(h){return fileSystem.unlink(g,function(i){i&&console.error(i),h()})}));yield _promise2.default.all(f);for(const g of['javaScript','cascadingStyleSheet'])0===fileSystem.readdirSync(_configurator2.default.path.target.asset[g]).length&&fileSystem.rmdirSync(_configurator2.default.path.target.asset[g]);e()});return function(){return c.apply(this,arguments)}})())}}),'buildDLL'!==_configurator2.default.givenCommandLineArguments[2])for(const a in _configurator2.default.injection.internal.normalized)if(_configurator2.default.injection.internal.normalized.hasOwnProperty(a)){const b=`${_configurator2.default.path.target.base}/${a}.`+`dll-manifest.json`;if(_configurator2.default.dllManifestFilePaths.includes(b)){delete _configurator2.default.injection.internal.normalized[a];const c=_helper2.default.renderFilePathTemplate(_helper2.default.stripLoader(_configurator2.default.files.compose.javaScript),{'[name]':a});pluginInstances.push(new plugins.AddAssetHTMLPlugin({filepath:c,hash:!0,includeSourcemap:_clientnode2.default.isFileSync(`${c}.map`)})),pluginInstances.push(new _webpack2.default.DllReferencePlugin({context:_configurator2.default.path.context,manifest:require(b)}))}}if('buildDLL'!==_configurator2.default.givenCommandLineArguments[2])for(const a of _configurator2.default.injection.commonChunkIDs)_configurator2.default.injection.internal.normalized.hasOwnProperty(a)&&pluginInstances.push(new _webpack2.default.optimize.CommonsChunkPlugin({async:!1,children:!1,filename:_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.files.compose.javaScript),minChunks:Infinity,name:a,minSize:0}));if(_configurator2.default.needed.javaScript||(_configurator2.default.files.compose.javaScript=_path2.default.resolve(_configurator2.default.path.target.asset.javaScript,'.__dummy__.compiled.js')),_configurator2.default.files.compose.cascadingStyleSheet&&pluginInstances.push(new plugins.ExtractText({allChunks:!0,filename:_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.files.compose.cascadingStyleSheet)})),'__implicit__'===_configurator2.default.injection.external.modules&&(_configurator2.default.injection.external.modules=(a,b,c)=>{b=b.replace(/^!+/,''),b.startsWith('/')&&(b=_path2.default.relative(_configurator2.default.path.context,b));for(const e of _configurator2.default.module.directoryNames.concat(_configurator2.default.loader.directoryNames))if(b.startsWith(e)){b=b.substring(e.length),b.startsWith('/')&&(b=b.substring(1));break}let d=_helper2.default.determineExternalRequest(b,_configurator2.default.path.context,a,_configurator2.default.injection.internal.normalized,_configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames,_configurator2.default.loader.directoryNames).map((e)=>_path2.default.resolve(_configurator2.default.path.context,e)).filter((e)=>!_configurator2.default.path.context.startsWith(e)),_configurator2.default.module.aliases,_configurator2.default.module.replacements.normal,_configurator2.default.extensions,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames,_configurator2.default.injection.external.implicit.pattern.include,_configurator2.default.injection.external.implicit.pattern.exclude,_configurator2.default.inPlace.externalLibrary.normal,_configurator2.default.inPlace.externalLibrary.dynamic);return d?(['var','umd'].includes(_configurator2.default.exportFormat.external)&&b in _configurator2.default.injection.external.aliases&&(d=_configurator2.default.injection.external.aliases[b]),'var'===_configurator2.default.exportFormat.external&&(d=_clientnode2.default.stringConvertToValidVariableName(d,'0-9a-zA-Z_$\\.')),c(null,d,_configurator2.default.exportFormat.external)):c()}),'buildDLL'===_configurator2.default.givenCommandLineArguments[2]){let a=!1;for(const b in _configurator2.default.injection.internal.normalized)_configurator2.default.injection.internal.normalized.hasOwnProperty(b)&&(_configurator2.default.injection.dllChunkIDs.includes(b)?a=!0:delete _configurator2.default.injection.internal.normalized[b]);a?(libraryName='[name]DLLPackage',pluginInstances.push(new _webpack2.default.DllPlugin({path:`${_configurator2.default.path.target.base}/[name].dll-manifest.json`,name:libraryName}))):console.warn('No dll chunk id found.')}pluginInstances.push({apply:(a)=>a.plugin('compilation',(b)=>b.plugin('html-webpack-plugin-after-html-processing',(()=>{var c=(0,_asyncToGenerator3.default)(function*(d,e){return dom.env(d.html.replace(/<%/g,'##+#+#+##').replace(/%>/g,'##-#-#-##'),function(f,g){if(f)return e(f,d);const h={script:'src',link:'href'};for(const i in h)if(h.hasOwnProperty(i))for(const j of g.document.querySelectorAll(`${i}[${h[i]}*="?`+`${_configurator2.default.hashAlgorithm}="]`))j.setAttribute(h[i],j.getAttribute(h[i]).replace(new RegExp(`(\\?${_configurator2.default.hashAlgorithm}=`+'[^&]+).*$'),'$1'));d.html=d.html.replace(/^(\s*<!doctype[^>]+?>\s*)[\s\S]*$/i,'$1')+g.document.documentElement.outerHTML.replace(/##\+#\+#\+##/g,'<%').replace(/##-#-#-##/g,'%>'),e(null,d)})});return function(){return c.apply(this,arguments)}})()))}),_configurator2.default.exportFormat.external.startsWith('umd')&&pluginInstances.push({apply:(a)=>a.plugin('emit',(b,c)=>{const d='string'==typeof libraryName?libraryName:libraryName[0];for(const e in b.assets)if(e.replace(/([^?]+)\?.*$/,'$1').endsWith(_configurator2.default.build.types.javaScript.outputExtension)){let f=b.assets[e].source();if('string'==typeof f){for(const g in _configurator2.default.injection.external.aliases)_configurator2.default.injection.external.aliases.hasOwnProperty(g)&&(f=f.replace(new RegExp('(require\\()"'+_clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.injection.external.aliases[g])+'"(\\))','g'),`$1'${g}'$2`).replace(new RegExp('(define\\("'+_clientnode2.default.stringEscapeRegularExpressions(d)+'", \\[.*)"'+_clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.injection.external.aliases[g])+'"(.*\\], factory\\);)'),`$1'${g}'$2`));f=f.replace(new RegExp('(root\\[)"'+_clientnode2.default.stringEscapeRegularExpressions(d)+'"(\\] = )'),`$1'`+_clientnode2.default.stringConvertToValidVariableName(d)+`'$2`),b.assets[e]=new _webpackSources.RawSource(f)}}c()})}),pluginInstances.push({apply:(a)=>a.plugin('compilation',(b)=>b.plugin('html-webpack-plugin-after-html-processing',(c,d)=>{for(const e of _configurator2.default.files.html)if(e.filename===c.plugin.options.filename){for(const f of e.template.use)f.hasOwnProperty('options')&&f.options.hasOwnProperty('compileSteps')&&'number'==typeof f.options.compileSteps&&(c.html=_ejsLoader2.default.bind(_clientnode2.default.extendObject(!0,{},{options:f.options},{options:{compileSteps:e.template.postCompileSteps}}))(c.html));break}d(null,c)}))}),pluginInstances.push(new plugins.Imagemin(_configurator2.default.module.optimizer.image.content));for(const a of _configurator2.default.module.replacements.context)pluginInstances.push(new _webpack2.default.ContextReplacementPlugin(...a.map((b)=>new Function('configuration','__dirname','__filename',`return ${b}`)(_configurator2.default,__dirname,__filename))));const loader={ejs:{exclude:(a)=>_helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map((b)=>b.template.filePath)).includes(a)||null!==_configurator2.default.module.preprocessor.ejs.exclude&&evaluate(_configurator2.default.module.preprocessor.ejs.exclude,a),include:_helper2.default.normalizePaths([_configurator2.default.path.source.base].concat(_configurator2.default.module.locations.directoryPaths)),test:/^(?!.+\.html\.ejs$).+\.ejs$/i,use:[{loader:'file?name=[path][name]'+(!!(_configurator2.default.module.preprocessor.ejs.options.compileSteps%2)?'.js':'')+`?${_configurator2.default.hashAlgorithm}=[hash]`},{loader:'extract'},{loader:_configurator2.default.module.preprocessor.ejs.loader,options:_configurator2.default.module.preprocessor.ejs.options}]},script:{exclude:(a)=>null===_configurator2.default.module.preprocessor.javaScript.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.preprocessor.javaScript.exclude,a),include:_helper2.default.normalizePaths([_configurator2.default.path.source.asset.javaScript].concat(_configurator2.default.module.locations.directoryPaths)),test:/\.js(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.preprocessor.javaScript.loader,options:_configurator2.default.module.preprocessor.javaScript.options}]},html:{main:{test:new RegExp('^'+_clientnode2.default.stringEscapeRegularExpressions(_configurator2.default.files.defaultHTML.template.filePath)+'(?:\\?.*)?$'),use:_configurator2.default.files.defaultHTML.template.use},ejs:{exclude:(a)=>_helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map((b)=>b.template.filePath)).includes(a)||null!==_configurator2.default.module.preprocessor.html.exclude&&evaluate(_configurator2.default.module.preprocessor.html.exclude,a),include:_configurator2.default.path.source.asset.template,test:/\.html\.ejs(?:\?.*)?$/i,use:[{loader:'file?name='+_path2.default.join(_path2.default.relative(_configurator2.default.path.target.asset.base,_configurator2.default.path.target.asset.template),'[name]'+(!!(_configurator2.default.module.preprocessor.html.options.compileSteps%2)?'.js':'')+`?${_configurator2.default.hashAlgorithm}=[hash]`)}].concat(!!(_configurator2.default.module.preprocessor.html.options.compileSteps%2)?[]:[{loader:'extract'},{loader:_configurator2.default.module.html.loader,options:_configurator2.default.module.html.options}],{loader:_configurator2.default.module.preprocessor.html.loader,options:_configurator2.default.module.preprocessor.html.options})},html:{exclude:(a)=>_helper2.default.normalizePaths(_configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map((b)=>b.template.filePath)).includes(a)||!(null!==_configurator2.default.module.html.exclude)||evaluate(_configurator2.default.module.html.exclude,a),include:_configurator2.default.path.source.asset.template,test:/\.html(?:\?.*)?$/i,use:[{loader:'file?name='+_path2.default.join(_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.path.target.asset.template),`[name].[ext]?${_configurator2.default.hashAlgorithm}=[hash]`)},{loader:'extract'},{loader:_configurator2.default.module.html.loader,options:_configurator2.default.module.html.options}]}},style:{exclude:(a)=>null===_configurator2.default.module.cascadingStyleSheet.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.cascadingStyleSheet.exclude,a),include:_helper2.default.normalizePaths([_configurator2.default.path.source.asset.cascadingStyleSheet].concat(_configurator2.default.module.locations.directoryPaths)),test:/\.css(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.style.loader,options:_configurator2.default.module.style.options},{loader:_configurator2.default.module.cascadingStyleSheet.loader,options:_configurator2.default.module.cascadingStyleSheet.options},{loader:_configurator2.default.module.preprocessor.cascadingStyleSheet.loader,options:_clientnode2.default.extendObject(!0,{ident:'postcss',plugins:()=>[(0,_postcssImport2.default)({addDependencyTo:_webpack2.default,root:_configurator2.default.path.context}),(0,_postcssCssnext2.default)({browsers:'> 0%'}),(0,_postcssFontpath2.default)({checkPath:!1}),(0,_postcssUrl2.default)({filter:'',maxSize:0}),(0,_postcssSprites2.default)({filterBy:()=>new _promise2.default((a,b)=>(_configurator2.default.files.compose.image?a:b)()),hooks:{onSaveSpritesheet:(a)=>_path2.default.join(a.spritePath,_path2.default.relative(_configurator2.default.path.target.asset.image,_configurator2.default.files.compose.image))},stylesheetPath:_configurator2.default.path.source.asset.cascadingStyleSheet,spritePath:_configurator2.default.path.source.asset.image})]},_configurator2.default.module.preprocessor.cascadingStyleSheet.options)}]},font:{eot:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.eot.exclude&&evaluate(_configurator2.default.module.optimizer.font.eot.exclude,a),include:_configurator2.default.path.base,test:/\.eot(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.eot.loader,options:_configurator2.default.module.optimizer.font.eot.options}]},svg:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.svg.exclude&&evaluate(_configurator2.default.module.optimizer.font.svg.exclude,a),include:_configurator2.default.path.base,test:/\.svg(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.svg.loader,options:_configurator2.default.module.optimizer.font.svg.options}]},ttf:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.ttf.exclude&&evaluate(_configurator2.default.module.optimizer.font.ttf.exclude,a),include:_configurator2.default.path.base,test:/\.ttf(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.ttf.loader,options:_configurator2.default.module.optimizer.font.ttf.options}]},woff:{exclude:(a)=>null!==_configurator2.default.module.optimizer.font.woff.exclude&&evaluate(_configurator2.default.module.optimizer.font.woff.exclude,a),include:_configurator2.default.path.base,test:/\.woff2?(?:\?.*)?$/i,use:[{loader:_configurator2.default.module.optimizer.font.woff.loader,options:_configurator2.default.module.optimizer.font.woff.options}]}},image:{exclude:(a)=>null===_configurator2.default.module.optimizer.image.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.optimizer.image.exclude,a),include:_configurator2.default.path.source.asset.image,test:/\.(?:png|jpg|ico|gif)(?:\?.*)?$/i,use:{loader:_configurator2.default.module.optimizer.image.loader,options:_configurator2.default.module.optimizer.image.file}},data:{exclude:(a)=>_configurator2.default.extensions.file.internal.includes(_path2.default.extname(_helper2.default.stripLoader(a)))||(null===_configurator2.default.module.optimizer.data.exclude?rejectFilePathInDependencies(a):evaluate(_configurator2.default.module.optimizer.data.exclude,a)),include:_configurator2.default.path.source.asset.data,test:/.+/,use:[{loader:_configurator2.default.module.optimizer.data.loader,options:_configurator2.default.module.optimizer.data.options}]}};_configurator2.default.files.compose.cascadingStyleSheet&&(loader.style.use.shift(),loader.style.use=plugins.ExtractText.extract({use:loader.style.use}));const rejectFilePathInDependencies=(a)=>{return a=_helper2.default.stripLoader(a),_helper2.default.isFilePathInLocation(a,_configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames,_configurator2.default.loader.directoryNames).map((b)=>_path2.default.resolve(_configurator2.default.path.context,b)).filter((b)=>!_configurator2.default.path.context.startsWith(b)))},evaluate=(a,b)=>new Function('configuration','filePath','loader','rejectFilePathInDependencies',`return ${a}`)(_configurator2.default,b,loader,rejectFilePathInDependencies),webpackConfiguration={bail:!0,cache:_configurator2.default.cache.main,context:_configurator2.default.path.context,devtool:_configurator2.default.development.tool,devServer:_configurator2.default.development.server,entry:_configurator2.default.injection.internal.normalized,externals:_configurator2.default.injection.external.modules,resolve:{alias:_configurator2.default.module.aliases,aliasFields:_configurator2.default.package.aliasPropertyNames,extensions:_configurator2.default.extensions.file.internal,mainFields:_configurator2.default.package.main.propertyNames,mainFiles:_configurator2.default.package.main.fileNames,moduleExtensions:_configurator2.default.extensions.module,modules:_helper2.default.normalizePaths(_configurator2.default.module.directoryNames),unsafeCache:_configurator2.default.cache.unsafe},resolveLoader:{alias:_configurator2.default.loader.aliases,aliasFields:_configurator2.default.package.aliasPropertyNames,extensions:_configurator2.default.loader.extensions.file,mainFields:_configurator2.default.package.main.propertyNames,mainFiles:_configurator2.default.package.main.fileNames,moduleExtensions:_configurator2.default.loader.extensions.module,modules:_configurator2.default.loader.directoryNames},output:{filename:_path2.default.relative(_configurator2.default.path.target.base,_configurator2.default.files.compose.javaScript),hashFunction:_configurator2.default.hashAlgorithm,library:libraryName,libraryTarget:'buildDLL'===_configurator2.default.givenCommandLineArguments[2]?'var':_configurator2.default.exportFormat.self,path:_configurator2.default.path.target.base,publicPath:_configurator2.default.path.target.public,pathinfo:_configurator2.default.debug,umdNamedDefine:!0},performance:_configurator2.default.performanceHints,target:_configurator2.default.targetTechnology,module:{rules:_configurator2.default.module.additional.map((a)=>{return{exclude:(b)=>evaluate(a.exclude||'false',b),include:a.include&&evaluate(a.include,_configurator2.default.path.context)||_configurator2.default.path.source.base,test:new RegExp(evaluate(a.test,_configurator2.default.path.context)),use:evaluate(a.use)}}).concat([loader.ejs,loader.script,loader.html.main,loader.html.ejs,loader.html.html,loader.style,loader.font.eot,loader.font.svg,loader.font.ttf,loader.font.woff,loader.image,loader.data])},plugins:pluginInstances};(!Array.isArray(_configurator2.default.module.skipParseRegularExpressions)||_configurator2.default.module.skipParseRegularExpressions.length)&&(webpackConfiguration.module.noParse=_configurator2.default.module.skipParseRegularExpressions),_configurator2.default.showConfiguration&&(console.info('Using internal configuration:',_util2.default.inspect(_configurator2.default,{depth:null})),console.info('-----------------------------------------------------------'),console.info('Using webpack configuration:',_util2.default.inspect(webpackConfiguration,{depth:null}))),exports.default=webpackConfiguration;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,