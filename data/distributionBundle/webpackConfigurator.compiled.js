#!/usr/bin/env node


// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _jsdom = require('jsdom');

var dom = _interopRequireWildcard(_jsdom);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _postcssImport = require('postcss-import');

var _postcssImport2 = _interopRequireDefault(_postcssImport);

var _rimraf = require('rimraf');

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackSources = require('webpack-sources');

var _configurator = require('./configurator.compiled');

var _configurator2 = _interopRequireDefault(_configurator);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

var _htmlLoader = require('html-loader');

var _htmlLoader2 = _interopRequireDefault(_htmlLoader);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}

const plugins = require('webpack-load-plugins')();


plugins.HTML = plugins.html;
plugins.ExtractText = plugins.extractText;
plugins.AddAssetHTMLPlugin = require('add-asset-html-webpack-plugin');
plugins.OpenBrowser = plugins.openBrowser;
plugins.Favicon = require('favicons-webpack-plugin');
plugins.Imagemin = require('imagemin-webpack-plugin').default;
plugins.Offline = require('offline-plugin');

// / region monkey patches
// Monkey-Patch html loader to retrieve html loader options since the
// "webpack-html-plugin" doesn't preserve the original loader interface.

require.cache[require.resolve('html-loader')].exports = function () {
    _helper2.default.extendObject(true, this.options, module, this.options);
    return _htmlLoader2.default.apply(this, arguments);
};
// Monkey-Patch loader-utils to define which url is a local request.

const loaderUtilsIsUrlRequestBackup = _loaderUtils2.default.isUrlRequest;
require.cache[require.resolve('loader-utils')].exports.isUrlRequest = function (url) {
    if (url.match(/^[a-z]+:.+/)) return false;
    return loaderUtilsIsUrlRequestBackup.apply(_loaderUtils2.default, arguments);
};
// / endregion
// endregion
// region initialisation
let libraryName = _configurator2.default.exportFormat.self === 'var' ? _helper2.default.convertToValidVariableName(_configurator2.default.name) : _configurator2.default.name;
if ('libraryName' in _configurator2.default && _configurator2.default.libraryName) libraryName = _configurator2.default.libraryName;
// // region plugins
const pluginInstances = [new _webpack2.default.optimize.OccurrenceOrderPlugin(true)];
// /// region define modules to ignore
for (const ignorePattern of _configurator2.default.injection.ignorePattern) pluginInstances.push(new _webpack2.default.IgnorePlugin(new RegExp(ignorePattern)));
// /// endregion
// /// region generate html file
let htmlAvailable = false;
if (_configurator2.default.givenCommandLineArguments[2] !== 'buildDLL') for (let htmlConfiguration of _configurator2.default.files.html) if (_helper2.default.isFileSync(htmlConfiguration.template.substring(htmlConfiguration.template.lastIndexOf('!') + 1))) {
    if (htmlConfiguration.template === _configurator2.default.files.defaultHTML.template) htmlConfiguration.template = htmlConfiguration.template.substring(htmlConfiguration.template.lastIndexOf('!') + 1);
    pluginInstances.push(new plugins.HTML(htmlConfiguration));
    htmlAvailable = true;
}
// /// endregion
// /// region generate favicons
if (htmlAvailable && _configurator2.default.favicon && _helper2.default.isFileSync(_configurator2.default.favicon.logo)) pluginInstances.push(new plugins.Favicon(_configurator2.default.favicon));
// /// endregion
// /// region provide offline functionality
if (htmlAvailable && _configurator2.default.offline) {
    if (!['serve', 'testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])) {
        if (_configurator2.default.inPlace.cascadingStyleSheet) _configurator2.default.offline.excludes.push(`${ _configurator2.default.path.asset.cascadingStyleSheet }*.css?` + `${ _configurator2.default.hashAlgorithm }=*`);
        if (_configurator2.default.inPlace.javaScript) _configurator2.default.offline.excludes.push(`${ _configurator2.default.path.asset.javaScript }*.js?` + `${ _configurator2.default.hashAlgorithm }=*`);
    }
    pluginInstances.push(new plugins.Offline(_configurator2.default.offline));
}
// /// endregion
// /// region opens browser automatically
if (_configurator2.default.development.openBrowser && htmlAvailable && ['serve', 'testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])) pluginInstances.push(new plugins.OpenBrowser(_configurator2.default.development.openBrowser));
// /// endregion
// /// region provide build environment
pluginInstances.push(new _webpack2.default.DefinePlugin(_configurator2.default.buildDefinition));
// /// endregion
// /// region modules/assets
const moduleLocations = _helper2.default.determineModuleLocations(_configurator2.default.injection.internal, _configurator2.default.module.aliases, _configurator2.default.knownExtensions, _configurator2.default.path.context, _configurator2.default.path.ignore);
// //// region perform javaScript minification/optimisation
if (_configurator2.default.module.optimizer.uglifyJS) pluginInstances.push(new _webpack2.default.optimize.UglifyJsPlugin(_configurator2.default.module.optimizer.uglifyJS));
// //// endregion
// //// region apply module pattern
pluginInstances.push({ apply: compiler => {
        compiler.plugin('emit', (compilation, callback) => {
            for (const request in compilation.assets) if (compilation.assets.hasOwnProperty(request)) {
                const filePath = request.replace(/\?[^?]+$/, '');
                const type = _helper2.default.determineAssetType(filePath, _configurator2.default.build, _configurator2.default.path);
                if (type && _configurator2.default.assetPattern[type] && !new RegExp(_configurator2.default.assetPattern[type].excludeFilePathRegularExpression).test(filePath)) {
                    const source = compilation.assets[request].source();
                    if (typeof source === 'string') compilation.assets[request] = new _webpackSources.RawSource(_configurator2.default.assetPattern[type].pattern.replace(/\{1\}/g, source.replace(/\$/g, '$$$')));
                }
            }
            callback();
        });
    } });
// //// endregion
// //// region in-place configured assets in the main html file
if (htmlAvailable && !['serve', 'testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])) pluginInstances.push({ apply: compiler => {
        compiler.plugin('emit', (compilation, callback) => {
            if (_configurator2.default.files.html[0].filename in compilation.assets && (_configurator2.default.inPlace.cascadingStyleSheet || _configurator2.default.inPlace.javaScript)) dom.env(compilation.assets[_configurator2.default.files.html[0].filename].source(), (error, window) => {
                if (_configurator2.default.inPlace.cascadingStyleSheet) {
                    const urlPrefix = _configurator2.default.files.compose.cascadingStyleSheet.replace('[contenthash]', '');
                    const domNode = window.document.querySelector(`link[href^="${ urlPrefix }"]`);
                    if (domNode) {
                        let asset;
                        for (asset in compilation.assets) if (asset.startsWith(urlPrefix)) break;
                        const inPlaceDomNode = window.document.createElement('style');
                        inPlaceDomNode.textContent = compilation.assets[asset].source();
                        domNode.parentNode.insertBefore(inPlaceDomNode, domNode);
                        domNode.parentNode.removeChild(domNode);
                        /*
                            NOTE: This doesn't prevent webpack from
                            creating this file if present in another chunk
                            so removing it (and a potential source map
                            file) later in the "done" hook.
                        */
                        delete compilation.assets[asset];
                    } else console.warn('No referenced cascading style sheet file in' + ' resulting markup found with ' + `selector: link[href^="${ urlPrefix }"]`);
                }
                if (_configurator2.default.inPlace.javaScript) {
                    const urlPrefix = _configurator2.default.files.compose.javaScript.replace('[hash]', '');
                    const domNode = window.document.querySelector(`script[src^="${ urlPrefix }"]`);
                    if (domNode) {
                        let asset;
                        for (asset in compilation.assets) if (asset.startsWith(urlPrefix)) break;
                        domNode.textContent = compilation.assets[asset].source();
                        domNode.removeAttribute('src');
                        /*
                            NOTE: This doesn't prevent webpack from
                            creating this file if present in another chunk
                            so removing it (and a potential source map
                            file) later in the "done" hook.
                        */
                        delete compilation.assets[asset];
                    } else console.warn('No referenced javaScript file in resulting ' + 'markup found with selector: ' + `script[src^="${ urlPrefix }"]`);
                }
                compilation.assets[_configurator2.default.files.html[0].filename] = new _webpackSources.RawSource(compilation.assets[_configurator2.default.files.html[0].filename].source().replace(/^(\s*<!doctype[^>]+?>\s*)[\s\S]*$/i, '$1') + window.document.documentElement.outerHTML);
                callback();
            });else callback();
        });
        compiler.plugin('after-emit', (compilation, callback) => {
            if (_configurator2.default.files.html[0].filename in compilation.assets) {
                if (_configurator2.default.inPlace.cascadingStyleSheet) (0, _rimraf.sync)(_path2.default.join(_configurator2.default.path.asset.target, _configurator2.default.path.asset.cascadingStyleSheet), { glob: false });
                if (_configurator2.default.inPlace.javaScript) {
                    const assetFilePath = _path2.default.join(_configurator2.default.path.asset.target, _configurator2.default.files.compose.javaScript.replace(`?${ _configurator2.default.hashAlgorithm }=[hash]`, ''));
                    for (const filePath of [assetFilePath, `${ assetFilePath }.map`]) if (_helper2.default.isFileSync(filePath)) fileSystem.unlinkSync(filePath);
                    const javaScriptPath = _path2.default.join(_configurator2.default.path.asset.target, _configurator2.default.path.asset.javaScript);
                    if (fileSystem.readdirSync(javaScriptPath).length === 0) fileSystem.rmdirSync(javaScriptPath);
                }
            }
            callback();
        });
    } });
// //// endregion
const injection = _helper2.default.resolveInjection(_configurator2.default.injection, _helper2.default.resolveBuildConfigurationFilePaths(_configurator2.default.build, _configurator2.default.path.asset.source, _configurator2.default.path.context, _configurator2.default.path.ignore), _configurator2.default.testInBrowser.injection.internal, _configurator2.default.module.aliases, _configurator2.default.knownExtensions, _configurator2.default.path.context, _configurator2.default.path.ignore);
const normalizedInternalInjection = _helper2.default.normalizeInternalInjection(injection.internal);
// //// region remove chunks if a corresponding dll package exists
if (_configurator2.default.givenCommandLineArguments[2] !== 'buildDLL') for (const chunkID in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkID) && _configurator2.default.dllManifestFilePaths.includes(`${ _configurator2.default.path.target }${ chunkID }.dll-manifest.json`)) {
    delete normalizedInternalInjection[chunkID];
    // TODO replace all placeholder like "[id]", "[ext]", "[hash]" and
    // everywhere else
    const filePath = _configurator2.default.files.compose.javaScript.replace(/^(.+)(?:\?[^?]*)$/, '$1').replace(/\[name\]/g, chunkID);
    pluginInstances.push(new plugins.AddAssetHTMLPlugin({
        filepath: filePath,
        hash: true,
        includeSourcemap: _helper2.default.isFileSync(`${ filePath }.map`)
    }));
    pluginInstances.push(new _webpack2.default.DllReferencePlugin({
        context: _configurator2.default.path.context, manifest: require(`${ _configurator2.default.path.target }${ chunkID }.dll-manifest.json`)
    }));
}
// //// endregion
// //// region generate common chunks
if (_configurator2.default.givenCommandLineArguments[2] !== 'buildDLL') for (const chunkID of _configurator2.default.injection.commonChunkIDs) if (normalizedInternalInjection.hasOwnProperty(chunkID)) pluginInstances.push(new _webpack2.default.optimize.CommonsChunkPlugin({
    async: false,
    children: false,
    filename: _configurator2.default.files.compose.javaScript,
    minChunks: Infinity,
    name: chunkID,
    minSize: 0
}));
// //// endregion
let javaScriptNeeded = _configurator2.default.debug && ['serve', 'testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2]);
if (!javaScriptNeeded) for (const chunkName in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkName)) for (const moduleID of normalizedInternalInjection[chunkName]) {
    const type = _helper2.default.determineAssetType(_helper2.default.determineModuleFilePath(moduleID, _configurator2.default.module.aliases, _configurator2.default.knownExtensions, _configurator2.default.path.context), _configurator2.default.build, _configurator2.default.path);
    if (type && _configurator2.default.build[type] && _configurator2.default.build[type].outputExtension === 'js') {
        javaScriptNeeded = true;
        break;
    }
}
// //// region mark empty javaScript modules as dummy
if (!javaScriptNeeded) _configurator2.default.files.compose.javaScript = _path2.default.join(_configurator2.default.path.asset.javaScript, '.__dummy__.compiled.js');
// //// endregion
// //// region extract cascading style sheets
pluginInstances.push(new plugins.ExtractText(_configurator2.default.files.compose.cascadingStyleSheet, { allChunks: true, disable: !_configurator2.default.files.compose.cascadingStyleSheet }));
// //// endregion
// //// region performs implicit external logic
if (injection.external === '__implicit__')
    /*
        We only want to process modules from local context in library mode,
        since a concrete project using this library should combine all assets
        (and deduplicate them) for optimal bundling results. NOTE: Only native
        javaScript and json modules will be marked as external dependency.
    */
    injection.external = (context, request, callback) => {
        const filePath = _helper2.default.determineModuleFilePath(request.substring(request.lastIndexOf('!') + 1), _configurator2.default.module.aliases, _configurator2.default.knownExtensions, context);
        if (filePath.endsWith('.js') || filePath.endsWith('.json')) {
            const originalRequest = request;
            // NOTE: We apply alias on externals additionally.
            request = _helper2.default.applyAliases(request.substring(request.lastIndexOf('!') + 1), _configurator2.default.module.aliases);
            const applyExternalRequest = () => {
                if (originalRequest in _configurator2.default.injection.externalAliases) request = _configurator2.default.injection.externalAliases[originalRequest];
                if (_configurator2.default.exportFormat.external === 'var') request = _helper2.default.convertToValidVariableName(request, '0-9a-zA-Z_$\\.');
                return callback(null, request, _configurator2.default.exportFormat.external);
            };
            if (_helper2.default.isAnyMatching(request, _configurator2.default.injection.implicitExternalIncludePattern)) return applyExternalRequest();
            if (_helper2.default.isAnyMatching(request, _configurator2.default.injection.implicitExternalExcludePattern)) return callback();
            for (const chunkName in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkName)) for (const moduleID of normalizedInternalInjection[chunkName]) if (_helper2.default.determineModuleFilePath(moduleID, _configurator2.default.module.aliases, _configurator2.default.knownExtensions, context) === filePath) return callback();
            /*
                NOTE: We mark dependencies as external if they does not contain
                a loader in their request and aren't part of the current node
                package.
            */
            if (!_configurator2.default.inPlace.externalLibrary.normal && !(_configurator2.default.inPlace.externalLibrary.shimmed && originalRequest.includes('!')) && (!_path2.default.resolve(filePath).startsWith(_configurator2.default.path.context) || _helper2.default.isFilePathInLocation(filePath, _configurator2.default.path.ignore))) return applyExternalRequest();
        }
        return callback();
    };
// //// endregion
// //// region build dll packages
if (_configurator2.default.givenCommandLineArguments[2] === 'buildDLL') {
    let dllChunkIDExists = false;
    for (const chunkID in normalizedInternalInjection) if (normalizedInternalInjection.hasOwnProperty(chunkID)) if (_configurator2.default.injection.dllChunkIDs.includes(chunkID)) dllChunkIDExists = true;else delete normalizedInternalInjection[chunkID];
    if (dllChunkIDExists) {
        libraryName = '[name]DLLPackage';
        pluginInstances.push(new _webpack2.default.DllPlugin({
            path: `${ _configurator2.default.path.target }[name].dll-manifest.json`,
            name: libraryName
        }));
    } else console.warn('No dll chunk id found.');
}
// //// endregion
// /// endregion
// /// region apply final dom/javaScript modifications/fixes
pluginInstances.push({ apply: compiler => {
        compiler.plugin('emit', (compilation, callback) => {
            const promises = [];
            /*
                NOTE: Removing symbols after a "&" in hash string is necessary to
                match the generated request strings in offline plugin.
            */
            for (const htmlConfiguration of _configurator2.default.files.html) if (htmlConfiguration.filename in compilation.assets) promises.push(new Promise((resolve, reject) => dom.env(compilation.assets[htmlConfiguration.filename].source(), (error, window) => {
                if (error) return reject(error);
                const linkables = {
                    script: 'src', link: 'href' };
                for (const tagName in linkables) if (linkables.hasOwnProperty(tagName)) for (const domNode of window.document.querySelectorAll(`${ tagName }[${ linkables[tagName] }*="?` + `${ _configurator2.default.hashAlgorithm }="]`)) domNode.setAttribute(linkables[tagName], domNode.getAttribute(linkables[tagName]).replace(new RegExp(`(\\?${ _configurator2.default.hashAlgorithm }=` + '[^&]+).*$'), '$1'));
                compilation.assets[htmlConfiguration.filename] = new _webpackSources.RawSource(compilation.assets[htmlConfiguration.filename].source().replace(/^(\s*<!doctype[^>]+?>\s*)[\s\S]*$/i, '$1') + window.document.documentElement.outerHTML);
                return resolve(compilation.assets[htmlConfiguration.filename]);
            })));
            /*
                NOTE: The umd module export doesn't handle casees where the package
                name doesn't match exported library name. This post processing
                fixes this issue.
            */
            for (const assetRequest in compilation.assets) if (assetRequest.replace(/([^?]+)\?.*$/, '$1').endsWith(_configurator2.default.build.javaScript.outputExtension)) {
                let source = compilation.assets[assetRequest].source();
                for (const replacement in _configurator2.default.injection.externalAliases) if (_configurator2.default.injection.externalAliases.hasOwnProperty(replacement)) source = source.replace(new RegExp('(require\\()"' + _helper2.default.convertToValidRegularExpressionString(_configurator2.default.injection.externalAliases[replacement]) + '"(\\))', 'g'), `$1'${ replacement }'$2`).replace(new RegExp('(define\\("' + _helper2.default.convertToValidRegularExpressionString(libraryName) + '", \\[.*)"' + _helper2.default.convertToValidRegularExpressionString(_configurator2.default.injection.externalAliases[replacement]) + '"(.*\\], factory\\);)'), `$1'${ replacement }'$2`);
                source = source.replace(new RegExp('(root\\[)"' + _helper2.default.convertToValidRegularExpressionString(libraryName) + '"(\\] = )'), `$1'${ _helper2.default.convertToValidVariableName(libraryName) }'$2`);
                compilation.assets[assetRequest] = new _webpackSources.RawSource(source);
            }
            Promise.all(promises).then(() => callback());
        });
    } });
// /// endregion
// /// region add automatic image compression
// NOTE: This plugin should be loaded at last to ensure that all emitted images
// ran through.
pluginInstances.push(new plugins.Imagemin(_configurator2.default.module.optimizer.image.content));
// /// endregion
// // endregion
// / region loader
let imageLoader = 'url?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.optimizer.image.file);
const loader = {
    preprocessor: {
        cascadingStyleSheet: 'postcss',
        javaScript: 'babel?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.preprocessor.modernJavaScript),
        pug: 'pug?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.preprocessor.pug),
        // TODO deprecated
        coffee: 'coffee',
        literateCoffee: 'coffee?literate',
        less: 'less?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.preprocessor.less),
        sass: 'sass?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.preprocessor.sass),
        scss: 'sass?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.preprocessor.scss)
        //
    },
    html: 'html?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.html),
    cascadingStyleSheet: 'css?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.cascadingStyleSheet),
    style: 'style?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.style),
    postprocessor: {
        image: imageLoader,
        font: {
            eot: 'url?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.optimizer.font.eot),
            woff: 'url?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.optimizer.font.woff),
            ttf: 'url?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.optimizer.font.ttf),
            svg: 'url?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.optimizer.font.svg)
        },
        data: 'url?' + _helper2.default.convertCircularObjectToJSON(_configurator2.default.module.optimizer.data)
    }
};
// / endregion
// endregion
// region configuration
exports.default = {
    context: _configurator2.default.path.context,
    debug: _configurator2.default.debug,
    devtool: _configurator2.default.development.tool,
    devServer: _configurator2.default.development.server,
    // region input
    entry: normalizedInternalInjection, externals: injection.external,
    resolveLoader: {
        alias: _configurator2.default.loader.aliases,
        extensions: _configurator2.default.loader.extensions,
        modulesDirectories: _configurator2.default.loader.moduleDirectories
    },
    resolve: {
        alias: _configurator2.default.module.aliases,
        extensions: _configurator2.default.knownExtensions,
        root: [_configurator2.default.path.asset.source]
    },
    // endregion
    // region output
    output: {
        filename: _path2.default.relative(_configurator2.default.path.asset.target, _configurator2.default.files.compose.javaScript),
        hashFunction: _configurator2.default.hashAlgorithm,
        library: libraryName,
        libraryTarget: _configurator2.default.givenCommandLineArguments[2] === 'buildDLL' ? 'var' : _configurator2.default.exportFormat.self,
        path: _configurator2.default.path.asset.target,
        publicPath: _configurator2.default.path.asset.publicTarget,
        pathinfo: _configurator2.default.debug,
        umdNamedDefine: true
    },
    target: _configurator2.default.targetTechnology,
    // endregion
    module: {
        noParse: _configurator2.default.module.skipParseRegularExpression,
        preLoaders: [
        // Convert to native web types.
        // region script
        {
            test: /\.js$/,
            loader: loader.preprocessor.javaScript,
            include: [_path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.javaScript)].concat(moduleLocations.directoryPaths),
            exclude: filePath => _helper2.default.isFilePathInLocation(filePath.replace(/^(.+)(?:\?[^?]*)$/, '$1'), _configurator2.default.path.ignore)
        }, {
            test: /\.coffee$/,
            loader: loader.preprocessor.coffee,
            include: [_path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.coffeeScript)].concat(moduleLocations.directoryPaths)
        }, {
            test: /\.(?:coffee\.md|litcoffee)$/,
            loader: loader.preprocessor.literateCoffee,
            include: [_path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.coffeeScript)].concat(moduleLocations.directoryPaths)
        },
        // endregion
        // region html (templates)
        // NOTE: This ensures that will be used as a special loader alias.
        {
            test: new RegExp(_helper2.default.convertToValidRegularExpressionString(_configurator2.default.files.defaultHTML.template.substring(_configurator2.default.files.defaultHTML.template.lastIndexOf('!') + 1))),
            loader: _configurator2.default.files.defaultHTML.template.substring(0, _configurator2.default.files.defaultHTML.template.lastIndexOf('!'))
        }, {
            test: /\.pug$/,
            loader: `file?name=${ _configurator2.default.path.asset.template }` + `[name].html?${ _configurator2.default.hashAlgorithm }=[hash]!` + `extract!${ loader.html }!${ loader.preprocessor.pug }`,
            include: _path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.template),
            exclude: _configurator2.default.files.html.concat(_configurator2.default.files.defaultHTML).map(htmlConfiguration => htmlConfiguration.template.substring(htmlConfiguration.template.lastIndexOf('!') + 1))
        }
        // endregion
        ],
        loaders: [
        // Loads dependencies.
        // region style
        // TODO deprecated
        {
            test: /\.less$/,
            loader: plugins.ExtractText.extract(loader.style, `${ loader.cascadingStyleSheet }!${ loader.preprocessor.less }`)
        }, {
            test: /\.sass$/,
            loader: plugins.ExtractText.extract(loader.style, `${ loader.cascadingStyleSheet }!${ loader.preprocessor.sass }`)
        }, {
            test: /\.scss$/,
            loader: plugins.ExtractText.extract(loader.style, `${ loader.cascadingStyleSheet }!${ loader.preprocessor.scss }`)
        },
        //
        {
            test: /\.css$/,
            loader: plugins.ExtractText.extract(loader.style, `${ loader.preprocessor.cascadingStyleSheet }!` + loader.cascadingStyleSheet),
            include: [_path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.cascadingStyleSheet)].concat(moduleLocations.directoryPaths),
            exclude: filePath => _helper2.default.isFilePathInLocation(filePath.replace(/^(.+)(?:\?[^?]*)$/, '$1'), _configurator2.default.path.ignore)
        },
        // endregion
        // region html (templates)
        {
            test: /\.html$/,
            loader: `file?name=${ _configurator2.default.path.asset.template }` + `[name].[ext]?${ _configurator2.default.hashAlgorithm }=[hash]!` + `extract!${ loader.html }`,
            include: _path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.template),
            exclude: _configurator2.default.files.html.map(htmlConfiguration => htmlConfiguration.template.substring(htmlConfiguration.template.lastIndexOf('!') + 1))
        }
        // endregion
        ],
        postLoaders: [
        // Optimize loaded assets.
        // region font
        {
            test: /\.eot(?:\?v=\d+\.\d+\.\d+)?$/,
            loader: loader.postprocessor.font.eot
        }, { test: /\.woff2?$/, loader: loader.postprocessor.font.woff }, {
            test: /\.ttf(?:\?v=\d+\.\d+\.\d+)?$/,
            loader: loader.postprocessor.font.ttf
        }, {
            test: /\.svg(?:\?v=\d+\.\d+\.\d+)?$/,
            loader: loader.postprocessor.font.svg
        },
        // endregion
        // region image
        {
            test: /\.(?:png|jpg|ico|gif)$/,
            loader: loader.postprocessor.image
        },
        // endregion
        // region data
        {
            test: /.+/,
            loader: loader.postprocessor.data,
            include: _path2.default.join(_configurator2.default.path.asset.source, _configurator2.default.path.asset.data),
            exclude: filePath => _configurator2.default.knownExtensions.includes(_path2.default.extname(filePath.replace(/^(.+)(?:\?[^?]*)$/, '$1')))
        }
        // endregion
        ]
    },
    postcss: () => [_autoprefixer2.default, (0, _postcssImport2.default)({ addDependencyTo: _webpack2.default })],
    html: _configurator2.default.module.optimizer.htmlMinifier,
    // Let the "html-loader" access full html minifier processing
    // configuration.
    pug: _configurator2.default.module.preprocessor.pug,
    plugins: pluginInstances
};
// endregion
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;base64,