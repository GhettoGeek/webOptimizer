#!/usr/bin/env node
'use strict';var _set=require('babel-runtime/core-js/set'),_set2=_interopRequireDefault(_set),_from=require('babel-runtime/core-js/array/from'),_from2=_interopRequireDefault(_from),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path);Object.defineProperty(exports,'__esModule',{value:!0});function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}class Helper{static isFilePathInLocation(a,b){for(const c of b)if(_path2.default.resolve(a).startsWith(_path2.default.resolve(c)))return!0;return!1}static stripLoader(a){a=a.toString();const b=a.substring(a.lastIndexOf('!')+1);return b.includes('?')?b.substring(0,b.indexOf('?')):b}static normalizePaths(a){return(0,_from2.default)(new _set2.default(a.map((b)=>{return b=_path2.default.normalize(b),b.endsWith('/')?b.substring(0,b.length-1):b})))}static renderFilePathTemplate(a,b={'[name]':'.__dummy__','[id]':'.__dummy__','[hash]':'.__dummy__'}){let c=a;for(const d in b)b.hasOwnProperty(d)&&(c=c.replace(new RegExp(_clientnode2.default.stringEscapeRegularExpressions(d),'g'),b[d]));return c}static applyContext(a,b='./',c='./',d={},e={},f=['node_modules']){if(c=_path2.default.resolve(c),a.startsWith('./')&&_path2.default.resolve(b)!==c){a=_path2.default.resolve(b,a);for(const g of f){const h=_path2.default.resolve(c,g);if(a.startsWith(h))return a=a.substring(h.length),a.startsWith('/')&&(a=a.substring(1)),Helper.applyModuleReplacements(Helper.applyAliases(a.substring(a.lastIndexOf('!')+1),d),e)}if(a.startsWith(c))return a=a.substring(c.length),a.startsWith('/')&&(a=a.substring(1)),Helper.applyModuleReplacements(Helper.applyAliases(a.substring(a.lastIndexOf('!')+1),d),e)}return a}static determineExternalRequest(a,b='./',c='./',d={},e=['node_modules'],f={},g={},h={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},i='./',j=['.git'],k=['node_modules'],l=['index','main'],m=['main','module'],n=[],o=[],p=[],q=!1,r=!0){b=_path2.default.resolve(b),c=_path2.default.resolve(c),i=_path2.default.resolve(i);let s=Helper.applyModuleReplacements(Helper.applyAliases(a.substring(a.lastIndexOf('!')+1),f),g),t=Helper.determineModuleFilePath(s,{},{},h,b,c,j,k,l,m,n);if(!(t||q)||_clientnode2.default.isAnyMatching(s,o))return Helper.applyContext(s,c,i,f,g,k);if(_clientnode2.default.isAnyMatching(s,p))return null;for(const u in d)if(d.hasOwnProperty(u))for(const v of d[u])if(Helper.determineModuleFilePath(v,f,g,h,b,c,j,k,l,m,n)===t)return null;return!q&&(0===h.file.external.length||t&&h.file.external.includes(_path2.default.extname(t))||!t&&h.file.external.includes(''))&&!(r&&a.includes('!'))&&(!t&&r||t&&(!t.startsWith(b)||Helper.isFilePathInLocation(t,e)))?Helper.applyContext(s,c,i,f,g,k):null}static determineAssetType(a,b,c){let d=null;for(const e in b)if(`.${b[e].extension}`===_path2.default.extname(a)){d=e;break}if(!d)for(const e of['source','target'])for(const f in c[e].asset)if(c[e].asset.hasOwnProperty(f)&&'base'!==f&&c[e].asset[f]&&a.startsWith(c[e].asset[f]))return f;return d}static resolveBuildConfigurationFilePaths(a,b='./',c=['.git'],d=['index','main']){const e=[];for(const f in a)if(a.hasOwnProperty(f)){const g=_clientnode2.default.extendObject(!0,{filePaths:[]},a[f]);for(const h of _clientnode2.default.walkDirectoryRecursivelySync(b,(i)=>{if(Helper.isFilePathInLocation(i.path,c))return!1}))h.stat.isFile()&&_path2.default.extname(h.path).substring(1)===g.extension&&!new RegExp(g.filePathPattern).test(h.path)&&g.filePaths.push(h.path);g.filePaths.sort((h,i)=>{if(d.includes(_path2.default.basename(h,_path2.default.extname(h)))){if(d.includes(_path2.default.basename(i,_path2.default.extname(i))))return 0;}else if(d.includes(_path2.default.basename(i,_path2.default.extname(i))))return 1;return 0}),e.push(g)}return e.sort((f,g)=>{return f.outputExtension===g.outputExtension?0:'js'===f.outputExtension?-1:'js'===g.outputExtension?1:f.outputExtension<g.outputExtension?-1:1})}static determineModuleLocations(a,b={},c={},d={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},e='./',f='',g=['.git'],h=['','node_modules','../'],i=['__package__','','index','main'],j=['main','module'],k=[]){const l=[],m=[],n=Helper.resolveModulesInFolders(Helper.normalizeInternalInjection(a),b,c,d,e,f,g,h,i,j,k);for(const o in n)if(n.hasOwnProperty(o))for(const p of n[o]){const q=Helper.determineModuleFilePath(p,b,c,d,e,f,g,h,i,j,k);if(q){l.push(q);const r=_path2.default.dirname(q);m.includes(r)||m.push(r)}}return{filePaths:l,directoryPaths:m}}static resolveModulesInFolders(a,b={},c={},d={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},e='./',f='',g=['.git']){for(const h in f.startsWith('/')&&(f=_path2.default.relative(e,f)),a)if(a.hasOwnProperty(h)){let i=0;for(let j of a[h]){j=Helper.applyModuleReplacements(Helper.applyAliases(Helper.stripLoader(j),b),c);const k=_path2.default.resolve(f,j);if(_clientnode2.default.isDirectorySync(k)){a[h].splice(i,1);for(const l of _clientnode2.default.walkDirectoryRecursivelySync(k,(m)=>{if(Helper.isFilePathInLocation(m.path,g))return!1}))l.stat.isFile()&&a[h].push('./'+_path2.default.relative(f,_path2.default.resolve(k,l.path)))}else j.startsWith('./')&&!j.startsWith('./'+_path2.default.relative(e,f))&&(a[h][i]=`./${_path2.default.relative(e,k)}`);i+=1}}return a}static normalizeInternalInjection(a){let b={};if(a instanceof Object&&_clientnode2.default.isPlainObject(a)){let c=!1;const d=[];for(const e in a)a.hasOwnProperty(e)&&(Array.isArray(a[e])?0<a[e].length?(c=!0,b[e]=a[e]):d.push(e):(c=!0,b[e]=[a[e]]));if(c)for(const e of d)delete b[e];else b={index:[]}}else'string'==typeof a?b={index:[a]}:Array.isArray(a)&&(b={index:a});return b}static resolveInjection(a,b,c,d={},e={},f={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},g='./',h='',i=['.git']){const j=_clientnode2.default.extendObject(!0,{},a),k=Helper.determineModuleLocations(c,d,e,f,g,h,i).filePaths;for(const l of['internal','external'])if('object'==typeof j[l]){for(const m in j[l])if('__auto__'===j[l][m]){j[l][m]=[];const n=Helper.getAutoChunk(b,k,h);for(const o in n)n.hasOwnProperty(o)&&j[l][m].push(n[o]);j[l][m].reverse()}}else'__auto__'===j[l]&&(j[l]=Helper.getAutoChunk(b,k,g));return j}static getAutoChunk(a,b,c){const d={},e={};for(const f of a){e[f.outputExtension]||(e[f.outputExtension]=[]);for(const g of f.filePaths)if(!b.includes(g)){const h='./'+_path2.default.relative(c,g),i=_path2.default.dirname(h),j=_path2.default.basename(h,`.${f.extension}`);let k=j;'.'!==i&&(k=_path2.default.join(i,j)),e[f.outputExtension].includes(k)||(d.hasOwnProperty(k)?d[h]=h:d[k]=h,e[f.outputExtension].push(k))}}return d}static determineModuleFilePath(a,b={},c={},d={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},e='./',f='',g=['.git'],h=['node_modules'],i=['index'],j=['main'],k=[]){if(a=Helper.applyModuleReplacements(Helper.applyAliases(Helper.stripLoader(a),b),c),!a)return null;let l=a;l.startsWith('./')&&(l=_path2.default.join(f,l));for(const m of[f].concat(h.map((n)=>_path2.default.resolve(e,n))))for(let n of['','__package__'].concat(i))for(const o of d.module.concat(['']))for(const p of[''].concat(d.file.internal)){let q=l.startsWith('/')?_path2.default.resolve(l):_path2.default.resolve(m,l);let r={};if('__package__'===n){if(_clientnode2.default.isDirectorySync(q)){const s=_path2.default.resolve(q,'package.json');if(_clientnode2.default.isFileSync(s)){let t={};try{t=JSON.parse(fileSystem.readFileSync(s,{encoding:'utf-8'}))}catch(u){}for(const u of j)if(t.hasOwnProperty(u)&&'string'==typeof t[u]&&t[u]){n=t[u];break}for(const u of k)if(t.hasOwnProperty(u)&&'object'==typeof t[u]){r=t[u];break}}}if('__package__'===n)continue}if(n=Helper.applyModuleReplacements(Helper.applyAliases(n,r),c),n?q=_path2.default.resolve(q,`${n}${o}${p}`):q+=`${n}${o}${p}`,!Helper.isFilePathInLocation(q,g)&&_clientnode2.default.isFileSync(q))return q}return null}static applyAliases(a,b){for(const c in b)c.endsWith('$')?a===c.substring(0,c.length-1)&&(a=b[c]):a=a.replace(c,b[c]);return a}static applyModuleReplacements(a,b){for(const c in b)b.hasOwnProperty(c)&&(a=a.replace(new RegExp(c),b[c]));return a}}exports.default=Helper;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FFUSxFQUFXLEVBQVMsT0FBVCxDQUNQLEdBQUksT0FBSixDQUFXLENBQVgsQ0FETyxDQUNrQixFQUFhLENBQWIsQ0FEbEIsQ0FGbkIsRUFJQSxNQUFPLEVBQ1YsQ0FwekJ1QixDLGdCQUFQLE0iLCJmaWxlIjoiaGVscGVyLmNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBAZmxvd1xuLy8gLSotIGNvZGluZzogdXRmLTggLSotXG4ndXNlIHN0cmljdCdcbi8qICFcbiAgICByZWdpb24gaGVhZGVyXG4gICAgQ29weXJpZ2h0IFRvcmJlbiBTaWNrZXJ0IChpbmZvW1wifmF0flwiXXRvcmJlbi53ZWJzaXRlKSAxNi4xMi4yMDEyXG5cbiAgICBMaWNlbnNlXG4gICAgLS0tLS0tLVxuXG4gICAgVGhpcyBsaWJyYXJ5IHdyaXR0ZW4gYnkgVG9yYmVuIFNpY2tlcnQgc3RhbmQgdW5kZXIgYSBjcmVhdGl2ZSBjb21tb25zIG5hbWluZ1xuICAgIDMuMCB1bnBvcnRlZCBsaWNlbnNlLiBzZWUgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wL2RlZWQuZGVcbiAgICBlbmRyZWdpb25cbiovXG4vLyByZWdpb24gaW1wb3J0c1xuaW1wb3J0IFRvb2xzIGZyb20gJ2NsaWVudG5vZGUnXG5pbXBvcnQgdHlwZSB7RmlsZSwgUGxhaW5PYmplY3R9IGZyb20gJ2NsaWVudG5vZGUnXG5pbXBvcnQgKiBhcyBmaWxlU3lzdGVtIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbi8vIE5PVEU6IE9ubHkgbmVlZGVkIGZvciBkZWJ1Z2dpbmcgdGhpcyBmaWxlLlxudHJ5IHtcbiAgICByZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInKVxufSBjYXRjaCAoZXJyb3IpIHt9XG5cbmltcG9ydCB0eXBlIHtcbiAgICBCdWlsZENvbmZpZ3VyYXRpb24sIEV4dGVuc2lvbnMsIEluamVjdGlvbiwgSW50ZXJuYWxJbmplY3Rpb24sXG4gICAgTm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uLCBQYXRoLCBSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbixcbiAgICBSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbkl0ZW1cbn0gZnJvbSAnLi90eXBlJ1xuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gbWV0aG9kc1xuLyoqXG4gKiBQcm92aWRlcyBhIGNsYXNzIG9mIHN0YXRpYyBtZXRob2RzIHdpdGggZ2VuZXJpYyB1c2UgY2FzZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBlciB7XG4gICAgLy8gcmVnaW9uIGJvb2xlYW5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgZ2l2ZW4gZmlsZSBwYXRoIGlzIHdpdGhpbiBnaXZlbiBsaXN0IG9mIGZpbGVcbiAgICAgKiBsb2NhdGlvbnMuXG4gICAgICogQHBhcmFtIGZpbGVQYXRoIC0gUGF0aCB0byBmaWxlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSBsb2NhdGlvbnNUb0NoZWNrIC0gTG9jYXRpb25zIHRvIHRha2UgaW50byBhY2NvdW50LlxuICAgICAqIEByZXR1cm5zIFZhbHVlIFwidHJ1ZVwiIGlmIGdpdmVuIGZpbGUgcGF0aCBpcyB3aXRoaW4gb25lIG9mIGdpdmVuXG4gICAgICogbG9jYXRpb25zIG9yIFwiZmFsc2VcIiBvdGhlcndpc2UuXG4gICAgICovXG4gICAgc3RhdGljIGlzRmlsZVBhdGhJbkxvY2F0aW9uKFxuICAgICAgICBmaWxlUGF0aDpzdHJpbmcsIGxvY2F0aW9uc1RvQ2hlY2s6QXJyYXk8c3RyaW5nPlxuICAgICk6Ym9vbGVhbiB7XG4gICAgICAgIGZvciAoY29uc3QgcGF0aFRvQ2hlY2s6c3RyaW5nIG9mIGxvY2F0aW9uc1RvQ2hlY2spXG4gICAgICAgICAgICBpZiAocGF0aC5yZXNvbHZlKGZpbGVQYXRoKS5zdGFydHNXaXRoKHBhdGgucmVzb2x2ZShwYXRoVG9DaGVjaykpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gc3RyaW5nXG4gICAgLyoqXG4gICAgICogU3RyaXBzIGxvYWRlciBpbmZvcm1hdGlvbnMgZm9ybSBnaXZlbiBtb2R1bGUgcmVxdWVzdCBpbmNsdWRpbmcgbG9hZGVyXG4gICAgICogcHJlZml4IGFuZCBxdWVyeSBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIG1vZHVsZUlEIC0gTW9kdWxlIHJlcXVlc3QgdG8gc3RyaXAuXG4gICAgICogQHJldHVybnMgR2l2ZW4gbW9kdWxlIGlkIHN0cmlwcGVkLlxuICAgICAqL1xuICAgIHN0YXRpYyBzdHJpcExvYWRlcihtb2R1bGVJRDpzdHJpbmd8U3RyaW5nKTpzdHJpbmcge1xuICAgICAgICBtb2R1bGVJRCA9IG1vZHVsZUlELnRvU3RyaW5nKClcbiAgICAgICAgY29uc3QgbW9kdWxlSURXaXRob3V0TG9hZGVyOnN0cmluZyA9IG1vZHVsZUlELnN1YnN0cmluZyhcbiAgICAgICAgICAgIG1vZHVsZUlELmxhc3RJbmRleE9mKCchJykgKyAxKVxuICAgICAgICByZXR1cm4gbW9kdWxlSURXaXRob3V0TG9hZGVyLmluY2x1ZGVzKFxuICAgICAgICAgICAgJz8nXG4gICAgICAgICkgPyBtb2R1bGVJRFdpdGhvdXRMb2FkZXIuc3Vic3RyaW5nKDAsIG1vZHVsZUlEV2l0aG91dExvYWRlci5pbmRleE9mKFxuICAgICAgICAgICAgJz8nXG4gICAgICAgICkpIDogbW9kdWxlSURXaXRob3V0TG9hZGVyXG4gICAgfVxuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBhcnJheVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGdpdmVuIGxpc3Qgb2YgcGF0aCB0byBhIG5vcm1hbGl6ZWQgbGlzdCB3aXRoIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHBhdGhzIC0gRmlsZSBwYXRocy5cbiAgICAgKiBAcmV0dXJucyBUaGUgZ2l2ZW4gZmlsZSBwYXRoIGxpc3Qgd2l0aCBub3JtYWxpemVkIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICovXG4gICAgc3RhdGljIG5vcm1hbGl6ZVBhdGhzKHBhdGhzOkFycmF5PHN0cmluZz4pOkFycmF5PHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KHBhdGhzLm1hcCgoZ2l2ZW5QYXRoOnN0cmluZyk6c3RyaW5nID0+IHtcbiAgICAgICAgICAgIGdpdmVuUGF0aCA9IHBhdGgubm9ybWFsaXplKGdpdmVuUGF0aClcbiAgICAgICAgICAgIGlmIChnaXZlblBhdGguZW5kc1dpdGgoJy8nKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2l2ZW5QYXRoLnN1YnN0cmluZygwLCBnaXZlblBhdGgubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIHJldHVybiBnaXZlblBhdGhcbiAgICAgICAgfSkpKVxuICAgIH1cbiAgICAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gZmlsZSBoYW5kbGVyXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBmaWxlIHBhdGgvbmFtZSBwbGFjZWhvbGRlciByZXBsYWNlbWVudHMgd2l0aCBnaXZlbiBidW5kbGVcbiAgICAgKiBhc3NvY2lhdGVkIGluZm9ybWF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZmlsZVBhdGhUZW1wbGF0ZSAtIEZpbGUgcGF0aCB0byBwcm9jZXNzIHBsYWNlaG9sZGVyIGluLlxuICAgICAqIEBwYXJhbSBpbmZvcm1hdGlvbnMgLSBTY29wZSB0byB1c2UgZm9yIHByb2Nlc3NpbmcuXG4gICAgICogQHJldHVybnMgUHJvY2Vzc2VkIGZpbGUgcGF0aC5cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVuZGVyRmlsZVBhdGhUZW1wbGF0ZShcbiAgICAgICAgZmlsZVBhdGhUZW1wbGF0ZTpzdHJpbmcsIGluZm9ybWF0aW9uczp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7XG4gICAgICAgICAgICAnW25hbWVdJzogJy5fX2R1bW15X18nLCAnW2lkXSc6ICcuX19kdW1teV9fJyxcbiAgICAgICAgICAgICdbaGFzaF0nOiAnLl9fZHVtbXlfXydcbiAgICAgICAgfVxuICAgICk6c3RyaW5nIHtcbiAgICAgICAgbGV0IGZpbGVQYXRoOnN0cmluZyA9IGZpbGVQYXRoVGVtcGxhdGVcbiAgICAgICAgZm9yIChjb25zdCBwbGFjZWhvbGRlck5hbWU6c3RyaW5nIGluIGluZm9ybWF0aW9ucylcbiAgICAgICAgICAgIGlmIChpbmZvcm1hdGlvbnMuaGFzT3duUHJvcGVydHkocGxhY2Vob2xkZXJOYW1lKSlcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCA9IGZpbGVQYXRoLnJlcGxhY2UobmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgVG9vbHMuc3RyaW5nRXNjYXBlUmVndWxhckV4cHJlc3Npb25zKHBsYWNlaG9sZGVyTmFtZSksICdnJ1xuICAgICAgICAgICAgICAgICksIGluZm9ybWF0aW9uc1twbGFjZWhvbGRlck5hbWVdKVxuICAgICAgICByZXR1cm4gZmlsZVBhdGhcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgZ2l2ZW4gcmVxdWVzdCB0byBhIHJlc29sdmVkIHJlcXVlc3Qgd2l0aCBnaXZlbiBjb250ZXh0XG4gICAgICogZW1iZWRkZWQuXG4gICAgICogQHBhcmFtIHJlcXVlc3QgLSBSZXF1ZXN0IHRvIGRldGVybWluZS5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIENvbnRleHQgb2YgZ2l2ZW4gcmVxdWVzdCB0byByZXNvbHZlIHJlbGF0aXZlIHRvLlxuICAgICAqIEBwYXJhbSByZWZlcmVuY2VQYXRoIC0gUGF0aCB0byByZXNvbHZlIGxvY2FsIG1vZHVsZXMgcmVsYXRpdmUgdG8uXG4gICAgICogQHBhcmFtIGFsaWFzZXMgLSBNYXBwaW5nIG9mIGFsaWFzZXMgdG8gdGFrZSBpbnRvIGFjY291bnQuXG4gICAgICogQHBhcmFtIG1vZHVsZVJlcGxhY2VtZW50cyAtIE1hcHBpbmcgb2YgcmVwbGFjZW1lbnRzIHRvIHRha2UgaW50b1xuICAgICAqIGFjY291bnQuXG4gICAgICogQHBhcmFtIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzIC0gTGlzdCBvZiByZWxhdGl2ZSBmaWxlIHBhdGggdG8gc2VhcmNoXG4gICAgICogZm9yIG1vZHVsZXMgaW4uXG4gICAgICogQHJldHVybnMgQSBuZXcgcmVzb2x2ZWQgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHlDb250ZXh0KFxuICAgICAgICByZXF1ZXN0OnN0cmluZywgY29udGV4dDpzdHJpbmcgPSAnLi8nLCByZWZlcmVuY2VQYXRoOnN0cmluZyA9ICcuLycsXG4gICAgICAgIGFsaWFzZXM6UGxhaW5PYmplY3QgPSB7fSwgbW9kdWxlUmVwbGFjZW1lbnRzOlBsYWluT2JqZWN0ID0ge30sXG4gICAgICAgIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzOkFycmF5PHN0cmluZz4gPSBbJ25vZGVfbW9kdWxlcyddXG4gICAgKTpzdHJpbmcge1xuICAgICAgICByZWZlcmVuY2VQYXRoID0gcGF0aC5yZXNvbHZlKHJlZmVyZW5jZVBhdGgpXG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXJ0c1dpdGgoJy4vJykgJiYgcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICApICE9PSByZWZlcmVuY2VQYXRoKSB7XG4gICAgICAgICAgICByZXF1ZXN0ID0gcGF0aC5yZXNvbHZlKGNvbnRleHQsIHJlcXVlc3QpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1vZHVsZVBhdGg6c3RyaW5nIG9mIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aFByZWZpeDpzdHJpbmcgPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZVBhdGgsIG1vZHVsZVBhdGgpXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhcnRzV2l0aChwYXRoUHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5zdWJzdHJpbmcocGF0aFByZWZpeC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXJ0c1dpdGgoJy8nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0LnN1YnN0cmluZygxKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSGVscGVyLmFwcGx5TW9kdWxlUmVwbGFjZW1lbnRzKEhlbHBlci5hcHBseUFsaWFzZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnN1YnN0cmluZyhyZXF1ZXN0Lmxhc3RJbmRleE9mKCchJykgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzZXNcbiAgICAgICAgICAgICAgICAgICAgKSwgbW9kdWxlUmVwbGFjZW1lbnRzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXJ0c1dpdGgocmVmZXJlbmNlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5zdWJzdHJpbmcocmVmZXJlbmNlUGF0aC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhcnRzV2l0aCgnLycpKVxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5zdWJzdHJpbmcoMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gSGVscGVyLmFwcGx5TW9kdWxlUmVwbGFjZW1lbnRzKEhlbHBlci5hcHBseUFsaWFzZXMoXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc3Vic3RyaW5nKHJlcXVlc3QubGFzdEluZGV4T2YoJyEnKSArIDEpLCBhbGlhc2VzXG4gICAgICAgICAgICAgICAgKSwgbW9kdWxlUmVwbGFjZW1lbnRzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGdpdmVuIHJlcXVlc3QgcG9pbnRzIHRvIGFuIGV4dGVybmFsIGRlcGVuZGVuY3kgbm90IG1haW50YWluZWRcbiAgICAgKiBieSBjdXJyZW50IHBhY2thZ2UgY29udGV4dC5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtIFJlcXVlc3QgdG8gZGV0ZXJtaW5lLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IC0gQ29udGV4dCBvZiBjdXJyZW50IHByb2plY3QuXG4gICAgICogQHBhcmFtIHJlcXVlc3RDb250ZXh0IC0gQ29udGV4dCBvZiBnaXZlbiByZXF1ZXN0IHRvIHJlc29sdmUgcmVsYXRpdmUgdG8uXG4gICAgICogQHBhcmFtIG5vcm1hbGl6ZWRJbnRlcm5hbEluamVjdGlvbiAtIE1hcHBpbmcgb2YgY2h1bmsgbmFtZXMgdG8gbW9kdWxlc1xuICAgICAqIHdoaWNoIHNob3VsZCBiZSBpbmplY3RlZC5cbiAgICAgKiBAcGFyYW0gZXh0ZXJuYWxNb2R1bGVMb2NhdGlvbnMgLSBBcnJheSBpZiBwYXRocyB3aGVyZSBleHRlcm5hbCBtb2R1bGVzXG4gICAgICogdGFrZSBwbGFjZS5cbiAgICAgKiBAcGFyYW0gYWxpYXNlcyAtIE1hcHBpbmcgb2YgYWxpYXNlcyB0byB0YWtlIGludG8gYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gbW9kdWxlUmVwbGFjZW1lbnRzIC0gTWFwcGluZyBvZiByZXBsYWNlbWVudHMgdG8gdGFrZSBpbnRvXG4gICAgICogYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9ucyAtIExpc3Qgb2YgZmlsZSBhbmQgbW9kdWxlIGV4dGVuc2lvbnMgdG8gdGFrZSBpbnRvXG4gICAgICogYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlUGF0aCAtIFBhdGggdG8gcmVzb2x2ZSBsb2NhbCBtb2R1bGVzIHJlbGF0aXZlIHRvLlxuICAgICAqIEBwYXJhbSBwYXRoc1RvSWdub3JlIC0gUGF0aHMgd2hpY2ggbWFya3MgbG9jYXRpb24gdG8gaWdub3JlLlxuICAgICAqIEBwYXJhbSByZWxhdGl2ZU1vZHVsZUZpbGVQYXRocyAtIExpc3Qgb2YgcmVsYXRpdmUgZmlsZSBwYXRoIHRvIHNlYXJjaFxuICAgICAqIGZvciBtb2R1bGVzIGluLlxuICAgICAqIEBwYXJhbSBwYWNrYWdlRW50cnlGaWxlTmFtZXMgLSBMaXN0IG9mIHBhY2thZ2UgZW50cnkgZmlsZSBuYW1lcyB0b1xuICAgICAqIHNlYXJjaCBmb3IuIFRoZSBtYWdpYyBuYW1lIFwiX19wYWNrYWdlX19cIiB3aWxsIHNlYXJjaCBmb3IgYW4gYXBwcmVjaWF0ZVxuICAgICAqIGVudHJ5IGluIGEgXCJwYWNrYWdlLmpzb25cIiBmaWxlLlxuICAgICAqIEBwYXJhbSBwYWNrYWdlTWFpblByb3BlcnR5TmFtZXMgLSBMaXN0IG9mIHBhY2thZ2UgZmlsZSBtYWluIHByb3BlcnR5XG4gICAgICogbmFtZXMgdG8gc2VhcmNoIGZvciBwYWNrYWdlIHJlcHJlc2VudGluZyBlbnRyeSBtb2R1bGUgZGVmaW5pdGlvbnMuXG4gICAgICogQHBhcmFtIHBhY2thZ2VBbGlhc1Byb3BlcnR5TmFtZXMgLSBMaXN0IG9mIHBhY2thZ2UgZmlsZSBhbGlhcyBwcm9wZXJ0eVxuICAgICAqIG5hbWVzIHRvIHNlYXJjaCBmb3IgcGFja2FnZSBzcGVjaWZpYyBtb2R1bGUgYWxpYXNlcy5cbiAgICAgKiBAcGFyYW0gaW5jbHVkZVBhdHRlcm4gLSBBcnJheSBvZiByZWd1bGFyIGV4cHJlc3Npb25zIHRvIGV4cGxpY2l0bHkgbWFya1xuICAgICAqIGFzIGV4dGVybmFsIGRlcGVuZGVuY3kuXG4gICAgICogQHBhcmFtIGV4Y2x1ZGVQYXR0ZXJuIC0gQXJyYXkgb2YgcmVndWxhciBleHByZXNzaW9ucyB0byBleHBsaWNpdGx5IG1hcmtcbiAgICAgKiBhcyBpbnRlcm5hbCBkZXBlbmRlbmN5LlxuICAgICAqIEBwYXJhbSBpblBsYWNlTm9ybWFsTGlicmFyeSAtIEluZGljYXRlcyB3aGV0aGVyIG5vcm1hbCBsaWJyYXJpZXMgc2hvdWxkXG4gICAgICogYmUgZXh0ZXJuYWwgb3Igbm90LlxuICAgICAqIEBwYXJhbSBpblBsYWNlRHluYW1pY0xpYnJhcnkgLSBJbmRpY2F0ZXMgd2hldGhlciByZXF1ZXN0cyB3aXRoXG4gICAgICogaW50ZWdyYXRlZCBsb2FkZXIgY29uZmlndXJhdGlvbnMgc2hvdWxkIGJlIG1hcmtlZCBhcyBleHRlcm5hbCBvciBub3QuXG4gICAgICogQHJldHVybnMgQSBuZXcgcmVzb2x2ZWQgcmVxdWVzdCBpbmRpY2F0aW5nIHdoZXRoZXIgZ2l2ZW4gcmVxdWVzdCBpcyBhblxuICAgICAqIGV4dGVybmFsIG9uZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGV0ZXJtaW5lRXh0ZXJuYWxSZXF1ZXN0KFxuICAgICAgICByZXF1ZXN0OnN0cmluZywgY29udGV4dDpzdHJpbmcgPSAnLi8nLCByZXF1ZXN0Q29udGV4dDpzdHJpbmcgPSAnLi8nLFxuICAgICAgICBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb246Tm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uID0ge30sXG4gICAgICAgIGV4dGVybmFsTW9kdWxlTG9jYXRpb25zOkFycmF5PHN0cmluZz4gPSBbJ25vZGVfbW9kdWxlcyddLFxuICAgICAgICBhbGlhc2VzOlBsYWluT2JqZWN0ID0ge30sIG1vZHVsZVJlcGxhY2VtZW50czpQbGFpbk9iamVjdCA9IHt9LFxuICAgICAgICBleHRlbnNpb25zOkV4dGVuc2lvbnMgPSB7XG4gICAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWw6IFsnLmpzJ10sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWw6IFtcbiAgICAgICAgICAgICAgICAgICAgJy5qcycsICcuanNvbicsICcuY3NzJywgJy5lb3QnLCAnLmdpZicsICcuaHRtbCcsICcuaWNvJyxcbiAgICAgICAgICAgICAgICAgICAgJy5qcGcnLCAnLnBuZycsICcuZWpzJywgJy5zdmcnLCAnLnR0ZicsICcud29mZicsICcud29mZjInXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSwgbW9kdWxlOiBbXVxuICAgICAgICB9LCByZWZlcmVuY2VQYXRoOnN0cmluZyA9ICcuLycsIHBhdGhzVG9JZ25vcmU6QXJyYXk8c3RyaW5nPiA9IFsnLmdpdCddLFxuICAgICAgICByZWxhdGl2ZU1vZHVsZUZpbGVQYXRoczpBcnJheTxzdHJpbmc+ID0gWydub2RlX21vZHVsZXMnXSxcbiAgICAgICAgcGFja2FnZUVudHJ5RmlsZU5hbWVzOkFycmF5PHN0cmluZz4gPSBbJ2luZGV4JywgJ21haW4nXSxcbiAgICAgICAgcGFja2FnZU1haW5Qcm9wZXJ0eU5hbWVzOkFycmF5PHN0cmluZz4gPSBbJ21haW4nLCAnbW9kdWxlJ10sXG4gICAgICAgIHBhY2thZ2VBbGlhc1Byb3BlcnR5TmFtZXM6QXJyYXk8c3RyaW5nPiA9IFtdLFxuICAgICAgICBpbmNsdWRlUGF0dGVybjpBcnJheTxzdHJpbmd8UmVnRXhwPiA9IFtdLFxuICAgICAgICBleGNsdWRlUGF0dGVybjpBcnJheTxzdHJpbmd8UmVnRXhwPiA9IFtdLFxuICAgICAgICBpblBsYWNlTm9ybWFsTGlicmFyeTpib29sZWFuID0gZmFsc2UsXG4gICAgICAgIGluUGxhY2VEeW5hbWljTGlicmFyeTpib29sZWFuID0gdHJ1ZVxuICAgICk6P3N0cmluZyB7XG4gICAgICAgIGNvbnRleHQgPSBwYXRoLnJlc29sdmUoY29udGV4dClcbiAgICAgICAgcmVxdWVzdENvbnRleHQgPSBwYXRoLnJlc29sdmUocmVxdWVzdENvbnRleHQpXG4gICAgICAgIHJlZmVyZW5jZVBhdGggPSBwYXRoLnJlc29sdmUocmVmZXJlbmNlUGF0aClcbiAgICAgICAgLy8gTk9URTogV2UgYXBwbHkgYWxpYXMgb24gZXh0ZXJuYWxzIGFkZGl0aW9uYWxseS5cbiAgICAgICAgbGV0IHJlc29sdmVkUmVxdWVzdDpzdHJpbmcgPSBIZWxwZXIuYXBwbHlNb2R1bGVSZXBsYWNlbWVudHMoXG4gICAgICAgICAgICBIZWxwZXIuYXBwbHlBbGlhc2VzKHJlcXVlc3Quc3Vic3RyaW5nKFxuICAgICAgICAgICAgICAgIHJlcXVlc3QubGFzdEluZGV4T2YoJyEnKSArIDFcbiAgICAgICAgICAgICksIGFsaWFzZXMpLCBtb2R1bGVSZXBsYWNlbWVudHMpXG4gICAgICAgIC8qXG4gICAgICAgICAgICBOT1RFOiBBbGlhc2VzIGFuZCBtb2R1bGUgcmVwbGFjZW1lbnRzIGRvZXNuJ3QgaGF2ZSB0byBiZSBmb3J3YXJkZWRcbiAgICAgICAgICAgIHNpbmNlIHdlIHBhc3MgYW4gYWxyZWFkeSByZXNvbHZlZCByZXF1ZXN0LlxuICAgICAgICAqL1xuICAgICAgICBsZXQgZmlsZVBhdGg6P3N0cmluZyA9IEhlbHBlci5kZXRlcm1pbmVNb2R1bGVGaWxlUGF0aChcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdCwge30sIHt9LCBleHRlbnNpb25zLCBjb250ZXh0LCByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgICAgIHBhdGhzVG9JZ25vcmUsIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzLCBwYWNrYWdlRW50cnlGaWxlTmFtZXMsXG4gICAgICAgICAgICBwYWNrYWdlTWFpblByb3BlcnR5TmFtZXMsIHBhY2thZ2VBbGlhc1Byb3BlcnR5TmFtZXMpXG4gICAgICAgIC8qXG4gICAgICAgICAgICBOT1RFOiBXZSBtYXJrIGRlcGVuZGVuY2llcyBhcyBleHRlcm5hbCBpZiB0aGVyZSBmaWxlIGNvdWxkbid0IGJlXG4gICAgICAgICAgICByZXNvbHZlZCBvciBhcmUgc3BlY2lmaWVkIHRvIGJlIGV4dGVybmFsIGV4cGxpY2l0bHkuXG4gICAgICAgICovXG4gICAgICAgIGlmICghKGZpbGVQYXRoIHx8IGluUGxhY2VOb3JtYWxMaWJyYXJ5KSB8fCBUb29scy5pc0FueU1hdGNoaW5nKFxuICAgICAgICAgICAgcmVzb2x2ZWRSZXF1ZXN0LCBpbmNsdWRlUGF0dGVyblxuICAgICAgICApKVxuICAgICAgICAgICAgcmV0dXJuIEhlbHBlci5hcHBseUNvbnRleHQoXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgcmVmZXJlbmNlUGF0aCxcbiAgICAgICAgICAgICAgICBhbGlhc2VzLCBtb2R1bGVSZXBsYWNlbWVudHMsIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzKVxuICAgICAgICBpZiAoVG9vbHMuaXNBbnlNYXRjaGluZyhyZXNvbHZlZFJlcXVlc3QsIGV4Y2x1ZGVQYXR0ZXJuKSlcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIGZvciAoY29uc3QgY2h1bmtOYW1lOnN0cmluZyBpbiBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb24pXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uLmhhc093blByb3BlcnR5KGNodW5rTmFtZSkpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtb2R1bGVJRDpzdHJpbmcgb2Ygbm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uW1xuICAgICAgICAgICAgICAgICAgICBjaHVua05hbWVcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBpZiAoSGVscGVyLmRldGVybWluZU1vZHVsZUZpbGVQYXRoKFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlSUQsIGFsaWFzZXMsIG1vZHVsZVJlcGxhY2VtZW50cywgZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQsIHJlcXVlc3RDb250ZXh0LCBwYXRoc1RvSWdub3JlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVNb2R1bGVGaWxlUGF0aHMsIHBhY2thZ2VFbnRyeUZpbGVOYW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VNYWluUHJvcGVydHlOYW1lcywgcGFja2FnZUFsaWFzUHJvcGVydHlOYW1lc1xuICAgICAgICAgICAgICAgICAgICApID09PSBmaWxlUGF0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIC8qXG4gICAgICAgICAgICBOT1RFOiBXZSBtYXJrIGRlcGVuZGVuY2llcyBhcyBleHRlcm5hbCBpZiB0aGV5IGRvZXMgbm90IGNvbnRhaW4gYVxuICAgICAgICAgICAgbG9hZGVyIGluIHRoZWlyIHJlcXVlc3QgYW5kIGFyZW4ndCBwYXJ0IG9mIHRoZSBjdXJyZW50IG1haW4gcGFja2FnZVxuICAgICAgICAgICAgb3IgaGF2ZSBhIGZpbGUgZXh0ZW5zaW9uIG90aGVyIHRoYW4gamF2YVNjcmlwdCBhd2FyZS5cbiAgICAgICAgKi9cbiAgICAgICAgaWYgKCFpblBsYWNlTm9ybWFsTGlicmFyeSAmJiAoXG4gICAgICAgICAgICBleHRlbnNpb25zLmZpbGUuZXh0ZXJuYWwubGVuZ3RoID09PSAwIHx8IGZpbGVQYXRoICYmXG4gICAgICAgICAgICBleHRlbnNpb25zLmZpbGUuZXh0ZXJuYWwuaW5jbHVkZXMocGF0aC5leHRuYW1lKGZpbGVQYXRoKSkgfHxcbiAgICAgICAgICAgICFmaWxlUGF0aCAmJiBleHRlbnNpb25zLmZpbGUuZXh0ZXJuYWwuaW5jbHVkZXMoJycpXG4gICAgICAgICkgJiYgIShpblBsYWNlRHluYW1pY0xpYnJhcnkgJiYgcmVxdWVzdC5pbmNsdWRlcygnIScpKSAmJiAoXG4gICAgICAgICAgICAhZmlsZVBhdGggJiYgaW5QbGFjZUR5bmFtaWNMaWJyYXJ5IHx8IGZpbGVQYXRoICYmIChcbiAgICAgICAgICAgICFmaWxlUGF0aC5zdGFydHNXaXRoKGNvbnRleHQpIHx8IEhlbHBlci5pc0ZpbGVQYXRoSW5Mb2NhdGlvbihcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCwgZXh0ZXJuYWxNb2R1bGVMb2NhdGlvbnMpKVxuICAgICAgICApKVxuICAgICAgICAgICAgcmV0dXJuIEhlbHBlci5hcHBseUNvbnRleHQoXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgcmVmZXJlbmNlUGF0aCwgYWxpYXNlcyxcbiAgICAgICAgICAgICAgICBtb2R1bGVSZXBsYWNlbWVudHMsIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGFzc2V0IHR5cGUgb2YgZ2l2ZW4gZmlsZS5cbiAgICAgKiBAcGFyYW0gZmlsZVBhdGggLSBQYXRoIHRvIGZpbGUgdG8gYW5hbHlzZS5cbiAgICAgKiBAcGFyYW0gYnVpbGRDb25maWd1cmF0aW9uIC0gTWV0YSBpbmZvcm1hdGlvbnMgZm9yIGF2YWlsYWJsZSBhc3NldFxuICAgICAqIHR5cGVzLlxuICAgICAqIEBwYXJhbSBwYXRocyAtIExpc3Qgb2YgcGF0aHMgdG8gc2VhcmNoIGlmIGdpdmVuIHBhdGggZG9lc24ndCByZWZlcmVuY2VcbiAgICAgKiBhIGZpbGUgZGlyZWN0bHkuXG4gICAgICogQHJldHVybnMgRGV0ZXJtaW5lZCBmaWxlIHR5cGUgb3IgXCJudWxsXCIgb2YgZ2l2ZW4gZmlsZSBjb3VsZG4ndCBiZVxuICAgICAqIGRldGVybWluZWQuXG4gICAgICovXG4gICAgc3RhdGljIGRldGVybWluZUFzc2V0VHlwZShcbiAgICAgICAgZmlsZVBhdGg6c3RyaW5nLCBidWlsZENvbmZpZ3VyYXRpb246QnVpbGRDb25maWd1cmF0aW9uLCBwYXRoczpQYXRoXG4gICAgKTo/c3RyaW5nIHtcbiAgICAgICAgbGV0IHJlc3VsdDo/c3RyaW5nID0gbnVsbFxuICAgICAgICBmb3IgKGNvbnN0IHR5cGU6c3RyaW5nIGluIGJ1aWxkQ29uZmlndXJhdGlvbilcbiAgICAgICAgICAgIGlmIChwYXRoLmV4dG5hbWUoXG4gICAgICAgICAgICAgICAgZmlsZVBhdGhcbiAgICAgICAgICAgICkgPT09IGAuJHtidWlsZENvbmZpZ3VyYXRpb25bdHlwZV0uZXh0ZW5zaW9ufWApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0eXBlXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHR5cGU6c3RyaW5nIG9mIFsnc291cmNlJywgJ3RhcmdldCddKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYXNzZXRUeXBlOnN0cmluZyBpbiBwYXRoc1t0eXBlXS5hc3NldClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhzW3R5cGVdLmFzc2V0Lmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRUeXBlXG4gICAgICAgICAgICAgICAgICAgICkgJiYgYXNzZXRUeXBlICE9PSAnYmFzZScgJiZcbiAgICAgICAgICAgICAgICAgICAgcGF0aHNbdHlwZV0uYXNzZXRbYXNzZXRUeXBlXSAmJiBmaWxlUGF0aC5zdGFydHNXaXRoKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHNbdHlwZV0uYXNzZXRbYXNzZXRUeXBlXVxuICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFzc2V0VHlwZVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBwcm9wZXJ0eSB3aXRoIGEgc3RvcmVkIGFycmF5IG9mIGFsbCBtYXRjaGluZyBmaWxlIHBhdGhzLCB3aGljaFxuICAgICAqIG1hdGNoZXMgZWFjaCBidWlsZCBjb25maWd1cmF0aW9uIGluIGdpdmVuIGVudHJ5IHBhdGggYW5kIGNvbnZlcnRzIGdpdmVuXG4gICAgICogYnVpbGQgY29uZmlndXJhdGlvbiBpbnRvIGEgc29ydGVkIGFycmF5IHdlcmUgamF2YVNjcmlwdCBmaWxlcyB0YWtlc1xuICAgICAqIHByZWNlZGVuY2UuXG4gICAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb24gLSBHaXZlbiBidWlsZCBjb25maWd1cmF0aW9ucy5cbiAgICAgKiBAcGFyYW0gZW50cnlQYXRoIC0gUGF0aCB0byBhbmFseXNlIG5lc3RlZCBzdHJ1Y3R1cmUuXG4gICAgICogQHBhcmFtIHBhdGhzVG9JZ25vcmUgLSBQYXRocyB3aGljaCBtYXJrcyBsb2NhdGlvbiB0byBpZ25vcmUuXG4gICAgICogQHBhcmFtIG1haW5GaWxlQmFzZW5hbWVzIC0gRmlsZSBiYXNlbmFtZXMgdG8gc29ydCBpbnRvIHRoZSBmcm9udC5cbiAgICAgKiBAcmV0dXJucyBDb252ZXJ0ZWQgYnVpbGQgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVzb2x2ZUJ1aWxkQ29uZmlndXJhdGlvbkZpbGVQYXRocyhcbiAgICAgICAgY29uZmlndXJhdGlvbjpCdWlsZENvbmZpZ3VyYXRpb24sIGVudHJ5UGF0aDpzdHJpbmcgPSAnLi8nLFxuICAgICAgICBwYXRoc1RvSWdub3JlOkFycmF5PHN0cmluZz4gPSBbJy5naXQnXSxcbiAgICAgICAgbWFpbkZpbGVCYXNlbmFtZXM6QXJyYXk8c3RyaW5nPiA9IFsnaW5kZXgnLCAnbWFpbiddXG4gICAgKTpSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbiB7XG4gICAgICAgIGNvbnN0IGJ1aWxkQ29uZmlndXJhdGlvbjpSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbiA9IFtdXG4gICAgICAgIGZvciAoY29uc3QgdHlwZTpzdHJpbmcgaW4gY29uZmlndXJhdGlvbilcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SXRlbTpSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbkl0ZW0gPVxuICAgICAgICAgICAgICAgICAgICBUb29scy5leHRlbmRPYmplY3QodHJ1ZSwge2ZpbGVQYXRoczogW119LCBjb25maWd1cmF0aW9uW1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZV0pXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlOkZpbGUgb2YgVG9vbHMud2Fsa0RpcmVjdG9yeVJlY3Vyc2l2ZWx5U3luYyhcbiAgICAgICAgICAgICAgICAgICAgZW50cnlQYXRoLCAoZmlsZTpGaWxlKTo/ZmFsc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEhlbHBlci5pc0ZpbGVQYXRoSW5Mb2NhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnBhdGgsIHBhdGhzVG9JZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zdGF0LmlzRmlsZSgpICYmIHBhdGguZXh0bmFtZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUucGF0aFxuICAgICAgICAgICAgICAgICAgICApLnN1YnN0cmluZygxKSA9PT0gbmV3SXRlbS5leHRlbnNpb24gJiYgIShcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAobmV3SXRlbS5maWxlUGF0aFBhdHRlcm4pXG4gICAgICAgICAgICAgICAgICAgICkudGVzdChmaWxlLnBhdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SXRlbS5maWxlUGF0aHMucHVzaChmaWxlLnBhdGgpXG4gICAgICAgICAgICAgICAgbmV3SXRlbS5maWxlUGF0aHMuc29ydCgoXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0RmlsZVBhdGg6c3RyaW5nLCBzZWNvbmRGaWxlUGF0aDpzdHJpbmdcbiAgICAgICAgICAgICAgICApOm51bWJlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYWluRmlsZUJhc2VuYW1lcy5pbmNsdWRlcyhwYXRoLmJhc2VuYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RGaWxlUGF0aCwgcGF0aC5leHRuYW1lKGZpcnN0RmlsZVBhdGgpXG4gICAgICAgICAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFpbkZpbGVCYXNlbmFtZXMuaW5jbHVkZXMocGF0aC5iYXNlbmFtZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRGaWxlUGF0aCwgcGF0aC5leHRuYW1lKHNlY29uZEZpbGVQYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYWluRmlsZUJhc2VuYW1lcy5pbmNsdWRlcyhwYXRoLmJhc2VuYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kRmlsZVBhdGgsIHBhdGguZXh0bmFtZShzZWNvbmRGaWxlUGF0aClcbiAgICAgICAgICAgICAgICAgICAgKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnVpbGRDb25maWd1cmF0aW9uLnB1c2gobmV3SXRlbSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1aWxkQ29uZmlndXJhdGlvbi5zb3J0KChcbiAgICAgICAgICAgIGZpcnN0OlJlc29sdmVkQnVpbGRDb25maWd1cmF0aW9uSXRlbSxcbiAgICAgICAgICAgIHNlY29uZDpSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbkl0ZW1cbiAgICAgICAgKTpudW1iZXIgPT4ge1xuICAgICAgICAgICAgaWYgKGZpcnN0Lm91dHB1dEV4dGVuc2lvbiAhPT0gc2Vjb25kLm91dHB1dEV4dGVuc2lvbikge1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdC5vdXRwdXRFeHRlbnNpb24gPT09ICdqcycpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmQub3V0cHV0RXh0ZW5zaW9uID09PSAnanMnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdC5vdXRwdXRFeHRlbnNpb24gPCBzZWNvbmQub3V0cHV0RXh0ZW5zaW9uID8gLTEgOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9KVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGFsbCBmaWxlIGFuZCBkaXJlY3RvcnkgcGF0aHMgcmVsYXRlZCB0byBnaXZlbiBpbnRlcm5hbFxuICAgICAqIG1vZHVsZXMgYXMgYXJyYXkuXG4gICAgICogQHBhcmFtIGludGVybmFsSW5qZWN0aW9uIC0gTGlzdCBvZiBtb2R1bGUgaWRzIG9yIG1vZHVsZSBmaWxlIHBhdGhzLlxuICAgICAqIEBwYXJhbSBhbGlhc2VzIC0gTWFwcGluZyBvZiBhbGlhc2VzIHRvIHRha2UgaW50byBhY2NvdW50LlxuICAgICAqIEBwYXJhbSBtb2R1bGVSZXBsYWNlbWVudHMgLSBNYXBwaW5nIG9mIG1vZHVsZSByZXBsYWNlbWVudHMgdG8gdGFrZSBpbnRvXG4gICAgICogYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9ucyAtIExpc3Qgb2YgZmlsZSBhbmQgbW9kdWxlIGV4dGVuc2lvbnMgdG8gdGFrZSBpbnRvXG4gICAgICogYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIEZpbGUgcGF0aCB0byByZXNvbHZlIHJlbGF0aXZlIHRvLlxuICAgICAqIEBwYXJhbSByZWZlcmVuY2VQYXRoIC0gUGF0aCB0byBzZWFyY2ggZm9yIGxvY2FsIG1vZHVsZXMuXG4gICAgICogQHBhcmFtIHBhdGhzVG9JZ25vcmUgLSBQYXRocyB3aGljaCBtYXJrcyBsb2NhdGlvbiB0byBpZ25vcmUuXG4gICAgICogQHBhcmFtIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzIC0gTGlzdCBvZiByZWxhdGl2ZSBmaWxlIHBhdGggdG8gc2VhcmNoXG4gICAgICogZm9yIG1vZHVsZXMgaW4uXG4gICAgICogQHBhcmFtIHBhY2thZ2VFbnRyeUZpbGVOYW1lcyAtIExpc3Qgb2YgcGFja2FnZSBlbnRyeSBmaWxlIG5hbWVzIHRvXG4gICAgICogc2VhcmNoIGZvci4gVGhlIG1hZ2ljIG5hbWUgXCJfX3BhY2thZ2VfX1wiIHdpbGwgc2VhcmNoIGZvciBhbiBhcHByZWNpYXRlXG4gICAgICogZW50cnkgaW4gYSBcInBhY2thZ2UuanNvblwiIGZpbGUuXG4gICAgICogQHBhcmFtIHBhY2thZ2VNYWluUHJvcGVydHlOYW1lcyAtIExpc3Qgb2YgcGFja2FnZSBmaWxlIG1haW4gcHJvcGVydHlcbiAgICAgKiBuYW1lcyB0byBzZWFyY2ggZm9yIHBhY2thZ2UgcmVwcmVzZW50aW5nIGVudHJ5IG1vZHVsZSBkZWZpbml0aW9ucy5cbiAgICAgKiBAcGFyYW0gcGFja2FnZUFsaWFzUHJvcGVydHlOYW1lcyAtIExpc3Qgb2YgcGFja2FnZSBmaWxlIGFsaWFzIHByb3BlcnR5XG4gICAgICogbmFtZXMgdG8gc2VhcmNoIGZvciBwYWNrYWdlIHNwZWNpZmljIG1vZHVsZSBhbGlhc2VzLlxuICAgICAqIEByZXR1cm5zIE9iamVjdCB3aXRoIGEgZmlsZSBwYXRoIGFuZCBkaXJlY3RvcnkgcGF0aCBrZXkgbWFwcGluZyB0b1xuICAgICAqIGNvcnJlc3BvbmRpbmcgbGlzdCBvZiBwYXRocy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGV0ZXJtaW5lTW9kdWxlTG9jYXRpb25zKFxuICAgICAgICBpbnRlcm5hbEluamVjdGlvbjpJbnRlcm5hbEluamVjdGlvbiwgYWxpYXNlczpQbGFpbk9iamVjdCA9IHt9LFxuICAgICAgICBtb2R1bGVSZXBsYWNlbWVudHM6UGxhaW5PYmplY3QgPSB7fSwgZXh0ZW5zaW9uczpFeHRlbnNpb25zID0ge1xuICAgICAgICAgICAgZmlsZToge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsOiBbJy5qcyddLFxuICAgICAgICAgICAgICAgIGludGVybmFsOiBbXG4gICAgICAgICAgICAgICAgICAgICcuanMnLCAnLmpzb24nLCAnLmNzcycsICcuZW90JywgJy5naWYnLCAnLmh0bWwnLCAnLmljbycsXG4gICAgICAgICAgICAgICAgICAgICcuanBnJywgJy5wbmcnLCAnLmVqcycsICcuc3ZnJywgJy50dGYnLCAnLndvZmYnLCAnLndvZmYyJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sIG1vZHVsZTogW11cbiAgICAgICAgfSwgY29udGV4dDpzdHJpbmcgPSAnLi8nLCByZWZlcmVuY2VQYXRoOnN0cmluZyA9ICcnLFxuICAgICAgICBwYXRoc1RvSWdub3JlOkFycmF5PHN0cmluZz4gPSBbJy5naXQnXSxcbiAgICAgICAgcmVsYXRpdmVNb2R1bGVGaWxlUGF0aHM6QXJyYXk8c3RyaW5nPiA9IFsnJywgJ25vZGVfbW9kdWxlcycsICcuLi8nXSxcbiAgICAgICAgcGFja2FnZUVudHJ5RmlsZU5hbWVzOkFycmF5PHN0cmluZz4gPSBbXG4gICAgICAgICAgICAnX19wYWNrYWdlX18nLCAnJywgJ2luZGV4JywgJ21haW4nXSxcbiAgICAgICAgcGFja2FnZU1haW5Qcm9wZXJ0eU5hbWVzOkFycmF5PHN0cmluZz4gPSBbJ21haW4nLCAnbW9kdWxlJ10sXG4gICAgICAgIHBhY2thZ2VBbGlhc1Byb3BlcnR5TmFtZXM6QXJyYXk8c3RyaW5nPiA9IFtdXG4gICAgKTp7ZmlsZVBhdGhzOkFycmF5PHN0cmluZz47ZGlyZWN0b3J5UGF0aHM6QXJyYXk8c3RyaW5nPn0ge1xuICAgICAgICBjb25zdCBmaWxlUGF0aHM6QXJyYXk8c3RyaW5nPiA9IFtdXG4gICAgICAgIGNvbnN0IGRpcmVjdG9yeVBhdGhzOkFycmF5PHN0cmluZz4gPSBbXVxuICAgICAgICBjb25zdCBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb246Tm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uID1cbiAgICAgICAgICAgIEhlbHBlci5yZXNvbHZlTW9kdWxlc0luRm9sZGVycyhcbiAgICAgICAgICAgICAgICBIZWxwZXIubm9ybWFsaXplSW50ZXJuYWxJbmplY3Rpb24oaW50ZXJuYWxJbmplY3Rpb24pLFxuICAgICAgICAgICAgICAgIGFsaWFzZXMsIG1vZHVsZVJlcGxhY2VtZW50cywgZXh0ZW5zaW9ucywgY29udGV4dCxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VQYXRoLCBwYXRoc1RvSWdub3JlLCByZWxhdGl2ZU1vZHVsZUZpbGVQYXRocyxcbiAgICAgICAgICAgICAgICBwYWNrYWdlRW50cnlGaWxlTmFtZXMsIHBhY2thZ2VNYWluUHJvcGVydHlOYW1lcyxcbiAgICAgICAgICAgICAgICBwYWNrYWdlQWxpYXNQcm9wZXJ0eU5hbWVzKVxuICAgICAgICBmb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgaW4gbm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uKVxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRJbnRlcm5hbEluamVjdGlvbi5oYXNPd25Qcm9wZXJ0eShjaHVua05hbWUpKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbW9kdWxlSUQ6c3RyaW5nIG9mIG5vcm1hbGl6ZWRJbnRlcm5hbEluamVjdGlvbltcbiAgICAgICAgICAgICAgICAgICAgY2h1bmtOYW1lXG4gICAgICAgICAgICAgICAgXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlUGF0aDo/c3RyaW5nID0gSGVscGVyLmRldGVybWluZU1vZHVsZUZpbGVQYXRoKFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlSUQsIGFsaWFzZXMsIG1vZHVsZVJlcGxhY2VtZW50cywgZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQsIHJlZmVyZW5jZVBhdGgsIHBhdGhzVG9JZ25vcmUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZU1vZHVsZUZpbGVQYXRocywgcGFja2FnZUVudHJ5RmlsZU5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFja2FnZU1haW5Qcm9wZXJ0eU5hbWVzLCBwYWNrYWdlQWxpYXNQcm9wZXJ0eU5hbWVzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVQYXRocy5wdXNoKGZpbGVQYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0b3J5UGF0aDpzdHJpbmcgPSBwYXRoLmRpcm5hbWUoZmlsZVBhdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdG9yeVBhdGhzLmluY2x1ZGVzKGRpcmVjdG9yeVBhdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yeVBhdGhzLnB1c2goZGlyZWN0b3J5UGF0aClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtmaWxlUGF0aHMsIGRpcmVjdG9yeVBhdGhzfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGEgbGlzdCBvZiBjb25jcmV0ZSBmaWxlIHBhdGhzIGZvciBnaXZlbiBtb2R1bGUgaWQgcG9pbnRpbmcgdG9cbiAgICAgKiBhIGZvbGRlciB3aGljaCBpc24ndCBhIHBhY2thZ2UuXG4gICAgICogQHBhcmFtIG5vcm1hbGl6ZWRJbnRlcm5hbEluamVjdGlvbiAtIEluamVjdGlvbiBkYXRhIHN0cnVjdHVyZSBvZlxuICAgICAqIG1vZHVsZXMgd2l0aCBmb2xkZXIgcmVmZXJlbmNlcyB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSBhbGlhc2VzIC0gTWFwcGluZyBvZiBhbGlhc2VzIHRvIHRha2UgaW50byBhY2NvdW50LlxuICAgICAqIEBwYXJhbSBtb2R1bGVSZXBsYWNlbWVudHMgLSBNYXBwaW5nIG9mIHJlcGxhY2VtZW50cyB0byB0YWtlIGludG9cbiAgICAgKiBhY2NvdW50LlxuICAgICAqIEBwYXJhbSBleHRlbnNpb25zIC0gTGlzdCBvZiBmaWxlIGFuZCBtb2R1bGUgZXh0ZW5zaW9ucy5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIEZpbGUgcGF0aCB0byBkZXRlcm1pbmUgcmVsYXRpdmUgdG8uXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZVBhdGggLSBQYXRoIHRvIHJlc29sdmUgbG9jYWwgbW9kdWxlcyByZWxhdGl2ZSB0by5cbiAgICAgKiBAcGFyYW0gcGF0aHNUb0lnbm9yZSAtIFBhdGhzIHdoaWNoIG1hcmtzIGxvY2F0aW9uIHRvIGlnbm9yZS5cbiAgICAgKiBAcmV0dXJucyBHaXZlbiBpbmplY3Rpb25zIHdpdGggcmVzb2x2ZWQgZm9sZGVyIHBvaW50aW5nIG1vZHVsZXMuXG4gICAgICovXG4gICAgc3RhdGljIHJlc29sdmVNb2R1bGVzSW5Gb2xkZXJzKFxuICAgICAgICBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb246Tm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uLFxuICAgICAgICBhbGlhc2VzOlBsYWluT2JqZWN0ID0ge30sIG1vZHVsZVJlcGxhY2VtZW50czpQbGFpbk9iamVjdCA9IHt9LFxuICAgICAgICBleHRlbnNpb25zOkV4dGVuc2lvbnMgPSB7XG4gICAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWw6IFsnLmpzJ10sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWw6IFtcbiAgICAgICAgICAgICAgICAgICAgJy5qcycsICcuanNvbicsICcuY3NzJywgJy5lb3QnLCAnLmdpZicsICcuaHRtbCcsICcuaWNvJyxcbiAgICAgICAgICAgICAgICAgICAgJy5qcGcnLCAnLnBuZycsICcuZWpzJywgJy5zdmcnLCAnLnR0ZicsICcud29mZicsICcud29mZjInXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSwgbW9kdWxlOiBbXVxuICAgICAgICB9LCBjb250ZXh0OnN0cmluZyA9ICcuLycsIHJlZmVyZW5jZVBhdGg6c3RyaW5nID0gJycsXG4gICAgICAgIHBhdGhzVG9JZ25vcmU6QXJyYXk8c3RyaW5nPiA9IFsnLmdpdCddXG4gICAgKTpOb3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb24ge1xuICAgICAgICBpZiAocmVmZXJlbmNlUGF0aC5zdGFydHNXaXRoKCcvJykpXG4gICAgICAgICAgICByZWZlcmVuY2VQYXRoID0gcGF0aC5yZWxhdGl2ZShjb250ZXh0LCByZWZlcmVuY2VQYXRoKVxuICAgICAgICBmb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgaW4gbm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uKVxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRJbnRlcm5hbEluamVjdGlvbi5oYXNPd25Qcm9wZXJ0eShjaHVua05hbWUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4Om51bWJlciA9IDBcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBtb2R1bGVJRDpzdHJpbmcgb2Ygbm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uW1xuICAgICAgICAgICAgICAgICAgICBjaHVua05hbWVcbiAgICAgICAgICAgICAgICBdKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUlEID0gSGVscGVyLmFwcGx5TW9kdWxlUmVwbGFjZW1lbnRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgSGVscGVyLmFwcGx5QWxpYXNlcyhIZWxwZXIuc3RyaXBMb2FkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlSURcbiAgICAgICAgICAgICAgICAgICAgICAgICksIGFsaWFzZXMpLCBtb2R1bGVSZXBsYWNlbWVudHMpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aDpzdHJpbmcgPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VQYXRoLCBtb2R1bGVJRClcbiAgICAgICAgICAgICAgICAgICAgaWYgKFRvb2xzLmlzRGlyZWN0b3J5U3luYyhyZXNvbHZlZFBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb25bY2h1bmtOYW1lXS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGU6RmlsZSBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvb2xzLndhbGtEaXJlY3RvcnlSZWN1cnNpdmVseVN5bmMocmVzb2x2ZWRQYXRoLCAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6RmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk6P2ZhbHNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEhlbHBlci5pc0ZpbGVQYXRoSW5Mb2NhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUucGF0aCwgcGF0aHNUb0lnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zdGF0LmlzRmlsZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb25bY2h1bmtOYW1lXS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy4vJyArIHBhdGgucmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlUGF0aCwgcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZFBhdGgsIGZpbGUucGF0aCkpKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZHVsZUlELnN0YXJ0c1dpdGgoXG4gICAgICAgICAgICAgICAgICAgICAgICAnLi8nXG4gICAgICAgICAgICAgICAgICAgICkgJiYgIW1vZHVsZUlELnN0YXJ0c1dpdGgoJy4vJyArIHBhdGgucmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LCByZWZlcmVuY2VQYXRoXG4gICAgICAgICAgICAgICAgICAgICkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZEludGVybmFsSW5qZWN0aW9uW2NodW5rTmFtZV1baW5kZXhdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLi8ke3BhdGgucmVsYXRpdmUoY29udGV4dCwgcmVzb2x2ZWRQYXRoKX1gXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ICs9IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb25cbiAgICB9XG4gICAgLyoqXG4gICAgICogRXZlcnkgaW5qZWN0aW9uIGRlZmluaXRpb24gdHlwZSBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgcGxhaW4gb2JqZWN0XG4gICAgICogKG1hcHBpbmcgZnJvbSBjaHVuayBuYW1lIHRvIGFycmF5IG9mIG1vZHVsZSBpZHMpLiBUaGlzIG1ldGhvZCBjb252ZXJ0c1xuICAgICAqIGVhY2ggcmVwcmVzZW50YXRpb24gaW50byB0aGUgbm9ybWFsaXplZCBwbGFpbiBvYmplY3Qgbm90YXRpb24uXG4gICAgICogQHBhcmFtIGludGVybmFsSW5qZWN0aW9uIC0gR2l2ZW4gaW50ZXJuYWwgaW5qZWN0aW9uIHRvIG5vcm1hbGl6ZS5cbiAgICAgKiBAcmV0dXJucyBOb3JtYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIGdpdmVuIGludGVybmFsIGluamVjdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgbm9ybWFsaXplSW50ZXJuYWxJbmplY3Rpb24oXG4gICAgICAgIGludGVybmFsSW5qZWN0aW9uOkludGVybmFsSW5qZWN0aW9uXG4gICAgKTpOb3JtYWxpemVkSW50ZXJuYWxJbmplY3Rpb24ge1xuICAgICAgICBsZXQgcmVzdWx0Ok5vcm1hbGl6ZWRJbnRlcm5hbEluamVjdGlvbiA9IHt9XG4gICAgICAgIGlmIChpbnRlcm5hbEluamVjdGlvbiBpbnN0YW5jZW9mIE9iamVjdCAmJiBUb29scy5pc1BsYWluT2JqZWN0KFxuICAgICAgICAgICAgaW50ZXJuYWxJbmplY3Rpb25cbiAgICAgICAgKSkge1xuICAgICAgICAgICAgbGV0IGhhc0NvbnRlbnQ6Ym9vbGVhbiA9IGZhbHNlXG4gICAgICAgICAgICBjb25zdCBjaHVua05hbWVzVG9EZWxldGU6QXJyYXk8c3RyaW5nPiA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgaW4gaW50ZXJuYWxJbmplY3Rpb24pXG4gICAgICAgICAgICAgICAgaWYgKGludGVybmFsSW5qZWN0aW9uLmhhc093blByb3BlcnR5KGNodW5rTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGludGVybmFsSW5qZWN0aW9uW2NodW5rTmFtZV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVybmFsSW5qZWN0aW9uW2NodW5rTmFtZV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2NodW5rTmFtZV0gPSBpbnRlcm5hbEluamVjdGlvbltjaHVua05hbWVdXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua05hbWVzVG9EZWxldGUucHVzaChjaHVua05hbWUpXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ29udGVudCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtjaHVua05hbWVdID0gW2ludGVybmFsSW5qZWN0aW9uW2NodW5rTmFtZV1dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNDb250ZW50KVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2h1bmtOYW1lOnN0cmluZyBvZiBjaHVua05hbWVzVG9EZWxldGUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbY2h1bmtOYW1lXVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtpbmRleDogW119XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGludGVybmFsSW5qZWN0aW9uID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJlc3VsdCA9IHtpbmRleDogW2ludGVybmFsSW5qZWN0aW9uXX1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnRlcm5hbEluamVjdGlvbikpXG4gICAgICAgICAgICByZXN1bHQgPSB7aW5kZXg6IGludGVybmFsSW5qZWN0aW9ufVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgYWxsIGNvbmNyZXRlIGZpbGUgcGF0aHMgZm9yIGdpdmVuIGluamVjdGlvbiB3aGljaCBhcmUgbWFya2VkXG4gICAgICogd2l0aCB0aGUgXCJfX2F1dG9fX1wiIGluZGljYXRvci5cbiAgICAgKiBAcGFyYW0gZ2l2ZW5JbmplY3Rpb24gLSBHaXZlbiBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwgaW5qZWN0aW9uIHRvIHRha2VcbiAgICAgKiBpbnRvIGFjY291bnQuXG4gICAgICogQHBhcmFtIGJ1aWxkQ29uZmlndXJhdGlvbnMgLSBSZXNvbHZlZCBidWlsZCBjb25maWd1cmF0aW9uLlxuICAgICAqIEBwYXJhbSBtb2R1bGVzVG9FeGNsdWRlIC0gQSBsaXN0IG9mIG1vZHVsZXMgdG8gZXhjbHVkZSAoc3BlY2lmaWVkIGJ5XG4gICAgICogcGF0aCBvciBpZCkgb3IgYSBtYXBwaW5nIGZyb20gY2h1bmsgbmFtZXMgdG8gbW9kdWxlIGlkcy5cbiAgICAgKiBAcGFyYW0gYWxpYXNlcyAtIE1hcHBpbmcgb2YgYWxpYXNlcyB0byB0YWtlIGludG8gYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gbW9kdWxlUmVwbGFjZW1lbnRzIC0gTWFwcGluZyBvZiByZXBsYWNlbWVudHMgdG8gdGFrZSBpbnRvXG4gICAgICogYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gZXh0ZW5zaW9ucyAtIExpc3Qgb2YgZmlsZSBhbmQgbW9kdWxlIGV4dGVuc2lvbnMgdG8gdGFrZSBpbnRvXG4gICAgICogYWNjb3VudC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIEZpbGUgcGF0aCB0byB1c2UgYXMgc3RhcnRpbmcgcG9pbnQuXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZVBhdGggLSBSZWZlcmVuY2UgcGF0aCBmcm9tIHdoZXJlIGxvY2FsIGZpbGVzIHNob3VsZCBiZVxuICAgICAqIHJlc29sdmVkLlxuICAgICAqIEBwYXJhbSBwYXRoc1RvSWdub3JlIC0gUGF0aHMgd2hpY2ggbWFya3MgbG9jYXRpb24gdG8gaWdub3JlLlxuICAgICAqIEByZXR1cm5zIEdpdmVuIGluamVjdGlvbiB3aXRoIHJlc29sdmVkIG1hcmtlZCBpbmRpY2F0b3JzLlxuICAgICAqL1xuICAgIHN0YXRpYyByZXNvbHZlSW5qZWN0aW9uKFxuICAgICAgICBnaXZlbkluamVjdGlvbjpJbmplY3Rpb24sXG4gICAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbnM6UmVzb2x2ZWRCdWlsZENvbmZpZ3VyYXRpb24sXG4gICAgICAgIG1vZHVsZXNUb0V4Y2x1ZGU6SW50ZXJuYWxJbmplY3Rpb24sXG4gICAgICAgIGFsaWFzZXM6UGxhaW5PYmplY3QgPSB7fSwgbW9kdWxlUmVwbGFjZW1lbnRzOlBsYWluT2JqZWN0ID0ge30sXG4gICAgICAgIGV4dGVuc2lvbnM6RXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgICAgIGZpbGU6IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbDogWycuanMnXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbDogW1xuICAgICAgICAgICAgICAgICAgICAnLmpzJywgJy5qc29uJywgJy5jc3MnLCAnLmVvdCcsICcuZ2lmJywgJy5odG1sJywgJy5pY28nLFxuICAgICAgICAgICAgICAgICAgICAnLmpwZycsICcucG5nJywgJy5lanMnLCAnLnN2ZycsICcudHRmJywgJy53b2ZmJywgJy53b2ZmMidcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCBtb2R1bGU6IFtdXG4gICAgICAgIH0sIGNvbnRleHQ6c3RyaW5nID0gJy4vJywgcmVmZXJlbmNlUGF0aDpzdHJpbmcgPSAnJyxcbiAgICAgICAgcGF0aHNUb0lnbm9yZTpBcnJheTxzdHJpbmc+ID0gWycuZ2l0J11cbiAgICApOkluamVjdGlvbiB7XG4gICAgICAgIGNvbnN0IGluamVjdGlvbjpJbmplY3Rpb24gPSBUb29scy5leHRlbmRPYmplY3QoXG4gICAgICAgICAgICB0cnVlLCB7fSwgZ2l2ZW5JbmplY3Rpb24pXG4gICAgICAgIGNvbnN0IG1vZHVsZUZpbGVQYXRoc1RvRXhjbHVkZTpBcnJheTxzdHJpbmc+ID1cbiAgICAgICAgICAgIEhlbHBlci5kZXRlcm1pbmVNb2R1bGVMb2NhdGlvbnMoXG4gICAgICAgICAgICAgICAgbW9kdWxlc1RvRXhjbHVkZSwgYWxpYXNlcywgbW9kdWxlUmVwbGFjZW1lbnRzLCBleHRlbnNpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsIHJlZmVyZW5jZVBhdGgsIHBhdGhzVG9JZ25vcmVcbiAgICAgICAgICAgICkuZmlsZVBhdGhzXG4gICAgICAgIGZvciAoY29uc3QgdHlwZTpzdHJpbmcgb2YgWydpbnRlcm5hbCcsICdleHRlcm5hbCddKVxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgY3VybHkgKi9cbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5qZWN0aW9uW3R5cGVdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2h1bmtOYW1lOnN0cmluZyBpbiBpbmplY3Rpb25bdHlwZV0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmplY3Rpb25bdHlwZV1bY2h1bmtOYW1lXSA9PT0gJ19fYXV0b19fJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5qZWN0aW9uW3R5cGVdW2NodW5rTmFtZV0gPSBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kdWxlczp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2tleTpzdHJpbmddOnN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IEhlbHBlci5nZXRBdXRvQ2h1bmsoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRDb25maWd1cmF0aW9ucywgbW9kdWxlRmlsZVBhdGhzVG9FeGNsdWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZVBhdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YkNodW5rTmFtZTpzdHJpbmcgaW4gbW9kdWxlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShzdWJDaHVua05hbWUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmplY3Rpb25bdHlwZV1bY2h1bmtOYW1lXS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlc1tzdWJDaHVua05hbWVdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXZlcnNlIGFycmF5IHRvIGxldCBqYXZhU2NyaXB0IGFuZCBtYWluIGZpbGVzIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxhc3Qgb25lcyB0byBleHBvcnQgdGhlbSByYXRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5qZWN0aW9uW3R5cGVdW2NodW5rTmFtZV0ucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5qZWN0aW9uW3R5cGVdID09PSAnX19hdXRvX18nKVxuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBjdXJseSAqL1xuICAgICAgICAgICAgICAgIGluamVjdGlvblt0eXBlXSA9IEhlbHBlci5nZXRBdXRvQ2h1bmsoXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbnMsIG1vZHVsZUZpbGVQYXRoc1RvRXhjbHVkZSwgY29udGV4dClcbiAgICAgICAgcmV0dXJuIGluamVjdGlvblxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGFsbCBtb2R1bGUgZmlsZSBwYXRocy5cbiAgICAgKiBAcGFyYW0gYnVpbGRDb25maWd1cmF0aW9ucyAtIFJlc29sdmVkIGJ1aWxkIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIG1vZHVsZUZpbGVQYXRoc1RvRXhjbHVkZSAtIEEgbGlzdCBvZiBtb2R1bGVzIGZpbGUgcGF0aHMgdG9cbiAgICAgKiBleGNsdWRlIChzcGVjaWZpZWQgYnkgcGF0aCBvciBpZCkgb3IgYSBtYXBwaW5nIGZyb20gY2h1bmsgbmFtZXMgdG9cbiAgICAgKiBtb2R1bGUgaWRzLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IC0gRmlsZSBwYXRoIHRvIHVzZSBhcyBzdGFydGluZyBwb2ludC5cbiAgICAgKiBAcmV0dXJucyBBbGwgZGV0ZXJtaW5lZCBtb2R1bGUgZmlsZSBwYXRocy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0QXV0b0NodW5rKFxuICAgICAgICBidWlsZENvbmZpZ3VyYXRpb25zOlJlc29sdmVkQnVpbGRDb25maWd1cmF0aW9uLFxuICAgICAgICBtb2R1bGVGaWxlUGF0aHNUb0V4Y2x1ZGU6QXJyYXk8c3RyaW5nPiwgY29udGV4dDpzdHJpbmdcbiAgICApOntba2V5OnN0cmluZ106c3RyaW5nfSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDp7W2tleTpzdHJpbmddOnN0cmluZ30gPSB7fVxuICAgICAgICBjb25zdCBpbmplY3RlZE1vZHVsZUlEczp7W2tleTpzdHJpbmddOkFycmF5PHN0cmluZz59ID0ge31cbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkQ29uZmlndXJhdGlvbjpSZXNvbHZlZEJ1aWxkQ29uZmlndXJhdGlvbkl0ZW0gb2ZcbiAgICAgICAgICAgIGJ1aWxkQ29uZmlndXJhdGlvbnNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoIWluamVjdGVkTW9kdWxlSURzW2J1aWxkQ29uZmlndXJhdGlvbi5vdXRwdXRFeHRlbnNpb25dKVxuICAgICAgICAgICAgICAgIGluamVjdGVkTW9kdWxlSURzW2J1aWxkQ29uZmlndXJhdGlvbi5vdXRwdXRFeHRlbnNpb25dID0gW11cbiAgICAgICAgICAgIGZvciAoY29uc3QgbW9kdWxlRmlsZVBhdGg6c3RyaW5nIG9mIGJ1aWxkQ29uZmlndXJhdGlvbi5maWxlUGF0aHMpXG4gICAgICAgICAgICAgICAgaWYgKCFtb2R1bGVGaWxlUGF0aHNUb0V4Y2x1ZGUuaW5jbHVkZXMobW9kdWxlRmlsZVBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlTW9kdWxlRmlsZVBhdGg6c3RyaW5nID0gJy4vJyArIHBhdGgucmVsYXRpdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LCBtb2R1bGVGaWxlUGF0aClcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0b3J5UGF0aDpzdHJpbmcgPSBwYXRoLmRpcm5hbWUoXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZU1vZHVsZUZpbGVQYXRoKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlTmFtZTpzdHJpbmcgPSBwYXRoLmJhc2VuYW1lKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVNb2R1bGVGaWxlUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGAuJHtidWlsZENvbmZpZ3VyYXRpb24uZXh0ZW5zaW9ufWApXG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2R1bGVJRDpzdHJpbmcgPSBiYXNlTmFtZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0b3J5UGF0aCAhPT0gJy4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlSUQgPSBwYXRoLmpvaW4oZGlyZWN0b3J5UGF0aCwgYmFzZU5hbWUpXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICBFbnN1cmUgdGhhdCBlYWNoIG91dHB1dCB0eXBlIGhhcyBvbmx5IG9uZSBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWluamVjdGVkTW9kdWxlSURzW1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRDb25maWd1cmF0aW9uLm91dHB1dEV4dGVuc2lvblxuICAgICAgICAgICAgICAgICAgICBdLmluY2x1ZGVzKG1vZHVsZUlEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbnN1cmUgdGhhdCBzYW1lIG1vZHVsZSBpZHMgYW5kIGRpZmZlcmVudCBvdXRwdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlcyBjYW4gYmUgZGlzdGluZ3Vpc2hlZCBieSB0aGVpciBleHRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoSmF2YVNjcmlwdC1Nb2R1bGVzIHJlbWFpbnMgd2l0aG91dCBleHRlbnNpb24gc2luY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGV5IHdpbGwgYmUgaGFuZGxlZCBmaXJzdCBiZWNhdXNlIHRoZSBidWlsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25zIGFyZSBleHBlY3RlZCB0byBiZSBzb3J0ZWQgaW4gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQpLlxuICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaGFzT3duUHJvcGVydHkobW9kdWxlSUQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZWxhdGl2ZU1vZHVsZUZpbGVQYXRoXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbbW9kdWxlSURdID0gcmVsYXRpdmVNb2R1bGVGaWxlUGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5qZWN0ZWRNb2R1bGVJRHNbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRDb25maWd1cmF0aW9uLm91dHB1dEV4dGVuc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgXS5wdXNoKG1vZHVsZUlEKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBhIGNvbmNyZXRlIGZpbGUgcGF0aCBmb3IgZ2l2ZW4gbW9kdWxlIGlkLlxuICAgICAqIEBwYXJhbSBtb2R1bGVJRCAtIE1vZHVsZSBpZCB0byBkZXRlcm1pbmUuXG4gICAgICogQHBhcmFtIGFsaWFzZXMgLSBNYXBwaW5nIG9mIGFsaWFzZXMgdG8gdGFrZSBpbnRvIGFjY291bnQuXG4gICAgICogQHBhcmFtIG1vZHVsZVJlcGxhY2VtZW50cyAtIE1hcHBpbmcgb2YgcmVwbGFjZW1lbnRzIHRvIHRha2UgaW50b1xuICAgICAqIGFjY291bnQuXG4gICAgICogQHBhcmFtIGV4dGVuc2lvbnMgLSBMaXN0IG9mIGZpbGUgYW5kIG1vZHVsZSBleHRlbnNpb25zIHRvIHRha2UgaW50b1xuICAgICAqIGFjY291bnQuXG4gICAgICogQHBhcmFtIGNvbnRleHQgLSBGaWxlIHBhdGggdG8gZGV0ZXJtaW5lIHJlbGF0aXZlIHRvLlxuICAgICAqIEBwYXJhbSByZWZlcmVuY2VQYXRoIC0gUGF0aCB0byByZXNvbHZlIGxvY2FsIG1vZHVsZXMgcmVsYXRpdmUgdG8uXG4gICAgICogQHBhcmFtIHBhdGhzVG9JZ25vcmUgLSBQYXRocyB3aGljaCBtYXJrcyBsb2NhdGlvbiB0byBpZ25vcmUuXG4gICAgICogQHBhcmFtIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzIC0gTGlzdCBvZiByZWxhdGl2ZSBmaWxlIHBhdGggdG8gc2VhcmNoXG4gICAgICogZm9yIG1vZHVsZXMgaW4uXG4gICAgICogQHBhcmFtIHBhY2thZ2VFbnRyeUZpbGVOYW1lcyAtIExpc3Qgb2YgcGFja2FnZSBlbnRyeSBmaWxlIG5hbWVzIHRvXG4gICAgICogc2VhcmNoIGZvci4gVGhlIG1hZ2ljIG5hbWUgXCJfX3BhY2thZ2VfX1wiIHdpbGwgc2VhcmNoIGZvciBhbiBhcHByZWNpYXRlXG4gICAgICogZW50cnkgaW4gYSBcInBhY2thZ2UuanNvblwiIGZpbGUuXG4gICAgICogQHBhcmFtIHBhY2thZ2VNYWluUHJvcGVydHlOYW1lcyAtIExpc3Qgb2YgcGFja2FnZSBmaWxlIG1haW4gcHJvcGVydHlcbiAgICAgKiBuYW1lcyB0byBzZWFyY2ggZm9yIHBhY2thZ2UgcmVwcmVzZW50aW5nIGVudHJ5IG1vZHVsZSBkZWZpbml0aW9ucy5cbiAgICAgKiBAcGFyYW0gcGFja2FnZUFsaWFzUHJvcGVydHlOYW1lcyAtIExpc3Qgb2YgcGFja2FnZSBmaWxlIGFsaWFzIHByb3BlcnR5XG4gICAgICogbmFtZXMgdG8gc2VhcmNoIGZvciBwYWNrYWdlIHNwZWNpZmljIG1vZHVsZSBhbGlhc2VzLlxuICAgICAqIEByZXR1cm5zIEZpbGUgcGF0aCBvciBnaXZlbiBtb2R1bGUgaWQgaWYgZGV0ZXJtaW5hdGlvbnMgaGFzIGZhaWxlZCBvclxuICAgICAqIHdhc24ndCBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgc3RhdGljIGRldGVybWluZU1vZHVsZUZpbGVQYXRoKFxuICAgICAgICBtb2R1bGVJRDpzdHJpbmcsIGFsaWFzZXM6UGxhaW5PYmplY3QgPSB7fSxcbiAgICAgICAgbW9kdWxlUmVwbGFjZW1lbnRzOlBsYWluT2JqZWN0ID0ge30sIGV4dGVuc2lvbnM6RXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgICAgIGZpbGU6IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbDogWycuanMnXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbDogW1xuICAgICAgICAgICAgICAgICAgICAnLmpzJywgJy5qc29uJywgJy5jc3MnLCAnLmVvdCcsICcuZ2lmJywgJy5odG1sJywgJy5pY28nLFxuICAgICAgICAgICAgICAgICAgICAnLmpwZycsICcucG5nJywgJy5lanMnLCAnLnN2ZycsICcudHRmJywgJy53b2ZmJywgJy53b2ZmMidcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCBtb2R1bGU6IFtdXG4gICAgICAgIH0sIGNvbnRleHQ6c3RyaW5nID0gJy4vJywgcmVmZXJlbmNlUGF0aDpzdHJpbmcgPSAnJyxcbiAgICAgICAgcGF0aHNUb0lnbm9yZTpBcnJheTxzdHJpbmc+ID0gWycuZ2l0J10sXG4gICAgICAgIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzOkFycmF5PHN0cmluZz4gPSBbJ25vZGVfbW9kdWxlcyddLFxuICAgICAgICBwYWNrYWdlRW50cnlGaWxlTmFtZXM6QXJyYXk8c3RyaW5nPiA9IFsnaW5kZXgnXSxcbiAgICAgICAgcGFja2FnZU1haW5Qcm9wZXJ0eU5hbWVzOkFycmF5PHN0cmluZz4gPSBbJ21haW4nXSxcbiAgICAgICAgcGFja2FnZUFsaWFzUHJvcGVydHlOYW1lczpBcnJheTxzdHJpbmc+ID0gW11cbiAgICApOj9zdHJpbmcge1xuICAgICAgICBtb2R1bGVJRCA9IEhlbHBlci5hcHBseU1vZHVsZVJlcGxhY2VtZW50cyhIZWxwZXIuYXBwbHlBbGlhc2VzKFxuICAgICAgICAgICAgSGVscGVyLnN0cmlwTG9hZGVyKG1vZHVsZUlEKSwgYWxpYXNlc1xuICAgICAgICApLCBtb2R1bGVSZXBsYWNlbWVudHMpXG4gICAgICAgIGlmICghbW9kdWxlSUQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICBsZXQgbW9kdWxlRmlsZVBhdGg6c3RyaW5nID0gbW9kdWxlSURcbiAgICAgICAgaWYgKG1vZHVsZUZpbGVQYXRoLnN0YXJ0c1dpdGgoJy4vJykpXG4gICAgICAgICAgICBtb2R1bGVGaWxlUGF0aCA9IHBhdGguam9pbihyZWZlcmVuY2VQYXRoLCBtb2R1bGVGaWxlUGF0aClcbiAgICAgICAgZm9yIChjb25zdCBtb2R1bGVMb2NhdGlvbjpzdHJpbmcgb2YgW3JlZmVyZW5jZVBhdGhdLmNvbmNhdChcbiAgICAgICAgICAgIHJlbGF0aXZlTW9kdWxlRmlsZVBhdGhzLm1hcCgoZmlsZVBhdGg6c3RyaW5nKTpzdHJpbmcgPT5cbiAgICAgICAgICAgICAgICBwYXRoLnJlc29sdmUoY29udGV4dCwgZmlsZVBhdGgpKVxuICAgICAgICApKVxuICAgICAgICAgICAgZm9yIChsZXQgZmlsZU5hbWU6c3RyaW5nIG9mIFsnJywgJ19fcGFja2FnZV9fJ10uY29uY2F0KFxuICAgICAgICAgICAgICAgIHBhY2thZ2VFbnRyeUZpbGVOYW1lc1xuICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1vZHVsZUV4dGVuc2lvbjpzdHJpbmcgb2YgZXh0ZW5zaW9ucy5tb2R1bGUuY29uY2F0KFtcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdKSlcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlRXh0ZW5zaW9uOnN0cmluZyBvZiBbJyddLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuZmlsZS5pbnRlcm5hbFxuICAgICAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudE1vZHVsZUZpbGVQYXRoOnN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZHVsZUZpbGVQYXRoLnN0YXJ0c1dpdGgoJy8nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlRmlsZVBhdGggPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZUZpbGVQYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2R1bGVGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlTG9jYXRpb24sIG1vZHVsZUZpbGVQYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhY2thZ2VBbGlhc2VzOlBsYWluT2JqZWN0ID0ge31cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlTmFtZSA9PT0gJ19fcGFja2FnZV9fJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUb29scy5pc0RpcmVjdG9yeVN5bmMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2R1bGVGaWxlUGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aFRvUGFja2FnZUpTT046c3RyaW5nID0gcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZUZpbGVQYXRoLCAncGFja2FnZS5qc29uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFRvb2xzLmlzRmlsZVN5bmMocGF0aFRvUGFja2FnZUpTT04pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9jYWxDb25maWd1cmF0aW9uOlBsYWluT2JqZWN0ID0ge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxDb25maWd1cmF0aW9uID0gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbS5yZWFkRmlsZVN5bmMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoVG9QYWNrYWdlSlNPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiAndXRmLTgnfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lOnN0cmluZyBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VNYWluUHJvcGVydHlOYW1lc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbENvbmZpZ3VyYXRpb24uaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiYgdHlwZW9mIGxvY2FsQ29uZmlndXJhdGlvbltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA9PT0gJ3N0cmluZycgJiYgbG9jYWxDb25maWd1cmF0aW9uW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gbG9jYWxDb25maWd1cmF0aW9uW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lOnN0cmluZyBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VBbGlhc1Byb3BlcnR5TmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxDb25maWd1cmF0aW9uLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICYmIHR5cGVvZiBsb2NhbENvbmZpZ3VyYXRpb25bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VBbGlhc2VzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsQ29uZmlndXJhdGlvbltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlTmFtZSA9PT0gJ19fcGFja2FnZV9fJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gSGVscGVyLmFwcGx5TW9kdWxlUmVwbGFjZW1lbnRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBlci5hcHBseUFsaWFzZXMoZmlsZU5hbWUsIHBhY2thZ2VBbGlhc2VzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVSZXBsYWNlbWVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1vZHVsZUZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlRmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2ZpbGVOYW1lfSR7bW9kdWxlRXh0ZW5zaW9ufSR7ZmlsZUV4dGVuc2lvbn1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2R1bGVGaWxlUGF0aCArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtmaWxlTmFtZX0ke21vZHVsZUV4dGVuc2lvbn0ke2ZpbGVFeHRlbnNpb259YFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEhlbHBlci5pc0ZpbGVQYXRoSW5Mb2NhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kdWxlRmlsZVBhdGgsIHBhdGhzVG9JZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUb29scy5pc0ZpbGVTeW5jKGN1cnJlbnRNb2R1bGVGaWxlUGF0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRNb2R1bGVGaWxlUGF0aFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIC8vIGVuZHJlZ2lvblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgYSBjb25jcmV0ZSBmaWxlIHBhdGggZm9yIGdpdmVuIG1vZHVsZSBpZC5cbiAgICAgKiBAcGFyYW0gbW9kdWxlSUQgLSBNb2R1bGUgaWQgdG8gZGV0ZXJtaW5lLlxuICAgICAqIEBwYXJhbSBhbGlhc2VzIC0gTWFwcGluZyBvZiBhbGlhc2VzIHRvIHRha2UgaW50byBhY2NvdW50LlxuICAgICAqIEByZXR1cm5zIFRoZSBhbGlhcyBhcHBsaWVkIGdpdmVuIG1vZHVsZSBpZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHlBbGlhc2VzKG1vZHVsZUlEOnN0cmluZywgYWxpYXNlczpQbGFpbk9iamVjdCk6c3RyaW5nIHtcbiAgICAgICAgZm9yIChjb25zdCBhbGlhczpzdHJpbmcgaW4gYWxpYXNlcylcbiAgICAgICAgICAgIGlmIChhbGlhcy5lbmRzV2l0aCgnJCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZHVsZUlEID09PSBhbGlhcy5zdWJzdHJpbmcoMCwgYWxpYXMubGVuZ3RoIC0gMSkpXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZUlEID0gYWxpYXNlc1thbGlhc11cbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIG1vZHVsZUlEID0gbW9kdWxlSUQucmVwbGFjZShhbGlhcywgYWxpYXNlc1thbGlhc10pXG4gICAgICAgIHJldHVybiBtb2R1bGVJRFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGEgY29uY3JldGUgZmlsZSBwYXRoIGZvciBnaXZlbiBtb2R1bGUgaWQuXG4gICAgICogQHBhcmFtIG1vZHVsZUlEIC0gTW9kdWxlIGlkIHRvIGRldGVybWluZS5cbiAgICAgKiBAcGFyYW0gcmVwbGFjZW1lbnRzIC0gTWFwcGluZyBvZiByZWd1bGFyIGV4cHJlc3Npb25zIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyByZXBsYWNlbWVudHMuXG4gICAgICogQHJldHVybnMgVGhlIHJlcGxhY2VtZW50IGFwcGxpZWQgZ2l2ZW4gbW9kdWxlIGlkLlxuICAgICAqL1xuICAgIHN0YXRpYyBhcHBseU1vZHVsZVJlcGxhY2VtZW50cyhcbiAgICAgICAgbW9kdWxlSUQ6c3RyaW5nLCByZXBsYWNlbWVudHM6UGxhaW5PYmplY3RcbiAgICApOnN0cmluZyB7XG4gICAgICAgIGZvciAoY29uc3QgcmVwbGFjZW1lbnQ6c3RyaW5nIGluIHJlcGxhY2VtZW50cylcbiAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudHMuaGFzT3duUHJvcGVydHkocmVwbGFjZW1lbnQpKVxuICAgICAgICAgICAgICAgIG1vZHVsZUlEID0gbW9kdWxlSUQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChyZXBsYWNlbWVudCksIHJlcGxhY2VtZW50c1tyZXBsYWNlbWVudF0pXG4gICAgICAgIHJldHVybiBtb2R1bGVJRFxuICAgIH1cbn1cbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIHZpbSBtb2RsaW5lXG4vLyB2aW06IHNldCB0YWJzdG9wPTQgc2hpZnR3aWR0aD00IGV4cGFuZHRhYjpcbi8vIHZpbTogZm9sZG1ldGhvZD1tYXJrZXIgZm9sZG1hcmtlcj1yZWdpb24sZW5kcmVnaW9uOlxuLy8gZW5kcmVnaW9uXG4iXX0=