#!/usr/bin/env node
'use strict';var _set=require('babel-runtime/core-js/set'),_set2=_interopRequireDefault(_set),_from=require('babel-runtime/core-js/array/from'),_from2=_interopRequireDefault(_from),_promise=require('babel-runtime/core-js/promise'),_promise2=_interopRequireDefault(_promise),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_jsdom=require('jsdom'),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path);Object.defineProperty(exports,'__esModule',{value:!0});function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}class Helper{static isFilePathInLocation(a,b){for(const c of b)if(_path2.default.resolve(a).startsWith(_path2.default.resolve(c)))return!0;return!1}static inPlaceCSSAndJavaScriptAssetReferences(a,b,c,d,e,f,g){return new _promise2.default((h,i)=>{let j;try{j=new _jsdom.JSDOM(a.replace(/<%/g,'##+#+#+##').replace(/%>/g,'##-#-#-##')).window}catch(l){return i(l)}const k=[];if(b)for(const l in b){if(!b.hasOwnProperty(l))continue;let m='[href*=".css"]';'*'!=l&&(m='[href="'+_path2.default.relative(d,Helper.renderFilePathTemplate(e,{'[contenthash]':'','[id]':l,'[name]':l}))+'"]');const n=j.document.querySelectorAll(`link${m}`);if(n.length)for(const o of n){const p=j.document.createElement('style'),q=o.attributes.href.value.replace(/&.*/g,'');p.textContent=g[q].source(),'body'===b[l]?j.document.body.appendChild(p):'in'===b[l]?o.parentNode.insertBefore(p,o):'head'===b[l]&&j.document.head.appendChild(p),o.parentNode.removeChild(o),k.push(Helper.stripLoader(q)),delete g[q]}else console.warn('No referenced cascading style sheet file in resulting markup found with selector: link'+m)}if(c)for(const l in c){if(!c.hasOwnProperty(l))continue;let m='[href*=".js"]';'*'!=l&&(m='[src^="'+_path2.default.relative(d,Helper.renderFilePathTemplate(f,{'[hash]':'','[id]':l,'[name]':l})+'"]'));const n=j.document.querySelectorAll(`script${m}`);if(n.length)for(const o of n){const p=j.document.createElement('script'),q=o.attributes.src.value.replace(/&.*/g,'');p.textContent=g[q].source(),'body'===c[l]?j.document.body.appendChild(p):'in'===c[l]?o.parentNode.insertBefore(p,o):'head'===c[l]&&j.document.head.appendChild(p),o.parentNode.removeChild(o),k.push(Helper.stripLoader(q)),delete g[q]}else console.warn('No referenced javaScript file in resulting '+`markup found with selector: script${m}`)}h({content:a.replace(/^(\s*<!doctype [^>]+?>\s*)[\s\S]*$/i,'$1')+j.document.documentElement.outerHTML.replace(/##\+#\+#\+##/g,'<%').replace(/##-#-#-##/g,'%>'),filePathsToRemove:k})})}static stripLoader(a){a=a.toString();const b=a.substring(a.lastIndexOf('!')+1);return b.includes('?')?b.substring(0,b.indexOf('?')):b}static normalizePaths(a){return(0,_from2.default)(new _set2.default(a.map((b)=>{return b=_path2.default.normalize(b),b.endsWith('/')?b.substring(0,b.length-1):b})))}static renderFilePathTemplate(a,b={'[name]':'.__dummy__','[id]':'.__dummy__','[hash]':'.__dummy__'}){let c=a;for(const d in b)b.hasOwnProperty(d)&&(c=c.replace(new RegExp(_clientnode2.default.stringEscapeRegularExpressions(d),'g'),b[d]));return c}static applyContext(a,b='./',c='./',d={},e={},f=['node_modules']){if(c=_path2.default.resolve(c),a.startsWith('./')&&_path2.default.resolve(b)!==c){a=_path2.default.resolve(b,a);for(const g of f){const h=_path2.default.resolve(c,g);if(a.startsWith(h))return a=a.substring(h.length),a.startsWith('/')&&(a=a.substring(1)),Helper.applyModuleReplacements(Helper.applyAliases(a.substring(a.lastIndexOf('!')+1),d),e)}if(a.startsWith(c))return a=a.substring(c.length),a.startsWith('/')&&(a=a.substring(1)),Helper.applyModuleReplacements(Helper.applyAliases(a.substring(a.lastIndexOf('!')+1),d),e)}return a}static determineExternalRequest(a,b='./',c='./',d={},e=['node_modules'],f={},g={},h={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},i='./',j=['.git'],k=['node_modules'],l=['index','main'],m=['main','module'],n=[],o=[],p=[],q=!1,r=!0,s='utf-8'){b=_path2.default.resolve(b),c=_path2.default.resolve(c),i=_path2.default.resolve(i);let t=Helper.applyModuleReplacements(Helper.applyAliases(a.substring(a.lastIndexOf('!')+1),f),g),u=Helper.determineModuleFilePath(t,{},{},h,b,c,j,k,l,m,n,s);if(!(u||q)||_clientnode2.default.isAnyMatching(t,o))return Helper.applyContext(t,c,i,f,g,k);if(_clientnode2.default.isAnyMatching(t,p))return null;for(const v in d)if(d.hasOwnProperty(v))for(const w of d[v])if(Helper.determineModuleFilePath(w,f,g,h,b,c,j,k,l,m,n,s)===u)return null;return!q&&(0===h.file.external.length||u&&h.file.external.includes(_path2.default.extname(u))||!u&&h.file.external.includes(''))&&!(r&&a.includes('!'))&&(!u&&r||u&&(!u.startsWith(b)||Helper.isFilePathInLocation(u,e)))?Helper.applyContext(t,c,i,f,g,k):null}static determineAssetType(a,b,c){let d=null;for(const e in b)if(`.${b[e].extension}`===_path2.default.extname(a)){d=e;break}if(!d)for(const e of['source','target'])for(const f in c[e].asset)if(c[e].asset.hasOwnProperty(f)&&'base'!==f&&c[e].asset[f]&&a.startsWith(c[e].asset[f]))return f;return d}static resolveBuildConfigurationFilePaths(a,b='./',c=['.git'],d=['index','main']){const e=[];for(const f in a)if(a.hasOwnProperty(f)){const g=_clientnode2.default.extendObject(!0,{filePaths:[]},a[f]);for(const h of _clientnode2.default.walkDirectoryRecursivelySync(b,(i)=>{if(Helper.isFilePathInLocation(i.path,c))return!1}))h.stat.isFile()&&_path2.default.extname(h.path).substring(1)===g.extension&&!new RegExp(g.filePathPattern).test(h.path)&&g.filePaths.push(h.path);g.filePaths.sort((h,i)=>{if(d.includes(_path2.default.basename(h,_path2.default.extname(h)))){if(d.includes(_path2.default.basename(i,_path2.default.extname(i))))return 0;}else if(d.includes(_path2.default.basename(i,_path2.default.extname(i))))return 1;return 0}),e.push(g)}return e.sort((f,g)=>{return f.outputExtension===g.outputExtension?0:'js'===f.outputExtension?-1:'js'===g.outputExtension?1:f.outputExtension<g.outputExtension?-1:1})}static determineModuleLocations(a,b={},c={},d={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},e='./',f='',g=['.git'],h=['','node_modules','../'],i=['__package__','','index','main'],j=['main','module'],k=[],l='utf-8'){const m=[],n=[],o=Helper.resolveModulesInFolders(Helper.normalizeInternalInjection(a),b,c,d,e,f,g,h,i,j,k);for(const p in o)if(o.hasOwnProperty(p))for(const q of o[p]){const r=Helper.determineModuleFilePath(q,b,c,d,e,f,g,h,i,j,k,l);if(r){m.push(r);const s=_path2.default.dirname(r);n.includes(s)||n.push(s)}}return{filePaths:m,directoryPaths:n}}static resolveModulesInFolders(a,b={},c={},d={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},e='./',f='',g=['.git']){for(const h in f.startsWith('/')&&(f=_path2.default.relative(e,f)),a)if(a.hasOwnProperty(h)){let i=0;for(let j of a[h]){j=Helper.applyModuleReplacements(Helper.applyAliases(Helper.stripLoader(j),b),c);const k=_path2.default.resolve(f,j);if(_clientnode2.default.isDirectorySync(k)){a[h].splice(i,1);for(const l of _clientnode2.default.walkDirectoryRecursivelySync(k,(m)=>{if(Helper.isFilePathInLocation(m.path,g))return!1}))l.stat.isFile()&&a[h].push('./'+_path2.default.relative(f,_path2.default.resolve(k,l.path)))}else j.startsWith('./')&&!j.startsWith('./'+_path2.default.relative(e,f))&&(a[h][i]=`./${_path2.default.relative(e,k)}`);i+=1}}return a}static normalizeInternalInjection(a){let b={};if(a instanceof Object&&_clientnode2.default.isPlainObject(a)){let c=!1;const d=[];for(const e in a)a.hasOwnProperty(e)&&(Array.isArray(a[e])?0<a[e].length?(c=!0,b[e]=a[e]):d.push(e):(c=!0,b[e]=[a[e]]));if(c)for(const e of d)delete b[e];else b={index:[]}}else'string'==typeof a?b={index:[a]}:Array.isArray(a)&&(b={index:a});return b}static resolveInjection(a,b,c,d={},e={},f={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},g='./',h='',i=['.git']){const j=_clientnode2.default.extendObject(!0,{},a),k=Helper.determineModuleLocations(c,d,e,f,g,h,i).filePaths;for(const l of['internal','external'])if('object'==typeof j[l]){for(const m in j[l])if('__auto__'===j[l][m]){j[l][m]=[];const n=Helper.getAutoChunk(b,k,h);for(const o in n)n.hasOwnProperty(o)&&j[l][m].push(n[o]);j[l][m].reverse()}}else'__auto__'===j[l]&&(j[l]=Helper.getAutoChunk(b,k,g));return j}static getAutoChunk(a,b,c){const d={},e={};for(const f of a){e[f.outputExtension]||(e[f.outputExtension]=[]);for(const g of f.filePaths)if(!b.includes(g)){const h='./'+_path2.default.relative(c,g),i=_path2.default.dirname(h),j=_path2.default.basename(h,`.${f.extension}`);let k=j;'.'!==i&&(k=_path2.default.join(i,j)),e[f.outputExtension].includes(k)||(d.hasOwnProperty(k)?d[h]=h:d[k]=h,e[f.outputExtension].push(k))}}return d}static determineModuleFilePath(a,b={},c={},d={file:{external:['.js'],internal:['.js','.json','.css','.eot','.gif','.html','.ico','.jpg','.png','.ejs','.svg','.ttf','.woff','.woff2']},module:[]},e='./',f='',g=['.git'],h=['node_modules'],i=['index'],j=['main'],k=[],l='utf-8'){if(a=Helper.applyModuleReplacements(Helper.applyAliases(Helper.stripLoader(a),b),c),!a)return null;let m=a;m.startsWith('./')&&(m=_path2.default.join(f,m));for(const n of[f].concat(h.map((o)=>_path2.default.resolve(e,o))))for(let o of['','__package__'].concat(i))for(const p of d.module.concat(['']))for(const q of[''].concat(d.file.internal)){let r=m.startsWith('/')?_path2.default.resolve(m):_path2.default.resolve(n,m);let s={};if('__package__'===o){if(_clientnode2.default.isDirectorySync(r)){const t=_path2.default.resolve(r,'package.json');if(_clientnode2.default.isFileSync(t)){let u={};try{u=JSON.parse(fileSystem.readFileSync(t,{encoding:l}))}catch(v){}for(const v of j)if(u.hasOwnProperty(v)&&'string'==typeof u[v]&&u[v]){o=u[v];break}for(const v of k)if(u.hasOwnProperty(v)&&'object'==typeof u[v]){s=u[v];break}}}if('__package__'===o)continue}if(o=Helper.applyModuleReplacements(Helper.applyAliases(o,s),c),o?r=_path2.default.resolve(r,`${o}${p}${q}`):r+=`${o}${p}${q}`,!Helper.isFilePathInLocation(r,g)&&_clientnode2.default.isFileSync(r))return r}return null}static applyAliases(a,b){for(const c in b)c.endsWith('$')?a===c.substring(0,c.length-1)&&(a=b[c]):a=a.replace(c,b[c]);return a}static applyModuleReplacements(a,b){for(const c in b)b.hasOwnProperty(c)&&(a=a.replace(new RegExp(c),b[c]));return a}}exports.default=Helper;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,