#!/usr/bin/env node
'use strict';var _stringify=require('babel-runtime/core-js/json/stringify'),_stringify2=_interopRequireDefault(_stringify),_promise=require('babel-runtime/core-js/promise'),_promise2=_interopRequireDefault(_promise),_asyncToGenerator2=require('babel-runtime/helpers/asyncToGenerator'),_asyncToGenerator3=_interopRequireDefault(_asyncToGenerator2),_child_process=require('child_process'),_clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path),_rimraf=require('rimraf'),_rimraf2=_interopRequireDefault(_rimraf),_configurator=require('./configurator.compiled'),_configurator2=_interopRequireDefault(_configurator),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper);Object.defineProperty(exports,'__esModule',{value:!0});function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}const main=(()=>{var a=(0,_asyncToGenerator3.default)(function*(){try{const b={cwd:_configurator2.default.path.context,env:process.env,shell:!0,stdio:'inherit'},c=[],d=[],e=['build','buildDLL','clear','document','lint','preinstall','serve','test','testInBrowser','typeCheck'],f=[];if(2<_configurator2.default.givenCommandLineArguments.length){let i={givenCommandLineArguments:_configurator2.default.givenCommandLineArguments.slice()};3<_configurator2.default.givenCommandLineArguments.length&&_clientnode2.default.stringParseEncodedObject(_configurator2.default.givenCommandLineArguments[_configurator2.default.givenCommandLineArguments.length-1],_configurator2.default,'configuration')&&_configurator2.default.givenCommandLineArguments.pop();let j=0,k=_path2.default.resolve(_configurator2.default.path.context,`.dynamicConfiguration-${j}.json`);for(;k=_path2.default.resolve(_configurator2.default.path.context,`.dynamicConfiguration-${j}.json`),!!(yield _clientnode2.default.isFile(k));)j+=1;yield new _promise2.default(function(o,p){return fileSystem.writeFile(k,(0,_stringify2.default)(i),function(q){return q?p(q):o()})});const l=process.argv.splice(3);if(f.push(function(o){if(_clientnode2.default.isFileSync(k)&&fileSystem.unlinkSync(k),o)throw o}),!['build','preinstall','serve','test','testInBrowser'].includes(_configurator2.default.givenCommandLineArguments[2])&&e.includes(_configurator2.default.givenCommandLineArguments[2])){if(_path2.default.resolve(_configurator2.default.path.target.base)===_path2.default.resolve(_configurator2.default.path.context)){yield _clientnode2.default.walkDirectoryRecursively(_configurator2.default.path.target.base,(()=>{var o=(0,_asyncToGenerator3.default)(function*(p){if(_helper2.default.isFilePathInLocation(p.path,_configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames,_configurator2.default.loader.directoryNames).map(function(q){return _path2.default.resolve(_configurator2.default.path.context,q)}).filter(function(q){return!_configurator2.default.path.context.startsWith(q)})))return!1;for(const q in _configurator2.default.build.types)if(new RegExp(_configurator2.default.build.types[q].filePathPattern).test(p.path)){if(p.stat.isDirectory())return yield new _promise2.default(function(r,s){return(0,_rimraf2.default)(p.path,{glob:!1},function(t){return t?s(t):r()})}),!1;yield new _promise2.default(function(r,s){return fileSystem.unlink(p.path,function(t){return t?s(t):r()})});break}});return function(){return o.apply(this,arguments)}})());for(const o of yield _clientnode2.default.walkDirectoryRecursively(_configurator2.default.path.target.base,function(){return!1},{encoding:_configurator2.default.encoding}))(o.name.length>'.dll-manifest.json'.length&&o.name.endsWith('.dll-manifest.json')||o.name.startsWith('npm-debug'))&&(yield new _promise2.default(function(p,q){return fileSystem.unlink(o.path,function(r){return r?q(r):p()})}))}else yield new _promise2.default(function(o,p){return(0,_rimraf2.default)(_configurator2.default.path.target.base,{glob:!1},function(q){return q?p(q):o()})});(yield _clientnode2.default.isDirectory(_configurator2.default.path.apiDocumentation))&&(yield new _promise2.default(function(o,p){return(0,_rimraf2.default)(_configurator2.default.path.apiDocumentation,{glob:!1},function(q){return q?p(q):o()})}))}const m=_helper2.default.resolveBuildConfigurationFilePaths(_configurator2.default.build.types,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore.concat(_configurator2.default.module.directoryNames,_configurator2.default.loader.directoryNames).map(function(o){return _path2.default.resolve(_configurator2.default.path.context,o)}).filter(function(o){return!_configurator2.default.path.context.startsWith(o)}),_configurator2.default.package.main.fileNames);if(['build','buildDLL','document','test'].includes(process.argv[2])){let o=!1;const p=function(){if(!o){for(const q in o=!0,_configurator2.default.injection.internal.normalized)if(_configurator2.default.injection.internal.normalized.hasOwnProperty(q))for(const r of _configurator2.default.injection.internal.normalized[q]){const s=_helper2.default.determineModuleFilePath(r,_configurator2.default.module.aliases,_configurator2.default.module.replacements.normal,_configurator2.default.extensions,_configurator2.default.path.context,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore,_configurator2.default.module.directoryNames,_configurator2.default.package.main.fileNames,_configurator2.default.package.main.propertyNames,_configurator2.default.package.aliasPropertyNames,_configurator2.default.encoding);let t;if(s&&(t=_helper2.default.determineAssetType(s,_configurator2.default.build.types,_configurator2.default.path)),'string'==typeof t&&_configurator2.default.build.types[t]){const u=_helper2.default.renderFilePathTemplate(_helper2.default.stripLoader(_configurator2.default.files.compose.javaScript),{'[name]':q});'js'===_configurator2.default.build.types[t].outputExtension&&_clientnode2.default.isFileSync(u)&&fileSystem.chmodSync(u,'755')}}for(const q of _configurator2.default.path.tidyUp)q&&_clientnode2.default.isFileSync(q)&&fileSystem.unlinkSync(q)}};f.push(p),d.push(new _promise2.default(function(q,r){const s=(_configurator2.default.commandLine.build.arguments||[]).concat(l);console.info('Running "'+(`${_configurator2.default.commandLine.build.command} `+s.join(' ')).trim()+'"');const t=(0,_child_process.spawn)(_configurator2.default.commandLine.build.command,s,b),u=(()=>{var w=(0,_asyncToGenerator3.default)(function*(){for(const x of _configurator2.default.files.additionalPaths){const y=_path2.default.join(_configurator2.default.path.source.base,x),z=_path2.default.join(_configurator2.default.path.target.base,x);(yield _clientnode2.default.isDirectory(y))?((yield _clientnode2.default.isDirectory(z))&&(yield new _promise2.default(function(A,B){return(0,_rimraf2.default)(z,{glob:!1},function(C){return C?B(C):A()})})),yield _clientnode2.default.copyDirectoryRecursive(y,z)):(yield _clientnode2.default.isFile(y))&&(yield _clientnode2.default.copyFile(y,z))}p()});return function copyAdditionalFilesAndTidyUp(){return w.apply(this,arguments)}})(),v=_clientnode2.default.getProcessCloseHandler(q,r,null,'build'===process.argv[2]?u:p);for(const w of _clientnode2.default.closeEventNames)t.on(w,v);c.push(t)}))}else if(_configurator2.default.library&&'preinstall'===_configurator2.default.givenCommandLineArguments[2]){const o=_helper2.default.determineModuleLocations(_configurator2.default.testInBrowser.injection.internal,_configurator2.default.module.aliases,_configurator2.default.module.replacements.normal,_configurator2.default.extensions,_configurator2.default.path.context,_configurator2.default.path.source.asset.base,_configurator2.default.path.ignore).filePaths;for(const p of m)for(const q of p.filePaths)if(!o.includes(q)){const s=function(t,u,v,w,x,y){return new Function('global','self','buildConfiguration','path','additionalArguments','filePath','return `'+v[_configurator2.default.givenCommandLineArguments[2]].trim()+'`')(t,u,v,w,x,y)}(global,_configurator2.default,p,_path2.default,l,q);console.info(`Running "${s}"`),d.push(new _promise2.default(function(t,u){return _clientnode2.default.handleChildProcess((0,_child_process.exec)(s,b,function(v){return v?u(v):t()}))}))}}const n=function(o){let p=Array.isArray(_configurator2.default.commandLine[o])?_configurator2.default.commandLine[o]:[_configurator2.default.commandLine[o]];for(const q of p){(function(s,t,u){return new Function('global','self','path','return '+(q.hasOwnProperty('indicator')?q.indicator:'true'))(s,t,u)})(global,_configurator2.default,_path2.default)&&d.push(new _promise2.default(function(s,t){const u=(q.arguments||[]).concat(l);console.info('Running "'+(`${q.command} `+u.join(' ')).trim()+'"');const v=(0,_child_process.spawn)(q.command,u,b),w=_clientnode2.default.getProcessCloseHandler(s,t);for(const x of _clientnode2.default.closeEventNames)v.on(x,w);c.push(v)}))}};['document','test'].includes(_configurator2.default.givenCommandLineArguments[2])?(yield _promise2.default.all(d),n(_configurator2.default.givenCommandLineArguments[2])):['lint','testInBrowser','typeCheck','serve'].includes(_configurator2.default.givenCommandLineArguments[2])&&n(_configurator2.default.givenCommandLineArguments[2])}let g=!1;const h=function(...i){if(!g)for(const j of f)j(...i);g=!0};for(const i of _clientnode2.default.closeEventNames)process.on(i,h);require.main===module&&(3>_configurator2.default.givenCommandLineArguments.length||!e.includes(_configurator2.default.givenCommandLineArguments[2]))&&console.info(`Give one of "${e.join('", "')}" as command `+'line argument. You can provide a json string as second parameter to dynamically overwrite some configurations.\n');try{yield _promise2.default.all(d)}catch(i){process.exit(i.returnCode)}}catch(b){if(_configurator2.default.debug)throw b;else console.error(b)}});return function(){return a.apply(this,arguments)}})();require.main===module&&main().catch((a)=>{throw a}),exports.default=main;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,