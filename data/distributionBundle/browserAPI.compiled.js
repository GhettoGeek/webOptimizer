'use strict';Object.defineProperty(exports,'__esModule',{value:!0});const onCreatedListener=[];let browserAPI;if('undefined'==typeof TARGET_TECHNOLOGY||'node'===TARGET_TECHNOLOGY){const a=require('path'),{JSDOM:b,VirtualConsole:c}=require('jsdom'),d=b,e=new c;for(const g of['assert','dir','info','log','time','timeEnd','trace','warn'])e.on(g,console[g].bind(console));e.on('error',function(g){!browserAPI.debug&&['XMLHttpRequest','resource loading'].includes(g.type)?console.warn(`Loading resource failed: ${g.toString()}.`):console.error(g.stack,g.detail)});const f=function render(g){let h=new d(g,{resources:'usable',runScripts:'dangerously',url:'http://localhost',virtualConsole:e}).window;browserAPI={debug:!1,domContentLoaded:!1,DOM:d,window:h,windowLoaded:!1},h.addEventListener('load',function(){browserAPI.domContentLoaded=!0,browserAPI.windowLoaded=!0}),h.document.addEventListener('DOMContentLoaded',function(){browserAPI.domContentLoaded=!0});for(const i of onCreatedListener)i(browserAPI,!1);return h};if('undefined'==typeof NAME||'webOptimizer'===NAME){const g=a.join(__dirname,'index.html.ejs');require('fs').readFile(g,{encoding:'utf-8'},function(h,i){if(h)throw h;f(require('./ejsLoader.compiled').bind({filename:g})(i))})}else f(require('webOptimizerDefaultTemplateFilePath'))}else browserAPI={debug:!1,domContentLoaded:!1,DOM:null,window,windowLoaded:!1},window.document.addEventListener('DOMContentLoaded',function(){browserAPI.domContentLoaded=!0;for(const a of onCreatedListener)a(browserAPI,!1)}),window.addEventListener('load',function(){browserAPI.windowLoaded=!0});exports.default=function(a,b=!0){const c=function wrappedCallback(...d){return b&&'undefined'!=typeof global&&global!==browserAPI.window&&(global.window=browserAPI.window),a(...d)};return'undefined'==typeof TARGET_TECHNOLOGY||'node'===TARGET_TECHNOLOGY?browserAPI?c(browserAPI,!0):onCreatedListener.push(c):browserAPI.domContentLoaded?c(browserAPI,!0):onCreatedListener.push(c)};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,