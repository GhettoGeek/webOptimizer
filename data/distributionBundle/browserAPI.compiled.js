'use strict';Object.defineProperty(exports,'__esModule',{value:!0});const onCreatedListener=[];let browserAPI;if('undefined'==typeof TARGET_TECHNOLOGY||'node'===TARGET_TECHNOLOGY){const a=require('path'),b=require('jsdom'),c=b.createVirtualConsole().sendTo(console,{omitJsdomErrors:!0});c.on('jsdomError',function(e){!browserAPI.debug&&['XMLHttpRequest','resource loading'].includes(e.type)?console.warn(`Loading resource failed: ${e.toString()}.`):console.error(e.stack,e.detail)});let d;d='undefined'==typeof NAME||'webOptimizer'===NAME?require('pug').compileFile(a.join(__dirname,'index.pug'),{pretty:!0})({configuration:{name:'test',givenCommandLineArguments:[]}}):require('webOptimizerDefaultTemplateFilePath'),b.env({created:function created(e,f){if(browserAPI={debug:!1,domContentLoaded:!1,metaDOM:b,window:f,windowLoaded:!1},browserAPI.window.document.addEventListener('DOMContentLoaded',function(){browserAPI.domContentLoaded=!0}),e)throw e;else for(const g of onCreatedListener)g(browserAPI,!1)},features:{FetchExternalResources:['script','frame','iframe','link','img'],ProcessExternalResources:['script'],SkipExternalResources:!1},html:d,onload:function onload(){browserAPI.domContentLoaded=!0,browserAPI.windowLoaded=!0},resourceLoader:function resourceLoader(e,f){return'localhost'===e.url.hostname&&(e.url.host=e.url.hostname='',e.url.port=null,e.url.protocol='file:',e.url.href=e.url.href.replace(/^[a-zA-Z]+:\/\/localhost(?::[0-9]+)?/,`file://${process.cwd()}`),e.url.path=e.url.pathname=a.join(process.cwd(),e.url.path)),browserAPI.debug&&console.info(`Load resource "${e.url.href}".`),e.defaultFetch(function(g,...h){g||f(g,...h)})},url:'http://localhost',virtualConsole:c})}else browserAPI={debug:!1,domContentLoaded:!1,metaDOM:null,window,windowLoaded:!1},window.document.addEventListener('DOMContentLoaded',function(){browserAPI.domContentLoaded=!0;for(const a of onCreatedListener)a(browserAPI,!1)}),window.addEventListener('load',function(){browserAPI.windowLoaded=!0});exports.default=function(a,b=!0){return b&&'undefined'!=typeof global&&global!==browserAPI.window&&(global.window=browserAPI.window),'undefined'==typeof TARGET_TECHNOLOGY||'node'===TARGET_TECHNOLOGY?browserAPI?a(browserAPI,!0):onCreatedListener.push(a):browserAPI.domContentLoaded?a(browserAPI,!0):onCreatedListener.push(a)};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,