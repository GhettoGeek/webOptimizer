#!/usr/bin/env node
'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper),_package=require('./package');function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}let metaConfiguration=_package.configuration;for(metaConfiguration.default.path.context=__dirname,metaConfiguration.default.contextType='main';metaConfiguration.default.path.context=_path2.default.resolve(metaConfiguration.default.path.context,'../../'),'node_modules'===_path2.default.basename(_path2.default.dirname(metaConfiguration.default.path.context)););if('node_modules'===_path2.default.basename(_path2.default.dirname(process.cwd()))||'.staging'===_path2.default.basename(_path2.default.dirname(process.cwd()))&&'node_modules'===_path2.default.basename(_path2.default.dirname(_path2.default.dirname(process.cwd()))))metaConfiguration.default.path.context=process.cwd(),metaConfiguration.default.contextType='dependency';else try{fileSystem.lstatSync(_path2.default.join(process.cwd(),'node_modules')).isSymbolicLink()&&(metaConfiguration.default.path.context=process.cwd())}catch(a){}let specificConfiguration;try{specificConfiguration=eval('require')(_path2.default.join(metaConfiguration.default.path.context,'package'))}catch(a){specificConfiguration={name:'mockup'},metaConfiguration.default.path.context=process.cwd()}const name=specificConfiguration.name;specificConfiguration=specificConfiguration.webOptimizer||{},specificConfiguration.name=name;let debug=metaConfiguration.default.debug;specificConfiguration.debug!==void 0&&(debug=specificConfiguration.debug),process.env.npm_config_production?debug=!1:process.env.npm_config_debug&&(debug=!0),metaConfiguration.default.path.context+='/';const libraryConfiguration=metaConfiguration.library;let configuration;configuration=debug?_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(metaConfiguration.default,metaConfiguration.debug),metaConfiguration.debug):metaConfiguration.default,configuration.debug=debug,'object'==typeof configuration.library&&_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(libraryConfiguration,configuration.library),configuration.library),('library'in specificConfiguration&&!0===specificConfiguration.library||('library'in specificConfiguration&&specificConfiguration.library===void 0||!('library'in specificConfiguration))&&configuration.library)&&(configuration=_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(configuration,libraryConfiguration),libraryConfiguration));let count=0,filePath=null;for(;;){const a=configuration.path.context+`.dynamicConfiguration-${count}.json`;if(!_clientnode2.default.isFileSync(a))break;filePath=a,count+=1}let runtimeInformation={givenCommandLineArguments:process.argv};if(filePath&&(runtimeInformation=JSON.parse(fileSystem.readFileSync(filePath,{encoding:configuration.encoding})),fileSystem.unlink(filePath,(a)=>{if(a)throw a})),2<runtimeInformation.givenCommandLineArguments.length)for(const a of['document','test','testInBrowser'])runtimeInformation.givenCommandLineArguments[2]===a&&_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(configuration,configuration[a]),configuration[a]);for(const a of['document','test','testInBrowser'])delete configuration[a];_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(_clientnode2.default.modifyObject(configuration,specificConfiguration),runtimeInformation),specificConfiguration,runtimeInformation);let result=null;if(3<runtimeInformation.givenCommandLineArguments.length&&(result=_clientnode2.default.stringParseEncodedObject(runtimeInformation.givenCommandLineArguments[runtimeInformation.givenCommandLineArguments.length-1],configuration,'configuration')),_clientnode2.default.isPlainObject(result)&&_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(configuration,result),result),configuration.dllManifestFilePaths=[],_clientnode2.default.isDirectorySync(configuration.path.target.base))for(const a of fileSystem.readdirSync(configuration.path.target.base))a.match(/^.*\.dll-manifest\.json$/)&&configuration.dllManifestFilePaths.push(_path2.default.resolve(configuration.path.target.base,a));const parameterDescription=['currentPath','fileSystem','Helper','path','require','Tools','webOptimizerPath','now','nowUTCTimestamp'],now=new Date,nowUTCTimestamp=Date.UTC(now.getUTCFullYear(),now.getUTCMonth(),now.getUTCDate(),now.getUTCHours(),now.getUTCMinutes(),now.getUTCSeconds(),now.getUTCMilliseconds()),parameter=[process.cwd(),fileSystem,_helper2.default,_path2.default,eval('require'),_clientnode2.default,__dirname,now,nowUTCTimestamp];for(const a in configuration.path.base=_path2.default.resolve(configuration.path.context,configuration.path.base),configuration.path)if(configuration.path.hasOwnProperty(a)&&'base'!==a&&'string'==typeof configuration.path[a])configuration.path[a]=_path2.default.resolve(configuration.path.base,configuration.path[a])+'/';else if(_clientnode2.default.isPlainObject(configuration.path[a]))for(const b in configuration.path[a].base=_path2.default.resolve(configuration.path.base,configuration.path[a].base),configuration.path[a])if(configuration.path[a].hasOwnProperty(b)&&!['base','public'].includes(b)&&'string'==typeof configuration.path[a][b])configuration.path[a][b]=_path2.default.resolve(configuration.path[a].base,configuration.path[a][b])+'/';else if(_clientnode2.default.isPlainObject(configuration.path[a][b]))for(const c in configuration.path[a][b].base=_path2.default.resolve(configuration.path[a].base,configuration.path[a][b].base),configuration.path[a][b])configuration.path[a][b].hasOwnProperty(c)&&'base'!==c&&'string'==typeof configuration.path[a][b][c]&&(configuration.path[a][b][c]=_path2.default.resolve(configuration.path[a][b].base,configuration.path[a][b][c])+'/');const resolvedConfiguration=_clientnode2.default.resolveDynamicDataStructure(configuration,parameterDescription,parameter),defaultConfiguration=resolvedConfiguration.build.types.default;for(const a in delete resolvedConfiguration.build.types.default,resolvedConfiguration.build.types)resolvedConfiguration.build.types.hasOwnProperty(a)&&(resolvedConfiguration.build.types[a]=_clientnode2.default.extendObject(!0,{},defaultConfiguration,_clientnode2.default.extendObject(!0,{extension:a},resolvedConfiguration.build.types[a],{type:a})));resolvedConfiguration.module.locations=_helper2.default.determineModuleLocations(resolvedConfiguration.injection.internal,resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,resolvedConfiguration.path.source.asset.base),resolvedConfiguration.injection=_helper2.default.resolveInjection(resolvedConfiguration.injection,_helper2.default.resolveBuildConfigurationFilePaths(resolvedConfiguration.build.types,resolvedConfiguration.path.source.asset.base,_helper2.default.normalizePaths(resolvedConfiguration.path.ignore.concat(resolvedConfiguration.module.directoryNames,resolvedConfiguration.loader.directoryNames).map((a)=>_path2.default.resolve(resolvedConfiguration.path.context,a)).filter((a)=>!resolvedConfiguration.path.context.startsWith(a))),resolvedConfiguration.package.main.fileNames),resolvedConfiguration.injection.autoExclude,resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,resolvedConfiguration.path.source.asset.base,resolvedConfiguration.path.ignore);const internalInjection=resolvedConfiguration.injection.internal;for(const a in resolvedConfiguration.injection.internal={given:resolvedConfiguration.injection.internal,normalized:_helper2.default.resolveModulesInFolders(_helper2.default.normalizeInternalInjection(internalInjection),resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,resolvedConfiguration.path.source.asset.base,resolvedConfiguration.path.ignore.concat(resolvedConfiguration.module.directoryNames,resolvedConfiguration.loader.directoryNames).map((a)=>_path2.default.resolve(resolvedConfiguration.path.context,a)).filter((a)=>!resolvedConfiguration.path.context.startsWith(a)))},resolvedConfiguration.needed={javaScript:configuration.debug&&['serve','testInBrowser'].includes(resolvedConfiguration.givenCommandLineArguments[2])},resolvedConfiguration.injection.internal.normalized)if(resolvedConfiguration.injection.internal.normalized.hasOwnProperty(a))for(const b of resolvedConfiguration.injection.internal.normalized[a]){const c=_helper2.default.determineModuleFilePath(b,resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,'./',resolvedConfiguration.path.ignore,resolvedConfiguration.module.directoryNames,resolvedConfiguration.package.main.fileNames,resolvedConfiguration.package.main.propertyNames,resolvedConfiguration.package.aliasPropertyNames,resolvedConfiguration.encoding);let d;if(c)d=_helper2.default.determineAssetType(c,resolvedConfiguration.build.types,resolvedConfiguration.path);else throw new Error(`Given request "${b}" couldn't be resolved.`);d&&(resolvedConfiguration.needed[d]=!0)}resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader='';for(const a of resolvedConfiguration.files.defaultHTML.template.use)resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader&&(resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader+='!'),resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader+=a.loader,a.options&&(resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader+='?'+_clientnode2.default.convertCircularObjectToJSON(a.options));resolvedConfiguration.module.aliases.webOptimizerDefaultTemplateFilePath$=resolvedConfiguration.files.defaultHTML.template.filePath;for(let a of resolvedConfiguration.files.html)if(_clientnode2.default.extendObject(!0,a,resolvedConfiguration.files.defaultHTML),a.template.request=a.template.filePath,a.template.filePath!==resolvedConfiguration.files.defaultHTML.template.filePath&&a.template.options){const b=new String(a.template.request+_clientnode2.default.convertCircularObjectToJSON(a.template.options));b.replace=((c)=>()=>c)(a.template.filePath),a.template.request=b}exports.default=resolvedConfiguration;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxHQUF1QixHQUFJLE9BQUosQ0FDekIsRUFBa0IsUUFBbEIsQ0FBMkIsT0FBM0IsQ0FDQSxxQkFBTSwyQkFBTixDQUNJLEVBQWtCLFFBQWxCLENBQTJCLE9BRC9CLENBRnlCLENBQTdCLENBSUEsRUFBYyxPQUFkLENBQXdCLENBQUMsS0FBNEIsSUFJekMsQ0FKWSxFQUlKLEVBQWtCLFFBQWxCLENBQTJCLFFBSnZCLENBTDFCLENBVUUsRUFBa0IsUUFBbEIsQ0FBMkIsT0FBM0IsQ0FBcUMsQ0FDeEMsQyxnQkFHVSxxQiIsImZpbGUiOiJjb25maWd1cmF0b3IuY29tcGlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIEBmbG93XG4vLyAtKi0gY29kaW5nOiB1dGYtOCAtKi1cbid1c2Ugc3RyaWN0J1xuLyogIVxuICAgIHJlZ2lvbiBoZWFkZXJcbiAgICBDb3B5cmlnaHQgVG9yYmVuIFNpY2tlcnQgKGluZm9bXCJ+YXR+XCJddG9yYmVuLndlYnNpdGUpIDE2LjEyLjIwMTJcblxuICAgIExpY2Vuc2VcbiAgICAtLS0tLS0tXG5cbiAgICBUaGlzIGxpYnJhcnkgd3JpdHRlbiBieSBUb3JiZW4gU2lja2VydCBzdGFuZCB1bmRlciBhIGNyZWF0aXZlIGNvbW1vbnMgbmFtaW5nXG4gICAgMy4wIHVucG9ydGVkIGxpY2Vuc2UuIHNlZSBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjAvZGVlZC5kZVxuICAgIGVuZHJlZ2lvblxuKi9cbi8vIHJlZ2lvbiBpbXBvcnRzXG5pbXBvcnQgVG9vbHMgZnJvbSAnY2xpZW50bm9kZSdcbmltcG9ydCB0eXBlIHtQbGFpbk9iamVjdH0gZnJvbSAnY2xpZW50bm9kZSdcbmltcG9ydCAqIGFzIGZpbGVTeXN0ZW0gZnJvbSAnZnMnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuLy8gTk9URTogT25seSBuZWVkZWQgZm9yIGRlYnVnZ2luZyB0aGlzIGZpbGUuXG50cnkge1xuICAgIHJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3RlcicpXG59IGNhdGNoIChlcnJvcikge31cblxuaW1wb3J0IEhlbHBlciBmcm9tICcuL2hlbHBlci5jb21waWxlZCdcbi8vIE5PVEU6IFwie2NvbmZpZ3VyYXRpb24gYXMgbWV0YUNvbmZpZ3VyYXRpb259XCIgd291bGQgcmVzdWx0IGluIGEgcmVhZCBvbmx5XG4vLyB2YXJpYWJsZSBuYW1lZCBcIm1ldGFDb25maWd1cmF0aW9uXCIuXG5pbXBvcnQge2NvbmZpZ3VyYXRpb24gYXMgZ2l2ZW5NZXRhQ29uZmlndXJhdGlvbn0gZnJvbSAnLi9wYWNrYWdlJ1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB0eXBlIHtcbiAgICBEZWZhdWx0Q29uZmlndXJhdGlvbiwgSFRNTENvbmZpZ3VyYXRpb24sIEludGVybmFsSW5qZWN0aW9uLFxuICAgIE1ldGFDb25maWd1cmF0aW9uLCBSZXNvbHZlZENvbmZpZ3VyYXRpb25cbn0gZnJvbSAnLi90eXBlJ1xuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xubGV0IG1ldGFDb25maWd1cmF0aW9uOk1ldGFDb25maWd1cmF0aW9uID0gZ2l2ZW5NZXRhQ29uZmlndXJhdGlvblxuLypcbiAgICBUbyBhc3N1bWUgdG8gZ28gdHdvIGZvbGRlciB1cCBmcm9tIHRoaXMgZmlsZSB1bnRpbCB0aGVyZSBpcyBub1xuICAgIFwibm9kZV9tb2R1bGVzXCIgcGFyZW50IGZvbGRlciBpcyB1c3VhbGx5IHJlc2lsaWVudCBhZ2FpbiBkZWFsaW5nIHdpdGhcbiAgICBwcm9qZWN0cyB3aGVyZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGlzbid0IHRoZSBwcm9qZWN0cyBkaXJlY3RvcnkgYW5kXG4gICAgdGhpcyBsaWJyYXJ5IGlzIGxvY2F0ZWQgYXMgYSBuZXN0ZWQgZGVwZW5kZW5jeS5cbiovXG5tZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0LnBhdGguY29udGV4dCA9IF9fZGlybmFtZVxubWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5jb250ZXh0VHlwZSA9ICdtYWluJ1xud2hpbGUgKHRydWUpIHtcbiAgICBtZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0LnBhdGguY29udGV4dCA9IHBhdGgucmVzb2x2ZShcbiAgICAgICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHQsICcuLi8uLi8nKVxuICAgIGlmIChwYXRoLmJhc2VuYW1lKHBhdGguZGlybmFtZShcbiAgICAgICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHRcbiAgICApKSAhPT0gJ25vZGVfbW9kdWxlcycpXG4gICAgICAgIGJyZWFrXG59XG5pZiAoXG4gICAgcGF0aC5iYXNlbmFtZShwYXRoLmRpcm5hbWUocHJvY2Vzcy5jd2QoKSkpID09PSAnbm9kZV9tb2R1bGVzJyB8fFxuICAgIHBhdGguYmFzZW5hbWUocGF0aC5kaXJuYW1lKHByb2Nlc3MuY3dkKCkpKSA9PT0gJy5zdGFnaW5nJyAmJlxuICAgIHBhdGguYmFzZW5hbWUocGF0aC5kaXJuYW1lKHBhdGguZGlybmFtZShwcm9jZXNzLmN3ZCgpKSkpID09PSAnbm9kZV9tb2R1bGVzJ1xuKSB7XG4gICAgLypcbiAgICAgICAgTk9URTogSWYgd2UgYXJlIGRlYWxpbmcgd2FzIGEgZGVwZW5kZW5jeSBwcm9qZWN0IHVzZSBjdXJyZW50IGRpcmVjdG9yeVxuICAgICAgICBhcyBjb250ZXh0LlxuICAgICovXG4gICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHQgPSBwcm9jZXNzLmN3ZCgpXG4gICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5jb250ZXh0VHlwZSA9ICdkZXBlbmRlbmN5J1xufSBlbHNlXG4gICAgLypcbiAgICAgICAgTk9URTogSWYgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgcmVmZXJlbmNlcyB0aGlzIGZpbGUgdmlhIGFcbiAgICAgICAgbGlua2VkIFwibm9kZV9tb2R1bGVzXCIgZm9sZGVyIHVzaW5nIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgYXMgY29udGV4dFxuICAgICAgICBpcyBhIGJldHRlciBhc3N1bXB0aW9uIHRoYW4gdHdvIGZvbGRlcnMgdXAgdGhlIGhpZXJhcmNoeS5cbiAgICAqL1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChmaWxlU3lzdGVtLmxzdGF0U3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoXG4gICAgICAgICksICdub2RlX21vZHVsZXMnKSkuaXNTeW1ib2xpY0xpbmsoKSlcbiAgICAgICAgICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQucGF0aC5jb250ZXh0ID0gcHJvY2Vzcy5jd2QoKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxubGV0IHNwZWNpZmljQ29uZmlndXJhdGlvbjpQbGFpbk9iamVjdFxudHJ5IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1ldmFsICovXG4gICAgc3BlY2lmaWNDb25maWd1cmF0aW9uID0gZXZhbCgncmVxdWlyZScpKHBhdGguam9pbihcbiAgICAgICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHQsICdwYWNrYWdlJykpXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1ldmFsICovXG59IGNhdGNoIChlcnJvcikge1xuICAgIHNwZWNpZmljQ29uZmlndXJhdGlvbiA9IHtuYW1lOiAnbW9ja3VwJ31cbiAgICBtZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0LnBhdGguY29udGV4dCA9IHByb2Nlc3MuY3dkKClcbn1cbmNvbnN0IG5hbWU6c3RyaW5nID0gc3BlY2lmaWNDb25maWd1cmF0aW9uLm5hbWVcbnNwZWNpZmljQ29uZmlndXJhdGlvbiA9IHNwZWNpZmljQ29uZmlndXJhdGlvbi53ZWJPcHRpbWl6ZXIgfHwge31cbnNwZWNpZmljQ29uZmlndXJhdGlvbi5uYW1lID0gbmFtZVxuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gbG9hZGluZyBkZWZhdWx0IGNvbmZpZ3VyYXRpb25cbi8vIE5PVEU6IEdpdmVuIG5vZGUgY29tbWFuZCBsaW5lIGFyZ3VtZW50cyByZXN1bHRzIGluIFwibnBtX2NvbmZpZ18qXCJcbi8vIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbmxldCBkZWJ1Zzpib29sZWFuID0gbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5kZWJ1Z1xuaWYgKHNwZWNpZmljQ29uZmlndXJhdGlvbi5kZWJ1ZyAhPT0gdW5kZWZpbmVkKVxuICAgIGRlYnVnID0gc3BlY2lmaWNDb25maWd1cmF0aW9uLmRlYnVnXG5pZiAocHJvY2Vzcy5lbnYubnBtX2NvbmZpZ19wcm9kdWN0aW9uKVxuICAgIGRlYnVnID0gZmFsc2VcbmVsc2UgaWYgKHByb2Nlc3MuZW52Lm5wbV9jb25maWdfZGVidWcpXG4gICAgZGVidWcgPSB0cnVlXG5tZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0LnBhdGguY29udGV4dCArPSAnLydcbi8vIE1lcmdlcyBmaW5hbCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGRlcGVuZGluZyBvbiBnaXZlbiB0YXJnZXRcbi8vIGVudmlyb25tZW50LlxuY29uc3QgbGlicmFyeUNvbmZpZ3VyYXRpb246UGxhaW5PYmplY3QgPSBtZXRhQ29uZmlndXJhdGlvbi5saWJyYXJ5XG5sZXQgY29uZmlndXJhdGlvbjpEZWZhdWx0Q29uZmlndXJhdGlvblxuaWYgKGRlYnVnKVxuICAgIGNvbmZpZ3VyYXRpb24gPSBUb29scy5leHRlbmRPYmplY3QodHJ1ZSwgVG9vbHMubW9kaWZ5T2JqZWN0KFxuICAgICAgICBtZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0LCBtZXRhQ29uZmlndXJhdGlvbi5kZWJ1Z1xuICAgICksIG1ldGFDb25maWd1cmF0aW9uLmRlYnVnKVxuZWxzZVxuICAgIGNvbmZpZ3VyYXRpb24gPSBtZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0XG5jb25maWd1cmF0aW9uLmRlYnVnID0gZGVidWdcbmlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5saWJyYXJ5ID09PSAnb2JqZWN0JylcbiAgICBUb29scy5leHRlbmRPYmplY3QodHJ1ZSwgVG9vbHMubW9kaWZ5T2JqZWN0KFxuICAgICAgICBsaWJyYXJ5Q29uZmlndXJhdGlvbiwgY29uZmlndXJhdGlvbi5saWJyYXJ5XG4gICAgKSwgY29uZmlndXJhdGlvbi5saWJyYXJ5KVxuaWYgKFxuICAgICdsaWJyYXJ5JyBpbiBzcGVjaWZpY0NvbmZpZ3VyYXRpb24gJiZcbiAgICBzcGVjaWZpY0NvbmZpZ3VyYXRpb24ubGlicmFyeSA9PT0gdHJ1ZSB8fCAoXG4gICAgICAgICdsaWJyYXJ5JyBpbiBzcGVjaWZpY0NvbmZpZ3VyYXRpb24gJiZcbiAgICAgICAgc3BlY2lmaWNDb25maWd1cmF0aW9uLmxpYnJhcnkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAhKCdsaWJyYXJ5JyBpbiBzcGVjaWZpY0NvbmZpZ3VyYXRpb24pXG4gICAgKSAmJiBjb25maWd1cmF0aW9uLmxpYnJhcnlcbilcbiAgICBjb25maWd1cmF0aW9uID0gVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIFRvb2xzLm1vZGlmeU9iamVjdChcbiAgICAgICAgY29uZmlndXJhdGlvbiwgbGlicmFyeUNvbmZpZ3VyYXRpb25cbiAgICApLCBsaWJyYXJ5Q29uZmlndXJhdGlvbilcbi8vIGVuZHJlZ2lvblxuLypcbiAgICByZWdpb24gbWVyZ2luZyBhbmQgZXZhbHVhdGluZyBkZWZhdWx0LCB0ZXN0LCBkb2N1bWVudCwgc3BlY2lmaWMgYW5kIGR5bmFtaWNcbiAgICBzZXR0aW5nc1xuKi9cbi8vIC8gcmVnaW9uIGxvYWQgYWRkaXRpb25hbCBkeW5hbWljYWxseSBnaXZlbiBjb25maWd1cmF0aW9uXG5sZXQgY291bnQ6bnVtYmVyID0gMFxubGV0IGZpbGVQYXRoOj9zdHJpbmcgPSBudWxsXG53aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IG5ld0ZpbGVQYXRoOnN0cmluZyA9IGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0ICtcbiAgICAgICAgYC5keW5hbWljQ29uZmlndXJhdGlvbi0ke2NvdW50fS5qc29uYFxuICAgIGlmICghVG9vbHMuaXNGaWxlU3luYyhuZXdGaWxlUGF0aCkpXG4gICAgICAgIGJyZWFrXG4gICAgZmlsZVBhdGggPSBuZXdGaWxlUGF0aFxuICAgIGNvdW50ICs9IDFcbn1cbmxldCBydW50aW1lSW5mb3JtYXRpb246UGxhaW5PYmplY3QgPSB7XG4gICAgZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50czogcHJvY2Vzcy5hcmd2XG59XG5pZiAoZmlsZVBhdGgpIHtcbiAgICBydW50aW1lSW5mb3JtYXRpb24gPSBKU09OLnBhcnNlKGZpbGVTeXN0ZW0ucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCB7XG4gICAgICAgIGVuY29kaW5nOiAoY29uZmlndXJhdGlvbi5lbmNvZGluZzpzdHJpbmcpfSkpXG4gICAgZmlsZVN5c3RlbS51bmxpbmsoZmlsZVBhdGgsIChlcnJvcjo/RXJyb3IpOnZvaWQgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICB0aHJvdyBlcnJvclxuICAgIH0pXG59XG5pZiAocnVudGltZUluZm9ybWF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHMubGVuZ3RoID4gMilcbiAgICAvLyByZWdpb24gYXBwbHkgdXNlIGNhc2Ugc3BlY2lmaWMgY29uZmlndXJhdGlvblxuICAgIGZvciAoY29uc3QgdHlwZTpzdHJpbmcgb2YgWydkb2N1bWVudCcsICd0ZXN0JywgJ3Rlc3RJbkJyb3dzZXInXSlcbiAgICAgICAgaWYgKHJ1bnRpbWVJbmZvcm1hdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdID09PSB0eXBlKVxuICAgICAgICAgICAgVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIFRvb2xzLm1vZGlmeU9iamVjdChcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uW3R5cGVdXG4gICAgICAgICAgICApLCBjb25maWd1cmF0aW9uW3R5cGVdKVxuICAgIC8vIGVuZHJlZ2lvblxuZm9yIChjb25zdCB0eXBlOnN0cmluZyBvZiBbJ2RvY3VtZW50JywgJ3Rlc3QnLCAndGVzdEluQnJvd3NlciddKVxuICAgIGRlbGV0ZSBjb25maWd1cmF0aW9uW3R5cGVdXG4vLyAvIGVuZHJlZ2lvblxuVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIFRvb2xzLm1vZGlmeU9iamVjdChUb29scy5tb2RpZnlPYmplY3QoXG4gICAgY29uZmlndXJhdGlvbiwgc3BlY2lmaWNDb25maWd1cmF0aW9uXG4pLCBydW50aW1lSW5mb3JtYXRpb24pLCBzcGVjaWZpY0NvbmZpZ3VyYXRpb24sIHJ1bnRpbWVJbmZvcm1hdGlvbilcbmxldCByZXN1bHQ6P1BsYWluT2JqZWN0ID0gbnVsbFxuaWYgKHJ1bnRpbWVJbmZvcm1hdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzLmxlbmd0aCA+IDMpXG4gICAgcmVzdWx0ID0gVG9vbHMuc3RyaW5nUGFyc2VFbmNvZGVkT2JqZWN0KFxuICAgICAgICBydW50aW1lSW5mb3JtYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1tydW50aW1lSW5mb3JtYXRpb25cbiAgICAgICAgICAgIC5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzLmxlbmd0aCAtIDFdLFxuICAgICAgICBjb25maWd1cmF0aW9uLCAnY29uZmlndXJhdGlvbicpXG5pZiAoVG9vbHMuaXNQbGFpbk9iamVjdChyZXN1bHQpKVxuICAgIFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCBUb29scy5tb2RpZnlPYmplY3QoY29uZmlndXJhdGlvbiwgcmVzdWx0KSwgcmVzdWx0KVxuLy8gLyByZWdpb24gZGV0ZXJtaW5lIGV4aXN0aW5nIHByZSBjb21waWxlZCBkbGwgbWFuaWZlc3RzIGZpbGUgcGF0aHNcbmNvbmZpZ3VyYXRpb24uZGxsTWFuaWZlc3RGaWxlUGF0aHMgPSBbXVxuaWYgKFRvb2xzLmlzRGlyZWN0b3J5U3luYyhjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2UpKVxuICAgIGZvciAoY29uc3QgZmlsZU5hbWU6c3RyaW5nIG9mIGZpbGVTeXN0ZW0ucmVhZGRpclN5bmMoXG4gICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZVxuICAgICkpXG4gICAgICAgIGlmIChmaWxlTmFtZS5tYXRjaCgvXi4qXFwuZGxsLW1hbmlmZXN0XFwuanNvbiQvKSlcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uZGxsTWFuaWZlc3RGaWxlUGF0aHMucHVzaChwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlLCBmaWxlTmFtZSkpXG4vLyAvIGVuZHJlZ2lvblxuLy8gLyByZWdpb24gZGVmaW5lIGR5bmFtaWMgcmVzb2x2ZSBwYXJhbWV0ZXJcbmNvbnN0IHBhcmFtZXRlckRlc2NyaXB0aW9uOkFycmF5PHN0cmluZz4gPSBbXG4gICAgJ2N1cnJlbnRQYXRoJywgJ2ZpbGVTeXN0ZW0nLCAnSGVscGVyJywgJ3BhdGgnLCAncmVxdWlyZScsICdUb29scycsXG4gICAgJ3dlYk9wdGltaXplclBhdGgnLCAnbm93JywgJ25vd1VUQ1RpbWVzdGFtcCddXG5jb25zdCBub3c6RGF0ZSA9IG5ldyBEYXRlKClcbmNvbnN0IG5vd1VUQ1RpbWVzdGFtcDpudW1iZXIgPSBEYXRlLlVUQyhcbiAgICBub3cuZ2V0VVRDRnVsbFllYXIoKSwgbm93LmdldFVUQ01vbnRoKCksIG5vdy5nZXRVVENEYXRlKCksXG4gICAgbm93LmdldFVUQ0hvdXJzKCksIG5vdy5nZXRVVENNaW51dGVzKCksIG5vdy5nZXRVVENTZWNvbmRzKCksXG4gICAgbm93LmdldFVUQ01pbGxpc2Vjb25kcygpKVxuY29uc3QgcGFyYW1ldGVyOkFycmF5PGFueT4gPSBbXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXZhbCAqL1xuICAgIHByb2Nlc3MuY3dkKCksIGZpbGVTeXN0ZW0sIEhlbHBlciwgcGF0aCwgZXZhbCgncmVxdWlyZScpLCBUb29scywgX19kaXJuYW1lLFxuICAgIG5vdywgbm93VVRDVGltZXN0YW1wXVxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXZhbCAqL1xuLy8gLyBlbmRyZWdpb25cbi8vIC8gcmVnaW9uIGJ1aWxkIGFic29sdXRlIHBhdGhzXG5jb25maWd1cmF0aW9uLnBhdGguYmFzZSA9IHBhdGgucmVzb2x2ZShcbiAgICBjb25maWd1cmF0aW9uLnBhdGguY29udGV4dCwgY29uZmlndXJhdGlvbi5wYXRoLmJhc2UpXG5mb3IgKGNvbnN0IGtleTpzdHJpbmcgaW4gY29uZmlndXJhdGlvbi5wYXRoKVxuICAgIGlmIChcbiAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5ICE9PSAnYmFzZScgJiZcbiAgICAgICAgdHlwZW9mIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldID09PSAnc3RyaW5nJ1xuICAgIClcbiAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV0gPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguYmFzZSwgY29uZmlndXJhdGlvbi5wYXRoW2tleV1cbiAgICAgICAgKSArICcvJ1xuICAgIGVsc2UgaWYgKFRvb2xzLmlzUGxhaW5PYmplY3QoY29uZmlndXJhdGlvbi5wYXRoW2tleV0pKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldLmJhc2UgPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguYmFzZSwgY29uZmlndXJhdGlvbi5wYXRoW2tleV0uYmFzZSlcbiAgICAgICAgZm9yIChjb25zdCBzdWJLZXk6c3RyaW5nIGluIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldKVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldLmhhc093blByb3BlcnR5KHN1YktleSkgJiZcbiAgICAgICAgICAgICAgICAhWydiYXNlJywgJ3B1YmxpYyddLmluY2x1ZGVzKHN1YktleSkgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldID0gcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XS5iYXNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldXG4gICAgICAgICAgICAgICAgKSArICcvJ1xuICAgICAgICAgICAgZWxzZSBpZiAoVG9vbHMuaXNQbGFpbk9iamVjdChjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV0uYmFzZSA9IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV0uYmFzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XS5iYXNlKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViU3ViS2V5OnN0cmluZyBpbiBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldKVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XS5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlN1YktleVxuICAgICAgICAgICAgICAgICAgICApICYmIHN1YlN1YktleSAhPT0gJ2Jhc2UnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldW1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViU3ViS2V5XG4gICAgICAgICAgICAgICAgICAgIF0gPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJTdWJLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0gPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XS5iYXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV1bc3ViU3ViS2V5XVxuICAgICAgICAgICAgICAgICAgICAgICAgKSArICcvJ1xuICAgICAgICAgICAgfVxuICAgIH1cbi8vIC8gZW5kcmVnaW9uXG5jb25zdCByZXNvbHZlZENvbmZpZ3VyYXRpb246UmVzb2x2ZWRDb25maWd1cmF0aW9uID1cbiAgICBUb29scy5yZXNvbHZlRHluYW1pY0RhdGFTdHJ1Y3R1cmUoXG4gICAgICAgIGNvbmZpZ3VyYXRpb24sIHBhcmFtZXRlckRlc2NyaXB0aW9uLCBwYXJhbWV0ZXIpXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiBjb25zb2xpZGF0ZSBmaWxlIHNwZWNpZmljIGJ1aWxkIGNvbmZpZ3VyYXRpb25cbi8vIEFwcGx5IGRlZmF1bHQgZmlsZSBsZXZlbCBidWlsZCBjb25maWd1cmF0aW9ucyB0byBhbGwgZmlsZSB0eXBlIHNwZWNpZmljXG4vLyBvbmVzLlxuY29uc3QgZGVmYXVsdENvbmZpZ3VyYXRpb246UGxhaW5PYmplY3QgPVxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5idWlsZC50eXBlcy5kZWZhdWx0XG5kZWxldGUgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzLmRlZmF1bHRcbmZvciAoY29uc3QgdHlwZTpzdHJpbmcgaW4gcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzKVxuICAgIGlmIChyZXNvbHZlZENvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMuaGFzT3duUHJvcGVydHkodHlwZSkpXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5idWlsZC50eXBlc1t0eXBlXSA9IFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCB7XG4gICAgICAgIH0sIGRlZmF1bHRDb25maWd1cmF0aW9uLCBUb29scy5leHRlbmRPYmplY3QoXG4gICAgICAgICAgICB0cnVlLCB7ZXh0ZW5zaW9uOiB0eXBlfSwgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzW3R5cGVdLFxuICAgICAgICAgICAge3R5cGV9KSlcbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIHJlc29sdmUgbW9kdWxlIGxvY2F0aW9uIGFuZCBkZXRlcm1pbmUgd2hpY2ggYXNzZXQgdHlwZXMgYXJlIG5lZWRlZFxucmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5sb2NhdGlvbnMgPSBIZWxwZXIuZGV0ZXJtaW5lTW9kdWxlTG9jYXRpb25zKFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5hbGlhc2VzLFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUucmVwbGFjZW1lbnRzLm5vcm1hbCxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uZXh0ZW5zaW9ucywgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguY29udGV4dCxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuYmFzZSlcbnJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24gPSBIZWxwZXIucmVzb2x2ZUluamVjdGlvbihcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLCBIZWxwZXIucmVzb2x2ZUJ1aWxkQ29uZmlndXJhdGlvbkZpbGVQYXRocyhcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzLFxuICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuYmFzZSxcbiAgICAgICAgSGVscGVyLm5vcm1hbGl6ZVBhdGhzKHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmlnbm9yZS5jb25jYXQoXG4gICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLFxuICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmxvYWRlci5kaXJlY3RvcnlOYW1lc1xuICAgICAgICApLm1hcCgoZmlsZVBhdGg6c3RyaW5nKTpzdHJpbmcgPT4gcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguY29udGV4dCwgZmlsZVBhdGgpXG4gICAgICAgICkuZmlsdGVyKChmaWxlUGF0aDpzdHJpbmcpOmJvb2xlYW4gPT5cbiAgICAgICAgICAgICFyZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LnN0YXJ0c1dpdGgoZmlsZVBhdGgpKSksXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYWNrYWdlLm1haW4uZmlsZU5hbWVzXG4gICAgKSwgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbi5hdXRvRXhjbHVkZSxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmFsaWFzZXMsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5yZXBsYWNlbWVudHMubm9ybWFsLFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5leHRlbnNpb25zLFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguc291cmNlLmFzc2V0LmJhc2UsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguaWdub3JlKVxuY29uc3QgaW50ZXJuYWxJbmplY3Rpb246SW50ZXJuYWxJbmplY3Rpb24gPVxuICAgIC8vIElnbm9yZVR5cGVDaGVja1xuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWxcbnJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwgPSB7XG4gICAgZ2l2ZW46IHJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwsXG4gICAgbm9ybWFsaXplZDogSGVscGVyLnJlc29sdmVNb2R1bGVzSW5Gb2xkZXJzKFxuICAgICAgICBIZWxwZXIubm9ybWFsaXplSW50ZXJuYWxJbmplY3Rpb24oaW50ZXJuYWxJbmplY3Rpb24pLFxuICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmFsaWFzZXMsXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUucmVwbGFjZW1lbnRzLm5vcm1hbCxcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmV4dGVuc2lvbnMsXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5iYXNlLFxuICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5pZ25vcmUuY29uY2F0KFxuICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5kaXJlY3RvcnlOYW1lcyxcbiAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5sb2FkZXIuZGlyZWN0b3J5TmFtZXNcbiAgICAgICAgKS5tYXAoKGZpbGVQYXRoOnN0cmluZyk6c3RyaW5nID0+IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIGZpbGVQYXRoKVxuICAgICAgICApLmZpbHRlcigoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+XG4gICAgICAgICAgICAhcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguY29udGV4dC5zdGFydHNXaXRoKGZpbGVQYXRoKSkpfVxucmVzb2x2ZWRDb25maWd1cmF0aW9uLm5lZWRlZCA9IHtqYXZhU2NyaXB0OiBjb25maWd1cmF0aW9uLmRlYnVnICYmIFtcbiAgICAnc2VydmUnLCAndGVzdEluQnJvd3Nlcidcbl0uaW5jbHVkZXMocmVzb2x2ZWRDb25maWd1cmF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbMl0pfVxuZm9yIChcbiAgICBjb25zdCBjaHVua05hbWU6c3RyaW5nIGluXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkXG4pXG4gICAgaWYgKHJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZC5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgY2h1bmtOYW1lXG4gICAgKSlcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsZUlEOnN0cmluZyBvZlxuICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbC5ub3JtYWxpemVkW2NodW5rTmFtZV1cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aDo/c3RyaW5nID0gSGVscGVyLmRldGVybWluZU1vZHVsZUZpbGVQYXRoKFxuICAgICAgICAgICAgICAgIG1vZHVsZUlELCByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmFsaWFzZXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5yZXBsYWNlbWVudHMubm9ybWFsLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5leHRlbnNpb25zLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgTk9URTogV2UgZG9lc24ndCB1c2VcbiAgICAgICAgICAgICAgICAgICAgXCJyZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuYmFzZVwiIGJlY2F1c2Ugd2VcbiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhbHJlYWR5IHJlc29sdmUgYWxsIG1vZHVsZSBpZHMuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAnLi8nLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmlnbm9yZSxcbiAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmRpcmVjdG9yeU5hbWVzLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYWNrYWdlLm1haW4uZmlsZU5hbWVzLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYWNrYWdlLm1haW4ucHJvcGVydHlOYW1lcyxcbiAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGFja2FnZS5hbGlhc1Byb3BlcnR5TmFtZXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmVuY29kaW5nKVxuICAgICAgICAgICAgbGV0IHR5cGU6P3N0cmluZ1xuICAgICAgICAgICAgaWYgKGZpbGVQYXRoKVxuICAgICAgICAgICAgICAgIHR5cGUgPSBIZWxwZXIuZGV0ZXJtaW5lQXNzZXRUeXBlKFxuICAgICAgICAgICAgICAgICAgICBmaWxlUGF0aCwgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBHaXZlbiByZXF1ZXN0IFwiJHttb2R1bGVJRH1cIiBjb3VsZG4ndCBiZSByZXNvbHZlZC5gKVxuICAgICAgICAgICAgaWYgKHR5cGUpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm5lZWRlZFt0eXBlXSA9IHRydWVcbiAgICAgICAgfVxuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gYWRkaW5nIHNwZWNpYWwgYWxpYXNlc1xuLy8gTk9URTogVGhpcyBhbGlhcyBjb3VsZG4ndCBiZSBzZXQgaW4gdGhlIFwicGFja2FnZS5qc29uXCIgZmlsZSBzaW5jZSB0aGlzIHdvdWxkXG4vLyByZXN1bHQgaW4gYW4gZW5kbGVzcyBsb29wLlxucmVzb2x2ZWRDb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzLndlYk9wdGltaXplckRlZmF1bHRUZW1wbGF0ZUZpbGVMb2FkZXIgPSAnJ1xuZm9yIChcbiAgICBjb25zdCBsb2FkZXI6UGxhaW5PYmplY3Qgb2ZcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUwudGVtcGxhdGUudXNlXG4pIHtcbiAgICBpZiAoXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5sb2FkZXIuYWxpYXNlc1xuICAgICAgICAud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlclxuICAgIClcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzXG4gICAgICAgICAgICAud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlciArPSAnISdcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubG9hZGVyLmFsaWFzZXNcbiAgICAgICAgLndlYk9wdGltaXplckRlZmF1bHRUZW1wbGF0ZUZpbGVMb2FkZXIgKz0gbG9hZGVyLmxvYWRlclxuICAgIGlmIChsb2FkZXIub3B0aW9ucylcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzXG4gICAgICAgICAgICAud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlciArPSAnPycgK1xuICAgICAgICAgICAgICAgIFRvb2xzLmNvbnZlcnRDaXJjdWxhck9iamVjdFRvSlNPTihsb2FkZXIub3B0aW9ucylcbn1cbnJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcy53ZWJPcHRpbWl6ZXJEZWZhdWx0VGVtcGxhdGVGaWxlUGF0aCQgPVxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5maWxlcy5kZWZhdWx0SFRNTC50ZW1wbGF0ZS5maWxlUGF0aFxuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gYXBwbHkgaHRtbCB3ZWJwYWNrIHBsdWdpbiB3b3JrYXJvdW5kc1xuLypcbiAgICBOT1RFOiBQcm92aWRlcyBhIHdvcmthcm91bmQgdG8gaGFuZGxlIGEgYnVnIHdpdGggY2hhaW5lZCBsb2FkZXJcbiAgICBjb25maWd1cmF0aW9ucy5cbiovXG5mb3IgKFxuICAgIGxldCBodG1sQ29uZmlndXJhdGlvbjpIVE1MQ29uZmlndXJhdGlvbiBvZiByZXNvbHZlZENvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbFxuKSB7XG4gICAgVG9vbHMuZXh0ZW5kT2JqZWN0KFxuICAgICAgICB0cnVlLCBodG1sQ29uZmlndXJhdGlvbiwgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmZpbGVzLmRlZmF1bHRIVE1MKVxuICAgIGh0bWxDb25maWd1cmF0aW9uLnRlbXBsYXRlLnJlcXVlc3QgPSBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aFxuICAgIGlmIChcbiAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUuZmlsZVBhdGggIT09XG4gICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUwudGVtcGxhdGUuZmlsZVBhdGggJiZcbiAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUub3B0aW9uc1xuICAgICkge1xuICAgICAgICBjb25zdCByZXF1ZXN0U3RyaW5nOk9iamVjdCA9IG5ldyBTdHJpbmcoXG4gICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5yZXF1ZXN0ICtcbiAgICAgICAgICAgIFRvb2xzLmNvbnZlcnRDaXJjdWxhck9iamVjdFRvSlNPTihcbiAgICAgICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5vcHRpb25zKSlcbiAgICAgICAgcmVxdWVzdFN0cmluZy5yZXBsYWNlID0gKChzdHJpbmc6c3RyaW5nKTpGdW5jdGlvbiA9PiAoXG4gICAgICAgICAgICBfc2VhcmNoOlJlZ0V4cHxzdHJpbmcsIF9yZXBsYWNlbWVudDpzdHJpbmd8KFxuICAgICAgICAgICAgICAgIC4uLm1hdGNoZXM6QXJyYXk8c3RyaW5nPlxuICAgICAgICAgICAgKSA9PiBzdHJpbmdcbiAgICAgICAgKTpzdHJpbmcgPT4gc3RyaW5nKShodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aClcbiAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUucmVxdWVzdCA9IHJlcXVlc3RTdHJpbmdcbiAgICB9XG59XG4vLyBlbmRyZWdpb25cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVkQ29uZmlndXJhdGlvblxuLy8gcmVnaW9uIHZpbSBtb2RsaW5lXG4vLyB2aW06IHNldCB0YWJzdG9wPTQgc2hpZnR3aWR0aD00IGV4cGFuZHRhYjpcbi8vIHZpbTogZm9sZG1ldGhvZD1tYXJrZXIgZm9sZG1hcmtlcj1yZWdpb24sZW5kcmVnaW9uOlxuLy8gZW5kcmVnaW9uXG4iXX0=