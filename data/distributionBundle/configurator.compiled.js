#!/usr/bin/env node
'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _clientnode=require('clientnode'),_clientnode2=_interopRequireDefault(_clientnode),_extractTextWebpackPlugin=require('extract-text-webpack-plugin'),_extractTextWebpackPlugin2=_interopRequireDefault(_extractTextWebpackPlugin),_fs=require('fs'),fileSystem=_interopRequireWildcard(_fs),_path=require('path'),_path2=_interopRequireDefault(_path),_helper=require('./helper.compiled'),_helper2=_interopRequireDefault(_helper),_package=require('./package');function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}try{require('source-map-support/register')}catch(a){}let metaConfiguration=_package.configuration;for(metaConfiguration.default.path.context=__dirname,metaConfiguration.default.contextType='main';metaConfiguration.default.path.context=_path2.default.resolve(metaConfiguration.default.path.context,'../../'),'node_modules'===_path2.default.basename(_path2.default.dirname(metaConfiguration.default.path.context)););if('node_modules'===_path2.default.basename(_path2.default.dirname(process.cwd()))||'.staging'===_path2.default.basename(_path2.default.dirname(process.cwd()))&&'node_modules'===_path2.default.basename(_path2.default.dirname(_path2.default.dirname(process.cwd()))))metaConfiguration.default.path.context=process.cwd(),metaConfiguration.default.contextType='dependency';else try{fileSystem.lstatSync(_path2.default.join(process.cwd(),'node_modules')).isSymbolicLink()&&(metaConfiguration.default.path.context=process.cwd())}catch(a){}let specificConfiguration;try{specificConfiguration=eval('require')(_path2.default.join(metaConfiguration.default.path.context,'package'))}catch(a){specificConfiguration={name:'mockup'},metaConfiguration.default.path.context=process.cwd()}const name=specificConfiguration.name;specificConfiguration=specificConfiguration.webOptimizer||{},specificConfiguration.name=name;let debug=metaConfiguration.default.debug;specificConfiguration.debug!==void 0&&(debug=specificConfiguration.debug),process.env.npm_config_production?debug=!1:process.env.npm_config_debug&&(debug=!0),metaConfiguration.default.path.context+='/';const libraryConfiguration=metaConfiguration.library;let configuration;configuration=debug?_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(metaConfiguration.default,metaConfiguration.debug),metaConfiguration.debug):metaConfiguration.default,configuration.debug=debug,'object'==typeof configuration.library&&_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(libraryConfiguration,configuration.library),configuration.library),('library'in specificConfiguration&&!0===specificConfiguration.library||('library'in specificConfiguration&&specificConfiguration.library===void 0||!('library'in specificConfiguration))&&configuration.library)&&(configuration=_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(configuration,libraryConfiguration),libraryConfiguration));let count=0,filePath=null;for(;;){const a=configuration.path.context+`.dynamicConfiguration-${count}.json`;if(!_clientnode2.default.isFileSync(a))break;filePath=a,count+=1}let runtimeInformation={givenCommandLineArguments:process.argv};if(filePath&&(runtimeInformation=JSON.parse(fileSystem.readFileSync(filePath,{encoding:'utf-8'})),fileSystem.unlink(filePath,(a)=>{if(a)throw a})),2<runtimeInformation.givenCommandLineArguments.length)for(const a of['document','test','testInBrowser'])runtimeInformation.givenCommandLineArguments[2]===a&&_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(configuration,configuration[a]),configuration[a]);for(const a of['document','test','testInBrowser'])delete configuration[a];_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(_clientnode2.default.modifyObject(configuration,specificConfiguration),runtimeInformation),specificConfiguration,runtimeInformation);let result=null;if(3<runtimeInformation.givenCommandLineArguments.length&&(result=_clientnode2.default.stringParseEncodedObject(runtimeInformation.givenCommandLineArguments[runtimeInformation.givenCommandLineArguments.length-1],configuration,'configuration')),_clientnode2.default.isPlainObject(result)&&_clientnode2.default.extendObject(!0,_clientnode2.default.modifyObject(configuration,result),result),configuration.dllManifestFilePaths=[],_clientnode2.default.isDirectorySync(configuration.path.target.base))for(const a of fileSystem.readdirSync(configuration.path.target.base))a.match(/^.*\.dll-manifest\.json$/)&&configuration.dllManifestFilePaths.push(_path2.default.resolve(configuration.path.target.base,a));const parameterDescription=['currentPath','fileSystem','helper','path','require','tools','webOptimizerPath'],parameter=[process.cwd(),fileSystem,_helper2.default,_path2.default,eval('require'),_clientnode2.default,__dirname];for(const a in configuration.path.base=_path2.default.resolve(configuration.path.context,configuration.path.base),configuration.path)if(configuration.path.hasOwnProperty(a)&&'base'!==a&&'string'==typeof configuration.path[a])configuration.path[a]=_path2.default.resolve(configuration.path.base,configuration.path[a])+'/';else if(_clientnode2.default.isPlainObject(configuration.path[a]))for(const b in configuration.path[a].base=_path2.default.resolve(configuration.path.base,configuration.path[a].base),configuration.path[a])if(configuration.path[a].hasOwnProperty(b)&&!['base','public'].includes(b)&&'string'==typeof configuration.path[a][b])configuration.path[a][b]=_path2.default.resolve(configuration.path[a].base,configuration.path[a][b])+'/';else if(_clientnode2.default.isPlainObject(configuration.path[a][b]))for(const c in configuration.path[a][b].base=_path2.default.resolve(configuration.path[a].base,configuration.path[a][b].base),configuration.path[a][b])configuration.path[a][b].hasOwnProperty(c)&&'base'!==c&&'string'==typeof configuration.path[a][b][c]&&(configuration.path[a][b][c]=_path2.default.resolve(configuration.path[a][b].base,configuration.path[a][b][c])+'/');const resolvedConfiguration=_clientnode2.default.resolveDynamicDataStructure(configuration,parameterDescription,parameter),defaultConfiguration=resolvedConfiguration.build.types.default;for(const a in delete resolvedConfiguration.build.types.default,resolvedConfiguration.build.types)resolvedConfiguration.build.types.hasOwnProperty(a)&&(resolvedConfiguration.build.types[a]=_clientnode2.default.extendObject(!0,{},defaultConfiguration,_clientnode2.default.extendObject(!0,{extension:a},resolvedConfiguration.build.types[a],{type:a})));resolvedConfiguration.module.locations=_helper2.default.determineModuleLocations(resolvedConfiguration.injection.internal,resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,resolvedConfiguration.path.source.asset.base),resolvedConfiguration.injection=_helper2.default.resolveInjection(resolvedConfiguration.injection,_helper2.default.resolveBuildConfigurationFilePaths(resolvedConfiguration.build.types,resolvedConfiguration.path.source.asset.base,_helper2.default.normalizePaths(resolvedConfiguration.path.ignore.concat(resolvedConfiguration.module.directoryNames,resolvedConfiguration.loader.directoryNames).map((a)=>_path2.default.resolve(resolvedConfiguration.path.context,a)).filter((a)=>!resolvedConfiguration.path.context.startsWith(a))),resolvedConfiguration.package.main.fileNames),resolvedConfiguration.injection.autoExclude,resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,resolvedConfiguration.path.source.asset.base,resolvedConfiguration.path.ignore);const internalInjection=resolvedConfiguration.injection.internal;for(const a in resolvedConfiguration.injection.internal={given:resolvedConfiguration.injection.internal,normalized:_helper2.default.resolveModulesInFolders(_helper2.default.normalizeInternalInjection(internalInjection),resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,resolvedConfiguration.path.source.asset.base,resolvedConfiguration.path.ignore.concat(resolvedConfiguration.module.directoryNames,resolvedConfiguration.loader.directoryNames).map((a)=>_path2.default.resolve(resolvedConfiguration.path.context,a)).filter((a)=>!resolvedConfiguration.path.context.startsWith(a)))},resolvedConfiguration.needed={javaScript:configuration.debug&&['serve','testInBrowser'].includes(resolvedConfiguration.givenCommandLineArguments[2])},resolvedConfiguration.injection.internal.normalized)if(resolvedConfiguration.injection.internal.normalized.hasOwnProperty(a))for(const b of resolvedConfiguration.injection.internal.normalized[a]){const c=_helper2.default.determineModuleFilePath(b,resolvedConfiguration.module.aliases,resolvedConfiguration.module.replacements.normal,resolvedConfiguration.extensions,resolvedConfiguration.path.context,'./',resolvedConfiguration.path.ignore,resolvedConfiguration.module.directoryNames,resolvedConfiguration.package.main.fileNames,resolvedConfiguration.package.main.propertyNames,resolvedConfiguration.package.aliasPropertyNames);let d;if(c)d=_helper2.default.determineAssetType(c,resolvedConfiguration.build.types,resolvedConfiguration.path);else throw new Error(`Given request "${b}" couldn't be resolved.`);d&&(resolvedConfiguration.needed[d]=!0)}resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader='';for(const a of resolvedConfiguration.files.defaultHTML.template.use)resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader&&(resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader+='!'),resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader+=a.loader,a.options&&(resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader+='?'+_clientnode2.default.convertCircularObjectToJSON(a.options));resolvedConfiguration.module.aliases.webOptimizerDefaultTemplateFilePath$=resolvedConfiguration.files.defaultHTML.template.filePath;for(let a of resolvedConfiguration.files.html)if(_clientnode2.default.extendObject(!0,a,resolvedConfiguration.files.defaultHTML),a.template.request=a.template.filePath,a.template.filePath!==resolvedConfiguration.files.defaultHTML.template.filePath&&a.template.options){const b=new String(a.template.request+_clientnode2.default.convertCircularObjectToJSON(a.template.options));b.replace=((c)=>()=>c)(a.template.filePath),a.template.request=b}_extractTextWebpackPlugin2.default.extract=function(a){return[this.loader({omit:!!a.fallbackUse,remove:!0})].concat(a.fallbackUse,a.use)},exports.default=resolvedConfiguration;

//# sourceMappingURL=data:application/json;base64,