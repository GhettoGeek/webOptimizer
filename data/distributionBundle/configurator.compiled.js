#!/usr/bin/env node


// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

var _package = require('./package');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}
// NOTE: "{configuration as metaConfiguration}" would result in a read only
// variable named "metaConfiguration".

/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
let metaConfiguration = _package.configuration;
/*
    To assume two folder up from this file is usually resilient again dealing
    with projects where current working directory isn't the projects directory.
*/
metaConfiguration.default.path.context = _path2.default.resolve(__dirname, '../../');
metaConfiguration.default.contextType = 'main';
if (_path2.default.basename(_path2.default.dirname(process.cwd())) === 'node_modules' || _path2.default.basename(_path2.default.dirname(process.cwd())) === '.staging' && _path2.default.basename(_path2.default.dirname(_path2.default.dirname(process.cwd()))) === 'node_modules') {
    /*
        NOTE: If we are dealing was a dependency project use current directory
        as context.
    */
    metaConfiguration.default.path.context = process.cwd();
    metaConfiguration.default.contextType = 'dependency';
} else
    /*
        NOTE: If the current working directory references this file via a
        linked "node_modules" folder using current working directory as context
        is a better assumption than two folders up the hierarchy.
    */
    try {
        if (fileSystem.lstatSync(_path2.default.join(process.cwd(), 'node_modules')).isSymbolicLink()) metaConfiguration.default.path.context = process.cwd();
    } catch (error) {}
let specificConfiguration;
try {
    // IgnoreTypeCheck
    specificConfiguration = require(_path2.default.join(metaConfiguration.default.path.context, 'package'));
} catch (error) {
    specificConfiguration = { name: 'mockup' };
    metaConfiguration.default.path.context = process.cwd();
}
const name = specificConfiguration.name;
specificConfiguration = specificConfiguration.webOptimizer || {};
specificConfiguration.name = name;
// endregion
// region loading default configuration
// NOTE: Given node command line arguments results in "npm_config_*"
// environment variables.
let debug = metaConfiguration.default.debug;
if (specificConfiguration.debug !== undefined) debug = specificConfiguration.debug;
if (process.env.npm_config_production) debug = false;else if (process.env.npm_config_debug) debug = true;
metaConfiguration.default.path.context += '/';
// Merges final default configuration object depending on given target
// environment.
const libraryConfiguration = metaConfiguration.library;
let configuration;
if (debug) configuration = _helper2.default.extendObject(true, metaConfiguration.default, metaConfiguration.debug);else configuration = metaConfiguration.default;
configuration.debug = debug;
if (typeof configuration.library === 'object') _helper2.default.extendObject(true, libraryConfiguration, configuration.library);
if (specificConfiguration.library === true || specificConfiguration.library === undefined && configuration.library) configuration = _helper2.default.extendObject(true, configuration, libraryConfiguration);
// endregion
// region merging and evaluating default, test, specific and dynamic settings
// / region load additional dynamically given configuration
let count = 0;
let filePath = null;
while (true) {
    const newFilePath = configuration.path.context + `.dynamicConfiguration-${ count }.json`;
    if (!_helper2.default.isFileSync(newFilePath)) break;
    filePath = newFilePath;
    count += 1;
}
let runtimeInformation = {
    givenCommandLineArguments: process.argv
};
if (filePath) {
    runtimeInformation = JSON.parse(fileSystem.readFileSync(filePath, {
        encoding: 'utf-8' }));
    fileSystem.unlink(filePath, error => {
        if (error) throw error;
    });
}
if (runtimeInformation.givenCommandLineArguments.length > 2)
    // region apply documentation configuration
    if (runtimeInformation.givenCommandLineArguments[2] === 'document') _helper2.default.extendObject(true, configuration, configuration.document);
    // endregion
    // region apply test configuration
    else if (runtimeInformation.givenCommandLineArguments[2] === 'testInBrowser') _helper2.default.extendObject(true, configuration, configuration.testInBrowser);else if (runtimeInformation.givenCommandLineArguments[2] === 'test') _helper2.default.extendObject(true, configuration, configuration.test);
// endregion
// / endregion
_helper2.default.extendObject(true, configuration, specificConfiguration, runtimeInformation);
let result = null;
if (runtimeInformation.givenCommandLineArguments.length > 3) result = _helper2.default.parseEncodedObject(runtimeInformation.givenCommandLineArguments[runtimeInformation.givenCommandLineArguments.length - 1], configuration, 'configuration');
if (_helper2.default.isPlainObject(result)) _helper2.default.extendObject(true, configuration, result);
// / region determine existing pre compiled dll manifests file paths
configuration.dllManifestFilePaths = [];
let targetDirectory = null;
try {
    targetDirectory = fileSystem.statSync(configuration.path.target);
} catch (error) {}
if (targetDirectory && targetDirectory.isDirectory()) fileSystem.readdirSync(configuration.path.target).forEach(fileName => {
    if (fileName.match(/^.*\.dll-manifest\.json$/)) configuration.dllManifestFilePaths.push(_path2.default.resolve(configuration.path.target, fileName));
});
// / endregion
// / region build absolute paths
for (const pathConfiguration of [configuration.path, configuration.path.asset]) for (const key of ['source', 'target']) if (pathConfiguration[key]) pathConfiguration[key] = _path2.default.resolve(configuration.path.context, _helper2.default.resolveDynamicDataStructure(pathConfiguration[key], configuration)) + '/';
// / endregion
const resolvedConfiguration = _helper2.default.unwrapProxy(_helper2.default.resolveDynamicDataStructure(_helper2.default.resolveDynamicDataStructure(configuration), null, true, '__postEvaluate__', '__postExecute__'));
// endregion
// region consolidate file specific build configuration
// Apply default file level build configurations to all file type specific
// ones.
const defaultConfiguration = resolvedConfiguration.build.default;
delete resolvedConfiguration.build.default;
for (const type in resolvedConfiguration.build) if (resolvedConfiguration.build.hasOwnProperty(type)) resolvedConfiguration.build[type] = _helper2.default.extendObject(true, {}, defaultConfiguration, _helper2.default.extendObject(true, { extension: type }, resolvedConfiguration.build[type], { type }));
// endregion
// region adding special aliases
// NOTE: This alias couldn't be set in the "package.json" file since this would
// result in an endless loop.
const delimiterPosition = resolvedConfiguration.files.defaultHTML.template.lastIndexOf('!');
resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader = resolvedConfiguration.files.defaultHTML.template.substring(0, delimiterPosition);
resolvedConfiguration.module.aliases.webOptimizerDefaultTemplateFilePath$ = resolvedConfiguration.files.defaultHTML.template.substring(delimiterPosition + 1);
// endregion
// region apply webpack html plugin workaround
/*
    NOTE: Provides a workaround to handle a bug with chained loader
    configurations.
*/
for (let htmlConfiguration of resolvedConfiguration.files.html) {
    _helper2.default.extendObject(true, htmlConfiguration, resolvedConfiguration.files.defaultHTML);
    if (typeof htmlConfiguration.template === 'string' && htmlConfiguration.template.includes('!') && htmlConfiguration.template !== resolvedConfiguration.files.defaultHTML.template) {
        const newTemplateString = new String(htmlConfiguration.template);
        newTemplateString.replace = (string => (_search, _replacement) => string)(htmlConfiguration.template);
        htmlConfiguration.template = newTemplateString;
    }
}
// endregion
exports.default = resolvedConfiguration;
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;base64,