{
  "name": "webOptimizer",
  "tagline": "A generic web optimizer, (module) bundler and development environment.",
  "body": "<!-- !/usr/bin/env markdown\r\n-*- coding: utf-8 -*- -->\r\n\r\n<!-- region header\r\nCopyright Torben Sickert 16.12.2012\r\n\r\nLicense\r\n-------\r\n\r\nThis library written by Torben Sickert stand under a creative commons naming\r\n3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de\r\nendregion -->\r\n\r\nUse case\r\n--------\r\n\r\nThe main goal of This plugin is providing an generic module bundler and\r\nworkflow for all you development use cases in any project related to the web\r\nor node.\r\n\r\nContent\r\n-------\r\n\r\n<!--Place for automatic generated table of contents.-->\r\n[TOC]\r\n\r\nFeatures\r\n--------\r\n\r\n- Complete and flexible configured Wrapper for **webpack** with many automatically\r\n  determined pre configuration.\r\n- **Completely** adaptable for your needs.\r\n- Targets library and web bundle building out of the box.\r\n- Only one configuration file (your already existing **package.json**) for all\r\n  needed customisations.\r\n- Many needed uses-cases are **preconfigured** and mostly works out of the box for\r\n  your project.\r\n    - **API-Documentation** generation\r\n    - Polymorphic **testing** on dom in browsers and/or in node through\r\n      webOptimizer/browserAPI\r\n    - **Linting** and **TypeChecking** with Flow\r\n    - Preconfigured **preprocessing** for CSS (PostCSS), JavaScript (Babel, Flow)\r\n    - Preconfigured **postprocessing** for CSS (Minification),\r\n      JavaScript (Minification), Images (Compression)\r\n    - Various pre configured and adaptable implemented concepts for building\r\n      development-, production-, testing- and/or vendor **bundles**.\r\n    - Support for building **libraries** with well defined (UMD) external\r\n      dependencies (preconfigred extendable weback configuration)\r\n    - Support for building and **shimming** a whole package managed application\r\n      structure to build for various target environments like browsers or node\r\n      (preconfigred extensable weback configuration)\r\n    - Generic management for dealing with **DLL-Bundle** to speed up any\r\n      workflows: Each (pre-)defined chunk can be outsourced to a DLL-Bundle in\r\n      a complete delclarative and generic way.\r\n    - Generic support for all known **favicon** types using only one png file as\r\n      source (watching, compressing and auto-generating is integrated)\r\n    - Brings **offline** support though service worker and/or html5 manifest to\r\n      your application without any manual intervention needed!\r\n    - Many development helper:\r\n        - Automatic watching and (re-)building any assets thorugh cross\r\n          platform file watching\r\n        - Preconfigured local webserver with websocket connections to\r\n          **livereload** you browser when any asset has changed\r\n          (webpack-dev-server).\r\n        - Preconfigured **hot module replacement** integration to update parts\r\n          of your library/application with no siteeffects in a generic way\r\n          without event the need to refresh your browser\r\n        - Automaticaly watch and integrate any **css updates** trough hot module\r\n          replacements in app which will be shiped through the development\r\n          server.\r\n\r\nInstallation\r\n------------\r\n\r\nEdit your **package.json** to add **one** dependency:\r\n\r\n    #!JSON\r\n\r\n    ...\r\n    \"dependencies\": {\r\n        ...\r\n        \"webOptimizer\": \"git+ssh://git@github.com/thaibault/webOptimizer.git\",\r\n        ...\r\n    },\r\n    ...\r\n\r\nUpdate your **packages** via npm and have fun:\r\n\r\n    npm update\r\n\r\nConfiguration\r\n-------------\r\n\r\nFirst you should specify some tasks/use-cases you want to have in you project.\r\nYou can do this in your package.json. All supported scripts and some usefull\r\ncompostitions are listed below:\r\n\r\n    #!JSON\r\n\r\n    ...\r\n    \"scripts\": {\r\n        ...\r\n        \"build\": \"webOptimizer build\",\r\n        \"buildDLL\": \"webOptimizer buildDLL\",\r\n        \"buildDebugWithDLL\": \"webOptimizer buildDLL -debug && webOptimizer build -debug\",\r\n        \"buildWithStats\": \"webOptimizer build --profile --json >/tmp/stat.json && echo 'Results successfully written to \\\"/tmp/stat.json\\\".'\",\r\n        \"clear\": \"webOptimizer clear\",\r\n        \"document\": \"webOptimizer document\",\r\n        \"lint\": \"webOptimizer typeCheck && webOptimizer lint\",\r\n        \"postinstall\": \"webOptimizer build\",\r\n        \"preinstall\": \"webOptimizer preinstall\",\r\n        \"serve\": \"webOptimizer serve\",\r\n        \"start\": \"npm run serve\",\r\n        \"test\": \"webOptimizer test\",\r\n        \"testInBrowser\": \"webOptimizer testInBrowser\",\r\n        \"watch\": \"webOptimizer build --watch\",\r\n        \"watchDLL\": \"webOptimizer buildDLL --watch\"\r\n        ...\r\n    },\r\n    ...\r\n\r\nYou can easily run any sepcified script via:\r\n\r\n    #!bash\r\n\r\n    npm run build -debug\r\n    npm run lint\r\n    npm run watch -debug\r\n    npm run serve\r\n    ...\r\n\r\nIf you want to configure your app for example to change any of the expected\r\ndefault source, target, asset or build paths do it in your **package.json**:\r\n\r\n    #!JSON\r\n\r\n    ...\r\n    \"webOptimizer\": {\r\n        ...\r\n        \"path\": {\r\n            ...\r\n            \"apiDocumentation\": \"apiDocumentation/\",\r\n            \"asset\": {\r\n                ...\r\n                \"cascadingStyleSheet\": \"cascadingStyleSheet/\",\r\n                \"coffeeScript\": \"coffeeScript/\",\r\n                \"data\": \"data/\",\r\n                \"favicon\": \"favicon.png\",\r\n                \"font\": \"font/\",\r\n                \"image\": \"image/\",\r\n                \"javaScript\": \"javaScript/\",\r\n                \"less\": \"less/\",\r\n                \"publicTarget\": \"\",\r\n                \"sass\": \"sass/\",\r\n                \"scss\": \"scss/\",\r\n                \"template\": \"template/\"\r\n                ..\r\n            },\r\n            \"ignore\": [\"node_modules\", \".git\"],\r\n            \"manifest\": \"manifest.appcache\",\r\n            \"source\": \"source/\",\r\n            \"target\": \"build/\",\r\n            \"tidyUp\": [\"crap\"]\r\n            ...\r\n        },\r\n        ...\r\n    },\r\n    ...\r\n\r\nIt's recommended to first specify if you writing a library or an application\r\nsince many preconfigurations are targeting on this two different use cases.\r\nAnyway you can customize each coonfiguration by hand in each case.\r\n\r\n    #!JSON\r\n\r\n    ...\r\n    \"webOptimizer\": {\r\n        ...\r\n        \"library\": false,\r\n        ...\r\n    },\r\n    ...\r\n\r\nYou can even reference any value or evaluate any configuration value\r\ndynamically though a small evaluation mechanism:\r\n\r\n\r\n    #!JSON\r\n\r\n    ...\r\n    \"webOptimizer\": {\r\n        ...\r\n        \"path\": {\r\n            ...\r\n            \"source\": \"/\",\r\n            ...\r\n            \"asset\": {\r\n                ...\r\n                \"cascadingStyleSheet\": \"cascadingStyleSheet/\",\r\n                \"template\": {\r\n                    \"__evaluate__\": \"self.debug ? '' : self.path.source\"\r\n                },\r\n                ...\r\n            },\r\n            ...\r\n        },\r\n        ...\r\n        \"offline\": {\r\n            ...\r\n            \"externals\": [\r\n                ...\r\n                {\"__evaluate__\": \"self.path.asset.cascadingStyleSheet\"},\r\n                \"onlineAvailable.txt\",\r\n                ...\r\n            ],\r\n            ...\r\n        },\r\n        ...\r\n    },\r\n    ...\r\n\r\nYou can even execute script to determine a value:\r\n\r\n\r\n    #!JSON\r\n\r\n    ...\r\n    \"webOptimizer\": {\r\n        ...\r\n        \"path\": {\r\n            ...\r\n            \"source\": \"/\",\r\n            ...\r\n            \"asset\": {\r\n                ...\r\n                \"template\": {\r\n                    \"__execute__\": \"test = self.path.source; if (test.endsWith('js')) return 'bar/';return 'foo/'\"\r\n                },\r\n                ...\r\n            },\r\n            ...\r\n        },\r\n        ...\r\n    },\r\n    ...\r\n\r\nFor all availbale configuration possibilties pleas have a look at the *\r\n**package.json** file in this project since these values a extended on runtime.\r\n\r\nAdditionally its even possible to overwrite any value on runtime via a\r\ncomplete generic command line interface: The last argument should evaluate to\r\na javaScript object witch will be used as source for exending the default\r\nbehavoir. Any JavaScript will be supported:\r\n\r\n    #!JSON\r\n\r\n    npm run build '{module: {optimizer: uglifyJS: {compress: {warnings\": false}}}}'\r\n\r\nIf you're using webOptimizer in a toolchain were none printable or none unicode\r\ncompatible symbols should be used (for example content which should replace\r\nplaceholder) you can encode your javaScript expression as base64 code:\r\n\r\n    #!bash\r\n\r\n    npm run build '{module:{preprocessor:{pug:{locals:{name:'h√§ns'}}}}}'\r\n\r\n    # is the same as:\r\n\r\n    npm run build 'e21vZHVsZTp7cHJlcHJvY2Vzc29yOntwdWc6e2xvY2Fsczp7bmFtZTonaMOkbnMnfX19fX0='\r\n\r\n<!-- region modline\r\nvim: set tabstop=4 shiftwidth=4 expandtab:\r\nvim: foldmethod=marker foldmarker=region,endregion:\r\nendregion -->\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}