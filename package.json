{
    "name": "webOptimizer",
    "version": "1.0.0",
    "description": "A generic web optimizer, (module) bundler and development environment.",
    "homepage": "http://torben.website/webOptimizer",
    "license": "CC-BY-3.0",
    "bin": {"webOptimizer": "taskRunner.compiled.js"},
    "main": "webpackConfigurator.compiled.js",
    "keywords": [
        "webpack", "optimizer", "configuration", "generic", "lint", "bundle",
        "test", "document", "mock"
    ],
    "repository": {
        "type": "git", "url": "https://github.com/thaibault/webOptimizer.git"
    },
    "dependencies": {
        "add-asset-html-webpack-plugin": ">=1.0.0",
        "autoprefixer": ">=6.4.0",
        "babel-cli": ">=6.11.4",
        "babel-eslint": ">=6.1.2",
        "babel-loader": ">=6.2.4",
        "babel-polyfill": ">=6.13.0",
        "babel-plugin-transform-flow-strip-types": ">=6.8.0",
        "babel-preset-es2015": ">=6.13.2",
        "babel-preset-es2015-loose": ">=7.0.0",
        "babel-preset-es2015-node": ">=6.1.0",
        "babel-preset-stage-0": ">=6.5.0",
        "css-loader": ">=0.23.1",
        "eslint": ">=3.2.2",
        "eslint-config-google": ">=0.6.0",
        "eslint-plugin-flowtype": ">=2.4.0",
        "eslint-plugin-jsdoc": ">=2.3.1",
        "exports-loader": ">=0.6.3",
        "extract-loader": ">=0.0.2",
        "extract-text-webpack-plugin": ">=1.0.1",
        "favicons-webpack-plugin": ">=0.0.6",
        "file-loader": ">=0.9.0",
        "flow-bin": ">=0.30.0",
        "html-loader": ">=0.4.3",
        "html-webpack-plugin": ">=2.22.0",
        "imagemin-webpack-plugin": ">=1.0.8",
        "imports-loader": ">=0.6.5",
        "postcss-import": ">=8.1.2",
        "postcss-loader": ">=0.9.1",
        "pug": ">=2.0.0-beta4",
        "pug-cli": ">=1.0.0-alpha6",
        "jsdoc": ">=3.4.0",
        "jsdom": ">=9.4.1",
        "loader-utils": ">=0.2.15",
        "offline-plugin": ">=4.0.0",
        "open-browser-webpack-plugin": ">=0.0.2",
        "rimraf": ">=2.5.4",
        "style-loader": ">=0.13.1",
        "url-loader": ">=0.5.7",
        "webpack": ">=1.13.1",
        "webpack-dev-server": ">=1.14.1",
        "webpack-load-plugins": ">=0.1.2",
        "webpack-sources": ">=0.1.2",

        "coffee-loader": "*",
        "coffee-script": "*",
        "less": "*",
        "less-loader": "*",
        "node-sass": ">=3.8.0",
        "sass-loader": "*"
    },
    "devDependencies": {
        "qunit-cli": ">=0.2.0",
        "source-map-support": ">=0.4.2"
    },
    "files": [
        "browserAPI.js",
        "configurator.js",
        "helper.js",
        "pugLoader.js",
        "taskRunner.js",
        "test.pug",
        "type.js",
        "webpackConfigurator.js"
    ],
    "scripts": {
        "build": "command='babel --plugins transform-flow-strip-types --presets es2015-node,stage-0 --source-maps inline --out-file' && $command helper.compiled.js helper.js && $command configurator.compiled.js configurator.js && $command taskRunner.compiled.js taskRunner.js && $command pugLoader.compiled.js pugLoader.js && $command webpackConfigurator.compiled.js webpackConfigurator.js && $command browserAPI.compiled.js browserAPI.js && pug --pretty --extension compiled.html test.pug",
        "clear": "rm *.compiled.* &>/dev/null;rm --recursive *.compiled &>/dev/null;rm test/*.compiled.* &>/dev/null;rm --recursive apiDocumentation &>/dev/null; rm *.html &>/dev/null || true",
        "document": "npm run build && jsdoc --package ./package.json --readme ./readme.md --destination apiDocumentation *.compiled.js",
        "lint": "flow --color always --strip-root && eslint --ignore-pattern '*.compiled.*' '*.js' 'test/*.js' || true",
        "preinstall": "touch helper.compiled.js configurator.compiled.js taskRunner.compiled.js pugLoader.compiled.js webpackConfigurator.compiled.js test.compiled.html",
        "postinstall": "npm run build",
        "test": "npm run clear && pug --pretty --extension compiled.html test.pug && command='babel --plugins transform-flow-strip-types --presets es2015-node,stage-0 --source-maps inline --out-file' && $command browserAPI.compiled.js browserAPI.js && $command test/browserAPI.compiled.js test/browserAPI.js && chmod +x test/* && test/browserAPI.compiled.js && $command helper.compiled.js helper.js && $command configurator.compiled.js configurator.js && $command test/configurator.compiled.js test/configurator.js && chmod +x test/* && test/configurator.compiled.js && $command test/helper.compiled.js test/helper.js && chmod +x test/* && test/helper.compiled.js && $command pugLoader.compiled.js pugLoader.js && $command test/pugLoader.compiled.js test/pugLoader.js && chmod +x test/* && test/pugLoader.compiled.js && $command taskRunner.compiled.js taskRunner.js && $command test/taskRunner.compiled.js test/taskRunner.js && chmod +x test/* && test/taskRunner.compiled.js && $command webpackConfigurator.compiled.js webpackConfigurator.js && $command test/webpackConfigurator.compiled.js test/webpackConfigurator.js && chmod +x test/* && test/webpackConfigurator.compiled.js || true"
    },
    "configuration": {
        "default": {
            "debug": false,
            "library": true,

            "exportFormat": "umd",
            "favicon": {
                "logo": {
                    "__evaluate__": "path.join(self.path.asset.source, self.path.asset.favicon)"
                },
                "prefix": {
                    "__evaluate__": "path.join(self.path.asset.image, 'favicons-[hash]/')"
                },
                "emitStats": false,
                "statsFilename": "iconStats.json",
                "persistentCache": true,
                "inject": true,
                "background": "white",
                "title": {"__evaluate__": "self.name"},
                "icons": {
                    "android": true,
                    "appleIcon": true,
                    "appleStartup": true,
                    "coast": true,
                    "favicons": true,
                    "firefox": true,
                    "opengraph": true,
                    "twitter": true,
                    "yandex": true,
                    "windows": true
                }
            },
            "files": {
                "cascadingStyleSheet": {
                    "__evaluate__": "self.debug ? null : `${self.path.asset.cascadingStyleSheet}index.css?${self.hashAlgorithm}=[contenthash]`"
                },
                "defaultHTML": {
                    "chunksSortMode": "auto",
                    "debug": false,
                    "filename": "index.html",
                    "hash": true,
                    "inject": "body",
                    "minify": {
                        "__evaluate__": "self.module.optimizer.htmlMinifier"
                    },
                    "template": {
                        "__evaluate__": "`html?${JSON.stringify(helper.extendObject({}, self.module.html, {minimize: false}))}!pug?${JSON.stringify(self.module.preprocessor.pug)}!${self.path.source}index.pug`"
                    }
                },
                "html": [{}],
                "javaScript": {
                    "__evaluate__": "`${self.path.asset.javaScript}${2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'buildDLL' ? '[name]' : 'index'}.js?${self.hashAlgorithm}=[hash]`"
                },
                "additionalPaths": [
                    "robots.txt", "404.html", "crossdomain.xml", "humans.txt",
                    ".htaccess", "license.txt", "favicon.ico"
                ]
            },
            "injection": {
                "commonChunkIDs": ["vendor"],
                "dllChunkIDs": ["vendor", "developmentHelper"],
                "external": "__implicit__",
                "externalAliases": {},
                "ignorePattern": [],
                "implicitExternalExcludePattern": [
                    {"__evaluate__": "/^webOptimizer\\/browserAPI(?:\\.compiled)?(?:\\.js)?$/"},
                    {"__evaluate__": "/\\/webpack\\/buildin\\/module\\.js$/"}
                ],
                "implicitExternalIncludePattern": [],
                "internal": []
            },
            "inPlace": {
                "cascadingStyleSheet": true,
                "externalLibrary": {"normal": true, "shimmed": true},
                "javaScript": false,
                "otherMaximumFileSizeLimitInByte": 40960
            },
            "knownExtensions": [
                ".compiled", "",

                ".compiled.js", ".js", ".coffee", ".coffee.md", ".litcoffee",

                ".compiled.html", ".html", ".pug",

                ".compiled.css", ".css", ".scss", ".sass", ".less",

                ".compiled.eot", ".eot",
                ".compiled.woff", ".woff", ".compiled.woff2", ".woff2",
                ".compiled.ttf", ".ttf",

                ".compiled.svg", ".svg",

                ".compiled.png", ".png",
                ".compiled.jpg", ".jpg",
                ".compiled.ico", ".ico",
                ".compiled.gif", ".gif"
            ],
            "module": {
                "aliases": {
                    "webOptimizer/browserAPI$": "webOptimizer/browserAPI.compiled"
                },
                "cascadingStyleSheet": {},
                "html": {
                    "config": "html",
                    "attrs": ["img:src", "link:href", "a:href"]
                },
                "skipParseRegularExpression": [],
                "optimizer": {
                    "data": {
                        "limit": {
                            "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                        },
                        "name": {
                            "__evaluate__": "`/${self.path.asset.data}[name].[ext]?${self.hashAlgorithm}=[hash]`"
                        }
                    },
                    "font": {
                        "eot": {
                            "limit": {
                                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                            },
                            "name": {
                                "__evaluate__": "`/${self.path.asset.font}[name].[ext]?${self.hashAlgorithm}=[hash]`"
                            }
                        },
                        "svg": {
                            "limit": {
                                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                            },
                            "mimetype": "image/svg+xml",
                            "name": {
                                "__evaluate__": "`/${self.path.asset.font}[name].[ext]?${self.hashAlgorithm}=[hash]`"
                            }
                        },
                        "ttf": {
                            "limit": {
                                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                            },
                            "mimetype": "application/octet-stream",
                            "name": {
                                "__evaluate__": "`/${self.path.asset.font}[name].[ext]?${self.hashAlgorithm}=[hash]`"
                            }
                        },
                        "woff": {
                            "limit": {
                                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                            },
                            "name": {
                                "__evaluate__": "`/${self.path.asset.font}[name].[ext]?${self.hashAlgorithm}=[hash]`"
                            }
                        }
                    },
                    "htmlMinifier": {
                        "caseSensitive": true,
                        "collapseBooleanAttributes": true,
                        "collapseInlineTagWhitespace": true,
                        "collapseWhitespace": true,
                        "collapseWhitespace": true,
                        "conservativeCollapse": true,
                        "ignoreCustomComments": [],
                        "ignoreCustomFragments": [
                            {"__evaluate__": "/<%[\\s\\S]*?%>/"},
                            {"__evaluate__": "/<\\?[\\s\\S]*?\\?>/"},
                            {"__evaluate__": "/<link[^>]*>/"},
                            {"__evaluate__": "/<img[^>]*>/"}
                        ],
                        "includeAutoGeneratedTags": false,
                        "removeAttributeQuotes": false,
                        "removeComments": true,
                        "removeCommentsFromCDATA": true,
                        "removeCDATASectionsFromCDATA": true,
                        "removeTagWhitespace": false,
                        "removeRedundantAttributes": false,
                        "removeEmptyAttributes": false,
                        "removeScriptTypeAttributes": true,
                        "removeStyleLinkTypeAttributes": true,
                        "removeOptionalTags": false,
                        "removeEmptyElements": false,
                        "useShortDoctype": false,
                        "lint": false,
                        "keepClosingSlash": true,
                        "maxLineLength": 9999999999999999999999999999999,
                        "minifyJS": {
                            "__evaluate__": "self.module.optimizer.uglifyJS"
                        },
                        "minifyCSS": false,
                        "minifyURLs": false,
                        "preserveLineBreaks": true,
                        "preventAttributesEscaping": true,
                        "processScripts": [],
                        "processConditionalComments": false,
                        "quoteCharacter": "\""
                    },
                    "image": {
                        "content": {
                            "disable": {"__evaluate__": "self.debug || true"},
                            "optipng": {"optimizationLevel": 7},
                            "gifsicle": {
                                "optimizationLevel": 3,
                                "interlanced": false,
                                "colors": 256
                            },
                            "jpegtran": {
                                "progressive": true,
                                "arithmetic": true
                            },
                            "svgo": {},
                            "pngquant": null,
                            "plugins": []
                        },
                        "file": {
                            "limit": {
                                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                            },
                            "name": {
                                "__evaluate__": "`/${self.path.asset.image}[name].[ext]?${self.hashAlgorithm}=[hash]`"
                            }
                        }
                    },
                    "uglifyJS": {"compress": {"warnings": false}}
                },
                "preprocessor": {
                    "pug": {
                        "moduleAliases": {
                            "__evaluate__": "self.module.aliases"
                        },
                        "knownExtensions": {
                            "__evaluate__": "self.knownExtensions"
                        },
                        "context": {"__evaluate__": "self.path.context"},
                        "compiler": {
                            "pretty": false,
                            "debug": false,
                            "cache": true
                        },
                        "locals": {"offline": {
                            "__evaluate__": "Boolean(self.offline)"
                        }}
                    },
                    "less": {},
                    "modernJavaScript": {
                        "cacheDirectory": true,
                        "compact": true,
                        "presets": ["es2015-loose", "stage-0"],
                        "plugins": ["transform-flow-strip-types"]
                    },
                    "sass": {"indentedSyntax": true},
                    "scss": {}
                },
                "style": {"insertAt": "top", "singleton": true}
            },
            "offline": {
                "caches": {"main": ["index.html", ":rest:"]},
                "excludes": [
                    {"__evaluate__": "`**/*.map?${self.hashAlgorithm}=*`"},
                    "**/.*"
                ],
                "externals": ["index.html"],
                "publicPath": "/",
                "relativePaths": false,
                "updateStrategy": "changed",
                "version": "[hash]",
                "AppCache": {"directory": "/"},
                "ServiceWorker": {
                    "events": true,
                    "navigateFallbackURL": null,
                    "output": {
                        "__evaluate__": "path.join(self.path.asset.javaScript, 'serviceWorker.js')"
                    }
                }
            },
            "path": {
                "apiDocumentation": "apiDocumentation/",
                "asset": {
                    "cascadingStyleSheet": "cascadingStyleSheet/",
                    "coffeeScript": "coffeeScript/",
                    "data": "data/",
                    "favicon": {
                        "__evaluate__": "`${self.path.asset.image}favicon.png`"
                    },
                    "font": "font/",
                    "image": "image/",
                    "javaScript": "javaScript/",
                    "less": "less/",
                    "publicTarget": "",
                    "sass": "sass/",
                    "scss": "scss/",
                    "source": {"__evaluate__": "self.path.source"},
                    "target": {"__evaluate__": "self.path.target"},
                    "template": "template/"
                },
                "ignore": ["node_modules", ".git", {
                    "__evaluate__": "self.path.apiDocumentation"
                }],
                "manifest": "manifest.appcache",
                "source": "source/", "target": "build/",
                "tidyUp": [
                    {"__evaluate__": "path.join(self.path.target, self.path.asset.javaScript, '.__dummy__.compiled.js')"},
                    {"__evaluate__": "path.join(self.path.target, self.path.asset.javaScript, '.__dummy__.compiled.js.map')"}
                ]
            },
            "targetTechnology": "web",

            "assetPattern": {"javaScript": {
                "excludeFilePathRegularExpression": {
                    "__evaluate__": "`^(?:.*/)?(?:developmentHelper|vendor${self.debug ? '|index': ''})(?:\\.compiled)?\\.js$`"
                },
                "pattern": "'use strict';\n{1}"
            }},
            "build": {
                "default": {
                    "outputExtension": "js",
                    "preinstall": {
                        "__evaluate__": "`touch '${self.path.target}\\${self.path.asset[buildConfiguration.type]}\\${path.basename(filePath, \\`.\\${buildConfiguration.extension}\\`)}.compiled.\\${buildConfiguration.outputExtension}'`"
                    },
                    "fileNamePattern": "^.+\\.compiled(?:\\.[^.]+(?:\\.map)?)?$"
                },
                "javaScript": {"extension": "js"},
                "coffeeScript": {"extension": "coffee"},
                "cascadingStyleSheet": {
                    "extension": "css", "outputExtension": "css"
                },
                "less": {"outputExtension": "css"},
                "sass": {"outputExtension": "css"},
                "scss": {"outputExtension": "css"},
                "additional": {
                    "outputExtension": "",
                    "fileNamePattern": "^.+\\.compiled(?:\\.map)?$"
                }
            },
            "buildDefinition": {
                "DEBUG": {"__evaluate__": "self.debug"},
                "EXPORT_FORMAT": {"__evaluate__": "`'${self.exportFormat}'`"},
                "OFFLINE": {"__evaluate__": "Boolean(self.offline)"},
                "TARGET_TECHNOLOGY": {
                    "__evaluate__": "`'${self.targetTechnology}'`"
                }
            },
            "commandLine": {
                "build": {
                    "command": "webpack",
                    "arguments": [
                        "--config",
                        {"__evaluate__": "`${webOptimizerPath}/webpackConfigurator.compiled.js`"},
                        "--progress",
                        "--display-chunks",
                        "--display-reasons",
                        "--display-error-details"
                    ]
                },
                "document": {
                    "command": "jsdoc",
                    "arguments": [
                        "--package",
                        "./package.json",
                        "--readme",
                        "./readme.md",
                        "--destination",
                        {"__evaluate__": "self.path.apiDocumentation"},
                        {"__evaluate__": "`'${path.join(self.path.target, self.path.asset.javaScript)}'*.js`"}
                    ]
                },
                "lint": {
                    "command": "eslint",
                    "arguments": [
                        "--config",
                        {"__evaluate__": "`'${webOptimizerPath}/package.json'`"},
                        "--ignore-pattern",
                        {"__evaluate__": "`'${self.path.target.substring(currentPath.length + 1) ? `${self.path.target.substring(currentPath.length + 1)}**` : \"*.compiled.js\"}'`"},
                        "--ignore-pattern",
                        {"__evaluate__": "`'${self.path.apiDocumentation}'`"},
                        "'**/*.js'"
                    ]
                },
                "serve": {
                    "command": "webpack-dev-server",
                    "arguments": [
                        "--config",
                        {"__evaluate__": "`'${webOptimizerPath}/webpackConfigurator.compiled.js'`"},
                        {"__evaluate__": "self.debug ? '--hot' : ''"},
                        "--host", "0.0.0.0",
                        "--port", {
                            "__evaluate__": "self.development.server.port"
                        },
                        "--colors",
                        "--compress",
                        "--history-api-fallback"
                    ]
                },
                "test": {"command": "./testBundle.compiled.js"},
                "testInBrowser": {"__evaluate__": "self.commandLine.serve"},
                "typeCheck": {
                    "command": "flow",
                    "arguments": ["--color", "always", "--strip-root"]
                }
            },
            "development": {
                "openBrowser": null,
                "server": {
                    "contentBase": {"__evaluate__": "self.path.source"},
                    "historyApiFallback": true,
                    "hot": true,
                    "stats": {"colors": true},
                    "host": "localhost",
                    "port": 8080,
                    "protocol": "http"
                },
                "tool": null
            },
            "hashAlgorithm": "md5",
            "loader": {
                "alias": {"pug": "webOptimizer/pug"},
                "extensions": [
                    "", ".webpack-loader.js", ".web-loader.js", ".loader.js",
                    "-loader.compiled.js", "-loader.js", "Loader.compiled.js",
                    "Loader.js", ".js"
                ],
                "modulesDirectories": [
                    "web_loaders", "web_modules", "node_loaders",
                    "node_modules", "../"
                ]
            },

            "document": {
                "inPlace": {"externalLibrary": {"normal": false}},
                "module": {
                    "optimizer": {"uglifyJS": null},
                    "preprocessor": {"modernJavaScript": {"presets": [
                        "es2015-node", "stage-0"
                    ]}}
                }
            },

            "test": {
                "exportFormat": "commonjs2",
                "files": {"javaScript": {
                    "__evaluate__": "`${path.join(self.path.asset.target, self.path.asset.javaScript)}testBundle.compiled.js?${self.hashAlgorithm}=[hash]`"
                }},
                "injection": {"internal": "test/"},
                "targetTechnology": "node",

                "assetPattern": {"javaScript": {
                    "pattern": "#!/usr/bin/env node\n// -*- coding: utf-8 -*-\n'use strict'\n{1}"
                }}
            },

            "testInBrowser": {
                "files": {"defaultHTML": {
                    "filename": "test.html",
                    "inject": "head",
                    "template": {
                        "__evaluate__": "`html?${JSON.stringify(self.module.html)}!pug?${JSON.stringify(self.module.preprocessor.pug)}!${webOptimizerPath}/test.pug`"
                    }
                }},
                "inPlace": {"externalLibrary": {"normal": true}},
                "injection": {"internal": {"index": "test/"}},
                "module": {"optimizer": {"uglifyJS": null}},
                "offline": null
            }
        },

        "debug": {
            "debug": true,

            "injection": {"internal": {"developmentHelper": {
                "__evaluate__": "self.contextType === 'main' && 2 < self.givenCommandLineArguments.length && ['buildDLL', 'serve', 'testInBrowser', 'watchDLL'].includes(self.givenCommandLineArguments[2]) ? [`webpack-dev-server/client?${self.development.server.protocol}://0.0.0.0:${self.development.server.port}`].concat(!['buildDLL', 'watchDLL'].includes(self.givenCommandLineArguments[2]) ? 'webpack/hot/dev-server' : []) : []"
            }}},
            "files": {
                "defaultHTML": {"debug": true},
                "javaScript": {
                    "__evaluate__": "`${self.path.asset.javaScript}[name].js?${self.hashAlgorithm}=[hash]`"
                }
            },
            "inPlace": {
                "cascadingStyleSheet": false,
                "javaScript": false,
                "otherMaximumFileSizeLimitInByte": 1
            },
            "module": {
                "preprocessor": {
                    "pug": {"compiler": {"pretty": true}},
                    "less": {"sourceMap": true}
                },
                "cascadingStyleSheet": {"sourceMap": true},
                "optimizer": {
                    "uglifyJS": null,
                    "htmlMinifier": {
                        "collapseWhitespace": false,
                        "removeComments": false,
                        "removeCommentsFromCDATA": false,
                        "removeCDATASectionsFromCDATA": false,
                        "collapseWhitespace": false,
                        "collapseInlineTagWhitespace": false,
                        "collapseBooleanAttributes": false,
                        "removeScriptTypeAttributes": false,
                        "removeStyleLinkTypeAttributes": false
                    }
                }
            },
            "offline": null,

            "development": {
                "openBrowser": {"url": {
                    "__evaluate__": "((sourceFilePath) => `${self.development.server.protocol}://${self.development.server.host}:${self.development.server.port}/${path.basename(sourceFilePath.substring(sourceFilePath.lastIndexOf('!') + 1)).replace(/\\.[^.]+$/, '.html')}`)(self.files.defaultHTML.template)"
                }},
                "tool": "#eval-cheap-module-source-map"
            },

            "library": {"injection": {"internal": {"vendor": {
                "__evaluate__": "2 < self.givenCommandLineArguments.length && ['buildDLL', 'testInBrowser', 'watchDLL'].includes(self.givenCommandLineArguments[2]) ? ['jquery', 'qunitjs', 'webOptimizer/browserAPI'] : []"
            }}}},

            "testInBrowser": {
                "development": {"openBrowser": {"url": {
                    "__evaluate__": "((sourceFilePath) => `${self.development.server.protocol}://${self.development.server.host}:${self.development.server.port}/${path.basename(sourceFilePath.substring(sourceFilePath.lastIndexOf('!') + 1)).replace(/\\.[^.]+$/, '.html')}?notrycatch&noglobals`)(self.files.defaultHTML.template)"
                }}},
                "injection": {"internal": {
                    "vendor": [
                        "jquery", "qunitjs", "webOptimizer/browserAPI"
                    ],
                    "index": {
                        "__evaluate__": "['test/'].concat(self.debug && self.dllManifestFilePaths.length ? [`webpack-dev-server/client?${self.development.server.protocol}://0.0.0.0:${self.development.server.port}`, 'webpack/hot/dev-server'] : [])"
                    }
                }}
            }
        },

        "library": {
            "files": {
                "cascadingStyleSheet": {
                    "__evaluate__": "self.debug ? null : `${self.path.asset.cascadingStyleSheet}index.compiled.css?${self.hashAlgorithm}=[contenthash]`"
                },
                "javaScript": {
                    "__evaluate__": "`${self.path.asset.javaScript}[name].compiled.js?${self.hashAlgorithm}=[hash]`"
                }
            },
            "injection": {"internal": {"index": "__auto__"}},
            "inPlace": {
                "cascadingStyleSheet": false, "javaScript": false,
                "otherMaximumFileSizeLimitInByte": 1,
                "externalLibrary": {"normal": {
                    "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'buildDLL'"
                }}
            },
            "path": {
                "source": "./", "target": "./",
                "asset": {
                    "cascadingStyleSheet": "./",
                    "javaScript": "./",
                    "coffeeScript": "./",
                    "less": "./",
                    "scss": "./",
                    "sass": "./",
                    "font": "./",
                    "image": "./",
                    "template": "./",
                    "data": "./"
                }
            },
            "offline": null,

            "document": {
                "commandLine": {"document": {"arguments": [
                    "--package",
                    "./package.json",
                    "--readme",
                    "./readme.md",
                    "--destination",
                    {"__evaluate__": "self.path.apiDocumentation"},
                    {"__evaluate__": "`'${path.join(self.path.target, self.path.asset.javaScript)}'*.compiled.js`"}
                ]}},
                "exportFormat": "var",
                "targetTechnology": "node"
            },

            "test": {"injection": {"internal": "test"}},

            "testInBrowser": {"injection": {"internal": {"index": {
                "__evaluate__": "['test'].concat(self.debug && self.dllManifestFilePaths.length ? [`webpack-dev-server/client?${self.development.server.protocol}://0.0.0.0:${self.development.server.port}`, 'webpack/hot/dev-server'] : [])"
            }}}}
        }
    },
    "eslintConfig": {
        "env": {
            "browser": true,
            "node": true
        },
        "extends": "google",
        "parserOptions": {
            "ecmaFeatures": {},
            "ecmaVersion": 7,
            "impliedStrict": true,
            "sourceType": "module"
        },
        "parser": "babel-eslint",
        "plugins": ["jsdoc", "flowtype"],
        "rules": {
            "arrow-parens": ["error", "always"],
            "block-scoped-var": 0,
            "curly": ["error", "multi"],
            "indent": ["error", 4],
            "max-nested-callbacks": ["error", 10],
            "no-unused-vars": ["error", {"argsIgnorePattern": "^_"}],
            "new-cap": 0,
            "no-constant-condition": 0,
            "no-new-func": 0,
            "no-new-wrappers": 0,
            "quote-props": ["error", "as-needed", {"numbers": true}],
            "require-jsdoc": ["error", {"require": {
                "FunctionDeclaration": true,
                "MethodDefinition": true,
                "ClassDeclaration": true
            }}],
            "semi": ["error", "never"],
            "spaced-comment": ["error", "always", {"line": {"exceptions": [
                "/usr/bin/env node"
            ]}}],
            "space-infix-ops": 0,
            "valid-jsdoc": [0, {
                "prefer": {"return": "returns"},
                "requireParamDescription": false,
                "requireReturnDescription": true,
                "requireReturnType": false
            }],

            "jsdoc/check-param-names": "error",
            "jsdoc/check-tag-names": "error",
            "jsdoc/newline-after-description": ["error", "newer"],
            "jsdoc/require-description-complete-sentence": "error",
            "jsdoc/require-hyphen-before-param-description": "error",
            "jsdoc/require-param": "error",
            "jsdoc/require-param-description": "error",
            "jsdoc/require-param-type": 0,
            "jsdoc/require-returns-description": "error",
            "jsdoc/require-returns-type": 0,

            "flowtype/require-parameter-type": "error",
            "flowtype/require-return-type": ["error", "always", {
                "annotateUndefined": "always"
            }],
            "flowtype/space-before-type-colon": ["error", "never"],
            "flowtype/space-after-type-colon": ["error", "never"],
            "flowtype/type-id-match": ["error", "^([$_]*[A-Z]+[a-z0-9]*)+$"]
        },
        "settings": {"flowtype": {"onlyFilesWithFlowAnnotation": false}}
    }
}
