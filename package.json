{
  "name": "weboptimizer",
  "version": "1.0.238",
  "license": "CC-BY-3.0",
  "description": "A generic web optimizer, (module) bundler and development environment.",
  "homepage": "http://torben.website/webOptimizer",
  "documentationWebsite": {
    "name": "webOptimizer",
    "trackingCode": "UA-40192634-11"
  },
  "keywords": [
    "webpack",
    "optimizer",
    "configuration",
    "generic",
    "lint",
    "bundle",
    "test",
    "document",
    "mock"
  ],
  "files": [
    "browserAPI.js",
    "browserAPI.compiled.js",
    "configurator.js",
    "configurator.compiled.js",
    "helper.js",
    "helper.compiled.js",
    "pugLoader.js",
    "pugLoader.compiled.js",
    "index.js",
    "index.pug",
    "stylelintConfigurator.js",
    "stylelintConfigurator.compiled.js",
    "type.js",
    "webpackConfigurator.js",
    "webpackConfigurator.compiled.js"
  ],
  "main": "index.compiled.js",
  "bin": {
    "webOptimizer": "index.compiled.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/webOptimizer.git"
  },
  "scripts": {
    "build": "command='babel --plugins transform-flow-strip-types,transform-runtime --presets es2017-node7,stage-0,babili --source-maps inline --out-file' && babel --plugins transform-flow-strip-types,transform-runtime --presets modern-browsers,es2017,stage-0,babili --source-maps inline --out-file browserAPI.compiled.js browserAPI.js && $command configurator.compiled.js configurator.js && $command helper.compiled.js helper.js && $command pugLoader.compiled.js pugLoader.js && $command stylelintConfigurator.compiled.js stylelintConfigurator.js && $command index.compiled.js index.js && $command webpackConfigurator.compiled.js webpackConfigurator.js",
    "clear": "rimraf *.compiled.*; rimraf *.compiled;rimraf test/*.compiled.*; rimraf apiDocumentation; rimraf *.html || true",
    "document": "npm run build && jsdoc --package ./package.json --readme ./readme.md --destination apiDocumentation *.compiled.js",
    "lint": "flow --color always --strip-root; eslint --ignore-pattern '*.compiled.*' '*.js' 'test/*.js' || true",
    "prepublish": "npm run build",
    "test": "npm run clear && command='babel --plugins transform-flow-strip-types,transform-runtime --presets es2017-node7,stage-0,babili --source-maps inline --out-file' && $command browserAPI.compiled.js browserAPI.js && $command test/browserAPI.compiled.js test/browserAPI.js && $command configurator.compiled.js configurator.js && $command helper.compiled.js helper.js && chmod +x test/* && test/browserAPI.compiled.js && $command test/configurator.compiled.js test/configurator.js && chmod +x test/* && test/configurator.compiled.js && $command test/helper.compiled.js test/helper.js && chmod +x test/* && test/helper.compiled.js && $command pugLoader.compiled.js pugLoader.js && $command test/pugLoader.compiled.js test/pugLoader.js && chmod +x test/* && test/pugLoader.compiled.js && $command stylelintConfigurator.compiled.js stylelintConfigurator.js && $command test/stylelintConfigurator.compiled.js test/stylelintConfigurator.js && chmod +x test/* && test/stylelintConfigurator.compiled.js && $command index.compiled.js index.js && $command test/index.compiled.js test/index.js && chmod +x test/* && test/index.compiled.js && $command webpackConfigurator.compiled.js webpackConfigurator.js && $command test/webpackConfigurator.compiled.js test/webpackConfigurator.js && chmod +x test/* && test/webpackConfigurator.compiled.js || true",
    "update": "npm version patch && npm publish",
    "updateDocumentation": "documentationWebsite --log-level info"
  },
  "dependencies": {
    "add-asset-html-webpack-plugin": "latest",
    "babili-webpack-plugin": "latest",
    "babel-cli": "latest",
    "babel-eslint": "latest",
    "babel-loader": "latest",
    "babel-plugin-transform-runtime": "latest",
    "babel-plugin-transform-flow-strip-types": "latest",
    "babel-preset-modern-browsers": "latest",
    "babel-preset-es2017": "latest",
    "babel-preset-es2017-node7": "latest",
    "babel-preset-stage-0": "latest",
    "babel-runtime": "latest",
    "babel-preset-babili": "latest",
    "css-loader": "latest",
    "eslint": "latest",
    "eslint-config-google": "latest",
    "eslint-plugin-flowtype": "latest",
    "eslint-plugin-jsdoc": "latest",
    "exports-loader": "latest",
    "extract-loader": "latest",
    "extract-text-webpack-plugin": "2.0.0-beta.5",
    "favicons-webpack-plugin": "latest",
    "file-loader": "latest",
    "flow-bin": "latest",
    "html-loader": "latest",
    "html-webpack-plugin": "latest",
    "imagemin-webpack-plugin": "latest",
    "imports-loader": "latest",
    "jsdoc": "latest",
    "jsdom": "latest",
    "loader-utils": "latest",
    "offline-plugin": "latest",
    "open-browser-webpack-plugin": "latest",
    "postcss-cssnext": "latest",
    "postcss-fontpath": "latest",
    "postcss-import": "8.1.0",
    "postcss-loader": "latest",
    "postcss-sprites": "latest",
    "postcss-url": "latest",
    "pug": "latest",
    "pug-cli": "latest",
    "rimraf": "latest",
    "script-loader": "latest",
    "stylelint": "latest",
    "stylelint-config-standard": "latest",
    "style-loader": "latest",
    "clientnode": "latest",
    "url-loader": "latest",
    "webpack": ">=2.2.0",
    "webpack-dev-server": "latest",
    "webpack-load-plugins": "latest",
    "webpack-sources": "latest"
  },
  "devDependencies": {
    "documentation-website": "latest",
    "source-map-support": "latest"
  },
  "configuration": {
    "default": {
      "assetPattern": {
        "javaScript": {
          "excludeFilePathRegularExpression": {
            "__evaluate__": "`^(?:.*/)?(?:developmentHelper|errorreporter|vendor${self.debug && ['web', 'webworker'].includes(self.targetTechnology) && self.inPlace.externalLibrary.normal ? '|index' : ''})(?:\\.compiled)?\\.js$`"
          },
          "pattern": "'use strict';\n{1}"
        }
      },
      "build": {
        "types": {
          "default": {
            "filePathPattern": {
              "__evaluate__": "`^${tools.stringGetRegularExpressionValidated(self.path.target.asset.javaScript)}.+${self.path.target.asset.javaScript === self.path.source.asset.javaScript ? '\\\\.compiled' : ''}(?:\\\\.[^.]+(?:\\\\.map)?)?$`"
            },
            "outputExtension": "js",
            "preinstall": {
              "__evaluate__": "`touch '\\${path.resolve(self.path.target.asset[buildConfiguration.type], path.basename(filePath, \\`.\\${buildConfiguration.extension}\\`))}.compiled.\\${buildConfiguration.outputExtension}'`"
            }
          },
          "javaScript": {
            "extension": "js"
          },
          "cascadingStyleSheet": {
            "extension": "css",
            "filePathPattern": {
              "__evaluate__": "`^${tools.stringGetRegularExpressionValidated(self.path.target.asset.cascadingStyleSheet)}.+${self.path.target.asset.cascadingStyleSheet === self.path.source.asset.cascadingStyleSheet ? '\\\\.compiled' : ''}(?:\\\\.[^.]+(?:\\\\.map)?)?$`"
            },
            "outputExtension": "css"
          },
          "additional": {
            "filePathPattern": "^.+\\.compiled(?:\\.map)?$",
            "outputExtension": ""
          }
        },
        "definitions": {
          "CONTEXT_TYPE": {
            "__evaluate__": "`'${self.contextType}'`"
          },
          "DEBUG": {
            "__evaluate__": "self.debug"
          },
          "EXTERNAL_EXPORT_FORMAT": {
            "__evaluate__": "`'${self.exportFormat.external}'`"
          },
          "NAME": {
            "__evaluate__": "`'${self.name}'`"
          },
          "OFFLINE": {
            "__evaluate__": "Boolean(self.offline)"
          },
          "SELF_EXPORT_FORMAT": {
            "__evaluate__": "`'${self.exportFormat.self}'`"
          },
          "TARGET_TECHNOLOGY": {
            "__evaluate__": "`'${self.targetTechnology}'`"
          }
        }
      },
      "cache": {
        "main": true,
        "unsafe": true
      },
      "commandLine": {
        "build": {
          "arguments": [
            "--bail",
            "--config",
            {
              "__evaluate__": "`${webOptimizerPath}/webpackConfigurator.compiled.js`"
            },
            "--progress",
            "--display-chunks",
            "--display-reasons",
            "--display-error-details"
          ],
          "command": "webpack"
        },
        "document": {
          "arguments": [
            "--package",
            "./package.json",
            "--readme",
            "./readme.md",
            "--destination",
            {
              "__evaluate__": "self.path.apiDocumentation"
            },
            {
              "__evaluate__": "`'${self.path.target.asset.javaScript}'*.js`"
            }
          ],
          "command": "jsdoc",
          "indicator": "self.needed.javaScript"
        },
        "lint": [
          {
            "arguments": [
              {
                "__evaluate__": "path.resolve(self.path.source.asset.cascadingStyleSheet, '**/*.css')"
              },
              "--config",
              {
                "__evaluate__": "path.relative(self.path.context, path.resolve(webOptimizerPath, 'stylelintConfigurator.compiled.js'))"
              }
            ],
            "command": "stylelint",
            "indicator": "self.needed.cascadingStyleSheet"
          },
          {
            "arguments": [
              "--config",
              {
                "__evaluate__": "`'${webOptimizerPath}/package.json'`"
              },
              "--ignore-pattern",
              {
                "__evaluate__": "`'${self.path.target.base.substring(currentPath.length + 1) ? path.relative(currentPath, self.path.target.base, '**') : \"*.compiled.js\"}'`"
              },
              "--ignore-pattern",
              {
                "__evaluate__": "`'${self.path.apiDocumentation}'`"
              },
              "--ignore-pattern",
              {
                "__evaluate__": "`'**/node_modules/*'`"
              },
              "'**/*.js'"
            ],
            "command": "eslint",
            "indicator": "self.needed.javaScript"
          }
        ],
        "serve": {
          "arguments": [
            "--cache",
            "--config",
            {
              "__evaluate__": "`'${webOptimizerPath}/webpackConfigurator.compiled.js'`"
            },
            {
              "__evaluate__": "self.debug ? '--hot' : ''"
            },
            {
              "__evaluate__": "self.debug ? '--inline' : ''"
            },
            "--host",
            "0.0.0.0",
            "--port",
            {
              "__evaluate__": "self.development.server.port"
            },
            "--compress",
            "--history-api-fallback",
            "--progress"
          ],
          "command": "webpack-dev-server"
        },
        "test": {
          "command": {
            "__evaluate__": "helper.stripLoader(self.files.compose.javaScript)"
          }
        },
        "testInBrowser": {
          "__evaluate__": "self.commandLine.serve"
        },
        "typeCheck": {
          "arguments": [
            "--color",
            "always",
            "--strip-root",
            "--show-all-errors"
          ],
          "command": "flow"
        }
      },
      "debug": false,
      "development": {
        "openBrowser": null,
        "server": {
          "contentBase": {
            "__evaluate__": "self.path.source.base"
          },
          "historyApiFallback": true,
          "hot": {
            "__evaluate__": "self.debug"
          },
          "stats": {
            "colors": true
          },
          "host": "localhost",
          "port": 8080
        },
        "tool": false
      },
      "document": {
        "inPlace": {
          "externalLibrary": {
            "normal": false
          }
        },
        "module": {
          "optimizer": {
            "babili": null
          }
        }
      },
      "exportFormat": {
        "external": "umd",
        "self": "umd"
      },
      "extensions": {
        "file": {
          "internal": [
            ".js",
            ".json",
            ".css",
            ".eot",
            ".gif",
            ".html",
            ".ico",
            ".jpg",
            ".png",
            ".pug",
            ".svg",
            ".ttf",
            ".woff",
            ".woff2"
          ],
          "external": {
            "__evaluate__": "self.targetTechnology === 'node' ? ['.js', '.json'] : ['.js', '.css', '.eot', '.gif', '.html', '.ico', '.jpg', '.png', '.svg', '.ttf', '.woff', '.woff2']"
          }
        },
        "module": []
      },
      "favicon": {
        "background": "white",
        "emitStats": false,
        "icons": {
          "android": true,
          "appleIcon": true,
          "appleStartup": true,
          "coast": true,
          "favicons": true,
          "firefox": true,
          "opengraph": true,
          "twitter": true,
          "windows": true,
          "yandex": true
        },
        "inject": true,
        "logo": {
          "__evaluate__": "self.path.source.asset.favicon"
        },
        "persistentCache": true,
        "prefix": {
          "__evaluate__": "`${path.relative(self.path.target.base, path.resolve(self.path.target.asset.image, 'favicons-[hash]'))}/`"
        },
        "statsFilename": "iconStats.json",
        "title": {
          "__evaluate__": "self.name"
        }
      },
      "files": {
        "additionalPaths": [
          "crossdomain.xml",
          "favicon.ico",
          "humans.txt",
          "license.txt",
          "robots.txt",
          "404.html",
          ".htaccess"
        ],
        "compose": {
          "cascadingStyleSheet": {
            "__evaluate__": "self.debug ? null : `${path.resolve(self.path.target.asset.cascadingStyleSheet, 'index.css')}?${self.hashAlgorithm}=[contenthash]`"
          },
          "image": {
            "__evaluate__": "self.debug ? null : path.resolve(self.path.target.asset.image, 'sprite.png')"
          },
          "javaScript": {
            "__evaluate__": "`${path.resolve(self.path.target.asset.javaScript, '[name]')}.js?${self.hashAlgorithm}=[hash]`"
          }
        },
        "defaultHTML": {
          "chunksSortMode": "auto",
          "debug": false,
          "filename": "index.html",
          "hash": true,
          "inject": "body",
          "minify": {
            "__evaluate__": "self.module.optimizer.htmlMinifier"
          },
          "template": {
            "filePath": {
              "__evaluate__": "`${tools.isFileSync(path.resolve(self.path.source.base, 'index.pug')) ? path.resolve(self.path.source.base, 'index.pug') : path.resolve(webOptimizerPath, 'index.pug')}`"
            },
            "use": [
              {
                "loader": {
                  "__evaluate__": "self.module.html.loader"
                },
                "options": {
                  "__evaluate__": "self.module.html.options"
                }
              },
              {
                "loader": {
                  "__evaluate__": "self.module.preprocessor.html.loader"
                },
                "options": {
                  "__evaluate__": "self.module.preprocessor.html.options"
                }
              }
            ]
          }
        },
        "html": [
          {}
        ]
      },
      "hashAlgorithm": "md5",
      "injection": {
        "autoExclude": [
          "./test"
        ],
        "commonChunkIDs": [
          "vendor"
        ],
        "dllChunkIDs": [
          "vendor",
          "developmentHelper"
        ],
        "external": {
          "aliases": {},
          "implicit": {
            "pattern": {
              "exclude": [
                {
                  "__evaluate__": "/^weboptimizer\\/browserAPI(?:\\.compiled)?(?:\\.js)?$/"
                },
                {
                  "__evaluate__": "/(?:^|\\/)webpack(?:$|\\/)/"
                }
              ],
              "include": []
            }
          },
          "modules": "__implicit__"
        },
        "ignorePattern": [],
        "internal": {
          "index": "__auto__"
        }
      },
      "inPlace": {
        "cascadingStyleSheet": {
          "*": "in"
        },
        "externalLibrary": {
          "normal": true,
          "dynamic": true
        },
        "javaScript": {
          "errorreporter": "head"
        },
        "otherMaximumFileSizeLimitInByte": 40960
      },
      "library": true,
      "loader": {
        "aliases": {
          "pug": "weboptimizer/pugLoader.compiled"
        },
        "extensions": {
          "file": [
            ".js"
          ],
          "module": [
            "-loader"
          ]
        },
        "directoryNames": [
          "node_modules"
        ]
      },
      "module": {
        "additional": [],
        "aliases": {
          "weboptimizer/browserAPI$": "weboptimizer/browserAPI.compiled",
          "weboptimizer/helper$": "weboptimizer/helper.compiled"
        },
        "cascadingStyleSheet": {
          "exclude": null,
          "loader": "css",
          "options": {}
        },
        "directoryNames": [
          "node_modules"
        ],
        "html": {
          "exclude": null,
          "loader": "html",
          "options": {
            "config": "html",
            "attrs": [
              "img:src",
              "link:href"
            ]
          }
        },
        "optimizer": {
          "data": {
            "exclude": null,
            "loader": "url",
            "options": {
              "limit": {
                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
              },
              "name": {
                "__evaluate__": "`${path.join(path.relative(self.path.target.base, self.path.target.asset.data), '[name].[ext]')}?${self.hashAlgorithm}=[hash]`"
              }
            }
          },
          "font": {
            "eot": {
              "exclude": null,
              "loader": "url",
              "options": {
                "limit": {
                  "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                },
                "name": {
                  "__evaluate__": "`${path.join(path.relative(self.path.target.base, self.path.target.asset.font), '[name].[ext]')}?${self.hashAlgorithm}=[hash]`"
                }
              }
            },
            "svg": {
              "exclude": null,
              "loader": "url",
              "options": {
                "limit": {
                  "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                },
                "mimetype": "image/svg+xml",
                "name": {
                  "__evaluate__": "`${path.join(path.relative(self.path.target.base, self.path.target.asset.font), '[name].[ext]')}?${self.hashAlgorithm}=[hash]`"
                }
              }
            },
            "ttf": {
              "exclude": null,
              "loader": "url",
              "options": {
                "limit": {
                  "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                },
                "mimetype": "application/octet-stream",
                "name": {
                  "__evaluate__": "`${path.join(path.relative(self.path.target.base, self.path.target.asset.font), '[name].[ext]')}?${self.hashAlgorithm}=[hash]`"
                }
              }
            },
            "woff": {
              "exclude": null,
              "loader": "url",
              "options": {
                "limit": {
                  "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
                },
                "name": {
                  "__evaluate__": "`${path.join(path.relative(self.path.target.base, self.path.target.asset.font), '[name].[ext]')}?${self.hashAlgorithm}=[hash]`"
                }
              }
            }
          },
          "htmlMinifier": {
            "caseSensitive": true,
            "collapseBooleanAttributes": true,
            "collapseInlineTagWhitespace": true,
            "collapseWhitespace": true,
            "conservativeCollapse": true,
            "ignoreCustomComments": [],
            "ignoreCustomFragments": [
              {
                "__evaluate__": "/<%[\\s\\S]*?%>/"
              },
              {
                "__evaluate__": "/<\\?[\\s\\S]*?\\?>/"
              },
              {
                "__evaluate__": "/<link[^>]*>/"
              },
              {
                "__evaluate__": "/<img[^>]*>/"
              }
            ],
            "includeAutoGeneratedTags": false,
            "keepClosingSlash": true,
            "lint": false,
            "maxLineLength": 1e+31,
            "minifyJS": {
              "__evaluate__": "self.module.optimizer.babili"
            },
            "minifyCSS": false,
            "minifyURLs": false,
            "preserveLineBreaks": true,
            "preventAttributesEscaping": true,
            "processScripts": [],
            "processConditionalComments": false,
            "quoteCharacter": "\"",
            "removeAttributeQuotes": false,
            "removeComments": true,
            "removeCommentsFromCDATA": true,
            "removeCDATASectionsFromCDATA": true,
            "removeTagWhitespace": false,
            "removeRedundantAttributes": false,
            "removeEmptyAttributes": false,
            "removeScriptTypeAttributes": true,
            "removeStyleLinkTypeAttributes": true,
            "removeOptionalTags": false,
            "removeEmptyElements": false,
            "useShortDoctype": false
          },
          "image": {
            "content": {
              "disable": {
                "__evaluate__": "self.debug || 2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] !== 'build' ? true : console.warn(`Image compression disabled. Use configuration: \"{module:{optimizer:{image:{content:{disable:false}}}}}\" to enable it.`) || true"
              },
              "gifsicle": {
                "optimizationLevel": 3,
                "interlanced": false,
                "colors": 256
              },
              "jpegtran": {
                "progressive": true,
                "arithmetic": true
              },
              "optipng": {
                "optimizationLevel": 7
              },
              "plugins": [],
              "pngquant": null,
              "svgo": {}
            },
            "file": {
              "limit": {
                "__evaluate__": "self.inPlace.otherMaximumFileSizeLimitInByte"
              },
              "name": {
                "__evaluate__": "`${path.relative(self.path.target.base, path.resolve(self.path.target.asset.image, '[name].[ext]'))}?${self.hashAlgorithm}=[hash]`"
              }
            },
            "loader": "url"
          },
          "babili": {
            "comments": false
          }
        },
        "preprocessor": {
          "cascadingStyleSheet": {
            "loader": "postcss?sourceMap=inline",
            "options": {}
          },
          "html": {
            "exclude": null,
            "loader": "pug",
            "options": {
              "module": {
                "aliases": {
                  "__evaluate__": "self.module.aliases"
                },
                "replacements": {
                  "__evaluate__": "self.module.replacements"
                }
              },
              "extensions": {
                "__evaluate__": "self.extensions"
              },
              "context": {
                "__evaluate__": "self.path.context"
              },
              "compiler": {
                "cache": true,
                "debug": false,
                "pretty": false
              }
            }
          },
          "javaScript": {
            "exclude": null,
            "loader": "babel",
            "options": {
              "cacheDirectory": true,
              "compact": {
                "__evaluate__": "!self.debug"
              },
              "minified": {
                "__evaluate__": "!self.debug"
              },
              "presets": {
                "__evaluate__": "(self.targetTechnology === 'node' ? ['es2017-node7'] : [['modern-browsers', {loose: true}], 'es2017']).concat('stage-0').concat((self.debug || 2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'document') ? [] : 'babili')"
              },
              "plugins": [
                "transform-flow-strip-types",
                "transform-runtime"
              ]
            }
          }
        },
        "provide": {},
        "replacements": {
          "context": [],
          "normal": {}
        },
        "skipParseRegularExpressions": {
          "__evaluate__": "/\\/(?:module|global)\\.js(?:\\?.+|$)/"
        },
        "style": {
          "loader": "style",
          "options": {
            "insertAt": "top",
            "singleton": true
          }
        }
      },
      "offline": {
        "AppCache": {
          "directory": ""
        },
        "caches": {
          "main": [
            "index.html",
            ":rest:"
          ]
        },
        "excludes": [
          {
            "__evaluate__": "`**/*.map?${self.hashAlgorithm}=*`"
          },
          "**/.*"
        ],
        "externals": [
          "index.html"
        ],
        "publicPath": "/",
        "relativePaths": false,
        "ServiceWorker": {
          "events": true,
          "navigateFallbackURL": null,
          "output": {
            "__evaluate__": "path.relative(self.path.target.base, path.resolve(self.path.target.asset.javaScript, 'serviceWorker.js'))"
          }
        },
        "updateStrategy": "changed",
        "version": "[hash]"
      },
      "package": {
        "aliasPropertyNames": {
          "__evaluate__": "(self.targetTechnology === 'web' ? ['browser'] : [])"
        },
        "main": {
          "fileNames": [
            "index"
          ],
          "propertyNames": {
            "__evaluate__": "(self.targetTechnology === 'web' ? ['browser'] : []).concat(['module', 'main'])"
          }
        }
      },
      "path": {
        "apiDocumentation": "apiDocumentation/",
        "base": "./",
        "ignore": [
          ".git",
          {
            "__evaluate__": "self.path.apiDocumentation"
          }
        ],
        "source": {
          "asset": {
            "base": "./",
            "cascadingStyleSheet": "cascadingStyleSheet/",
            "data": "data/",
            "favicon": {
              "__evaluate__": "path.resolve(self.path.source.asset.image, 'favicon.png')"
            },
            "font": "font/",
            "image": "image/",
            "javaScript": "javaScript/",
            "template": "template/"
          },
          "base": "source/"
        },
        "target": {
          "asset": {
            "base": "./",
            "cascadingStyleSheet": "cascadingStyleSheet/",
            "data": "data/",
            "favicon": {
              "__evaluate__": "path.resolve(self.path.target.asset.image, 'favicon.png')"
            },
            "font": "font/",
            "image": "image/",
            "javaScript": "javaScript/",
            "template": "template/"
          },
          "base": "build/",
          "manifest": "manifest.appcache",
          "public": ""
        },
        "tidyUp": [
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.compiled.js')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.js')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.compiled.js.map')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.js.map')"
          },
          {
            "__evaluate__": "self.files.compose.image ? path.resolve(self.path.source.asset.image, path.relative(self.path.target.asset.image, self.files.compose.image)) : null"
          }
        ]
      },
      "performanceHints": {
        "hints": false
      },
      "showConfiguration": {
        "__evaluate__": "self.debug"
      },
      "stylelint": {
        "extends": "stylelint-config-standard",
        "ignoreFiles": "**/node_modules/*",
        "rules": {
          "comment-empty-line-before": "never",
          "indentation": 4
        }
      },
      "targetTechnology": "web",
      "test": {
        "assetPattern": {
          "javaScript": {
            "pattern": "#!/usr/bin/env node\n// -*- coding: utf-8 -*-\n'use strict';\n{1}"
          }
        },
        "exportFormat": {
          "external": "commonjs2",
          "self": "commonjs2"
        },
        "files": {
          "compose": {
            "javaScript": {
              "__evaluate__": "`${path.resolve(self.path.target.asset.javaScript, `testBundle${self.path.target.asset.javaScript === self.path.source.asset.javaScript ? '.compiled' : ''}.js`)}?${self.hashAlgorithm}=[hash]`"
            }
          },
          "defaultHTML": {
            "filename": "test.html",
            "inject": "head",
            "template": {
              "filePath": {
                "__evaluate__": "`${tools.isFileSync(path.resolve(self.path.source.base, 'test.pug')) ? path.resolve(self.path.source.base, 'test.pug') : path.resolve(webOptimizerPath, 'index.pug')}`"
              }
            }
          },
          "html": []
        },
        "targetTechnology": "node"
      },
      "testInBrowser": {
        "files": {
          "defaultHTML": {
            "filename": "test.html",
            "inject": "head",
            "template": {
              "filePath": {
                "__evaluate__": "`${tools.isFileSync(path.resolve(self.path.source.base, 'test.pug')) ? path.resolve(self.path.source.base, 'test.pug') : path.resolve(webOptimizerPath, 'index.pug')}`"
              }
            }
          }
        },
        "inPlace": {
          "externalLibrary": {
            "normal": true
          }
        },
        "module": {
          "optimizer": {
            "babili": null
          }
        },
        "offline": null
      }
    },
    "debug": {
      "debug": true,
      "development": {
        "openBrowser": {
          "url": {
            "__evaluate__": "`http${self.development.server.cert ? 's' : ''}://${self.development.server.host}:${self.development.server.port}/${self.path.target.public}/${self.files.defaultHTML.filename}`"
          }
        }
      },
      "files": {
        "compose": {
          "javaScript": {
            "__evaluate__": "`${path.resolve(self.path.target.asset.javaScript, '[name].js')}?${self.hashAlgorithm}=[hash]`"
          }
        },
        "defaultHTML": {
          "debug": true
        }
      },
      "injection": {
        "internal": {
          "developmentHelper": {
            "__evaluate__": "2 < self.givenCommandLineArguments.length && (['buildDLL', 'watchDLL'].includes(self.givenCommandLineArguments[2]) || self.dllManifestFilePaths.length && ['serve', 'testInBrowser'].includes(self.givenCommandLineArguments[2])) ? [`webpack-dev-server/client?http${self.development.server.cert ? 's' : ''}://0.0.0.0:${self.development.server.port}`] : []"
          },
          "vendor": {
            "__evaluate__": "2 < self.givenCommandLineArguments.length && (self.givenCommandLineArguments[2] === 'serve' ? ['babel-polyfill'] : []).concat(['buildDLL', 'testInBrowser', 'watchDLL'].includes(self.givenCommandLineArguments[2]) ? ['babel-polyfill', 'script!qunitjs', 'weboptimizer/browserAPI'] : []) || []"
          }
        }
      },
      "inPlace": {
        "cascadingStyleSheet": null,
        "javaScript": null,
        "otherMaximumFileSizeLimitInByte": 1
      },
      "module": {
        "optimizer": {
          "htmlMinifier": {
            "collapseWhitespace": false,
            "removeComments": false,
            "removeCommentsFromCDATA": false,
            "removeCDATASectionsFromCDATA": false,
            "collapseInlineTagWhitespace": false,
            "collapseBooleanAttributes": false,
            "removeScriptTypeAttributes": false,
            "removeStyleLinkTypeAttributes": false
          },
          "babili": null
        },
        "preprocessor": {
          "cascadingStyleSheet": {
            "loader": "postcss?sourceMap"
          },
          "html": {
            "options": {
              "compiler": {
                "pretty": true
              }
            }
          }
        }
      },
      "offline": null
    },
    "library": {
      "document": {
        "commandLine": {
          "document": {
            "arguments": [
              "--package",
              "./package.json",
              "--readme",
              "./readme.md",
              "--destination",
              {
                "__evaluate__": "self.path.apiDocumentation"
              },
              {
                "__evaluate__": "`'${self.path.target.asset.javaScript}'*${self.path.target.asset.javaScript === self.path.source.asset.javaScript ? '.compiled' : ''}.js`"
              }
            ]
          }
        },
        "exportFormat": {
          "self": "var"
        },
        "targetTechnology": "node"
      },
      "exportFormat": {
        "self": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve' ? 'var' : 'umd'"
        }
      },
      "files": {
        "compose": {
          "cascadingStyleSheet": {
            "__evaluate__": "self.debug && 2 < self.givenCommandLineArguments.length && ['testInBrowser', 'serve'].includes(self.givenCommandLineArguments[2]) ? null : `${path.resolve(self.path.target.asset.cascadingStyleSheet, `index${self.path.target.asset.cascadingStyleSheet === self.path.source.asset.cascadingStyleSheet ? '.compiled' : ''}.css`)}?${self.hashAlgorithm}=[contenthash]`"
          },
          "javaScript": {
            "__evaluate__": "`${path.resolve(self.path.target.asset.javaScript, `[name]${self.path.target.asset.javaScript === self.path.source.asset.javaScript ? '.compiled' : ''}.js`)}?${self.hashAlgorithm}=[hash]`"
          }
        },
        "defaultHTML": {
          "filename": "playground.html",
          "inject": "head",
          "template": {
            "filePath": {
              "__evaluate__": "`${tools.isFileSync(path.resolve(self.path.source.base, 'playground.pug')) ? path.resolve(self.path.source.base, 'playground.pug') : path.resolve(webOptimizerPath, 'index.pug')}`"
            }
          }
        },
        "html": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && ['testInBrowser', 'serve'].includes(self.givenCommandLineArguments[2]) ? [{}] : []"
        }
      },
      "injection": {
        "autoExclude": [
          "test"
        ]
      },
      "inPlace": {
        "externalLibrary": {
          "normal": {
            "__evaluate__": "2 < self.givenCommandLineArguments.length && ['buildDLL', 'serve', 'watchDLL'].includes(self.givenCommandLineArguments[2])"
          }
        },
        "otherMaximumFileSizeLimitInByte": 1
      },
      "libraryName": {
        "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve' ? [tools.stringConvertToValidVariableName(self.name), '[name]']: null"
      },
      "offline": null,
      "path": {
        "source": {
          "asset": {
            "cascadingStyleSheet": "./",
            "javaScript": "./",
            "font": "./",
            "image": "./",
            "template": "./",
            "data": "./"
          },
          "base": "./"
        },
        "target": {
          "asset": {
            "cascadingStyleSheet": "./",
            "javaScript": "./",
            "font": "./",
            "image": "./",
            "template": "./",
            "data": "./"
          },
          "base": "./"
        }
      },
      "test": {
        "injection": {
          "internal": {
            "index": "./test"
          }
        }
      },
      "testInBrowser": {
        "injection": {
          "internal": {
            "index": "./test"
          }
        }
      }
    }
  },
  "eslintConfig": {
    "env": {
      "browser": true,
      "node": true
    },
    "extends": "google",
    "parserOptions": {
      "ecmaFeatures": {},
      "ecmaVersion": 7,
      "impliedStrict": true,
      "sourceType": "module"
    },
    "parser": "babel-eslint",
    "plugins": [
      "jsdoc",
      "flowtype"
    ],
    "rules": {
      "arrow-parens": [
        "error",
        "always"
      ],
      "block-scoped-var": 0,
      "comma-dangle": [
        "error",
        "never"
      ],
      "curly": [
        "error",
        "multi"
      ],
      "indent": [
        "error",
        4
      ],
      "max-nested-callbacks": [
        "error",
        10
      ],
      "no-invalid-this": 0,
      "no-unused-vars": [
        "error",
        {
          "argsIgnorePattern": "^_"
        }
      ],
      "new-cap": 0,
      "no-constant-condition": 0,
      "no-new-func": 0,
      "no-new-wrappers": 0,
      "quote-props": [
        "error",
        "as-needed",
        {
          "numbers": true
        }
      ],
      "require-jsdoc": [
        "error",
        {
          "require": {
            "FunctionDeclaration": true,
            "MethodDefinition": true,
            "ClassDeclaration": true
          }
        }
      ],
      "semi": [
        "error",
        "never"
      ],
      "spaced-comment": [
        "error",
        "always",
        {
          "line": {
            "exceptions": [
              "/usr/bin/env node"
            ]
          }
        }
      ],
      "space-infix-ops": 0,
      "valid-jsdoc": [
        0,
        {
          "prefer": {
            "return": "returns"
          },
          "requireParamDescription": false,
          "requireReturnDescription": true,
          "requireReturnType": false
        }
      ],
      "jsdoc/check-param-names": "error",
      "jsdoc/check-tag-names": "error",
      "jsdoc/newline-after-description": [
        "error",
        "newer"
      ],
      "jsdoc/require-description-complete-sentence": "error",
      "jsdoc/require-hyphen-before-param-description": "error",
      "jsdoc/require-param": "error",
      "jsdoc/require-param-description": "error",
      "jsdoc/require-param-type": 0,
      "jsdoc/require-returns-description": "error",
      "jsdoc/require-returns-type": 0,
      "flowtype/require-parameter-type": "error",
      "flowtype/require-return-type": [
        "error",
        "always",
        {
          "annotateUndefined": "always"
        }
      ],
      "flowtype/space-before-type-colon": [
        "error",
        "never"
      ],
      "flowtype/space-after-type-colon": [
        "error",
        "never"
      ],
      "flowtype/type-id-match": [
        "error",
        "^([$_]*[A-Z]+[a-z0-9]*)+$"
      ]
    },
    "settings": {
      "flowtype": {
        "onlyFilesWithFlowAnnotation": false
      }
    }
  }
}
